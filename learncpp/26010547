<!doctype html>
<html lang="zh-CN">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>【构建操作系统】多进程机制 - 知乎专栏</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link rel="shortcut icon" href="https://static.zhihu.com/static/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="//static.zhihu.com/hemingway/app.79ee58592781f37f89cf23e10f1f9ff0.css" />
    <script>document.documentElement.className += ('ontouchstart' in window) ? ' touch' : ' no-touch'</script>
  </head>
  <body>

    <div id="react-root"></div>
    <textarea id="clientConfig" hidden>{"debug":false,"apiRoot":"","paySDK":"https://pay.zhihu.com/api/js","name":"production","instance":"column","tokens":{"X-XSRF-TOKEN":null,"X-UDID":null,"Authorization":"oauth c3cef7c66a1843f8b3a9e6a1e3160e20"}}</textarea>
    <textarea id="preloadedState" hidden>{"database":{"Post":{"26010547":{"title":"【构建操作系统】多进程机制","author":"bajdcc","content":"<h2>写在前面</h2><p>项目地址：<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/MiniOS\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/MiniOS<i class=\"icon-external\"></i></a></p><p>Release：<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/MiniOS/releases/tag/0.2.5\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/MiniOS<i class=\"icon-external\"></i></a></p><p>效果如题图。</p><h2>简要介绍</h2><p><b>制作一个最小化内核，实现中断处理、异常处理、虚页管理、系统调用、进程切换！</b></p><p>前后花了两个星期，每天不断想其中的bug要怎么解决，一点点添加代码，没有全部复制，目前有足够把握手写内核代码。</p><p>bug的出现非常神奇，最多的是页面错误和段错误，原因就是访问了不允许的内存，或是给段寄存器设了没在GDT中的值。</p><p>大部分问题来源于esp，即当前的堆栈，由于用汇编写，偏移写多少只能瞎掰，还好qemu有源码级调试工具，大爱！</p><p>最后一个魔幻bug的原因我想是系统调用的频率太高，比时间片切换还快了，加了个延时就神奇地解决了，晕。。</p><p>既然程序目前运行没有问题，说明代码还是够健壮的！接下来几篇文章我会介绍多进程的具体实现。</p><h2>项目结构</h2><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>.\n├── boot\n│   ├── bootsect.asm\n│   ├── floppy.asm\n│   └── gdt.asm\n├── include\n│   ├── asm.h\n│   ├── debug.h\n│   ├── fault.h\n│   ├── gdt.h\n│   ├── idt.h\n│   ├── irq.h\n│   ├── isr.h\n│   ├── pmm.h\n│   ├── print.h\n│   ├── proc.h\n│   ├── string.h\n│   ├── syscall.h\n│   ├── sysproc.h\n│   ├── type.h\n│   ├── uvm.h\n│   ├── vga.h\n│   └── vmm.h\n├── Makefile\n├── README.md\n├── script\n│   ├── gdbinit\n│   ├── link.ld\n│   └── ulink.ld\n├── src\n│   └── kernel\n│       ├── asm.c\n│       ├── debug.c\n│       ├── fault.c\n│       ├── gdt.c\n│       ├── idt.c\n│       ├── init.asm\n│       ├── irq.c\n│       ├── isr.c\n│       ├── loader.asm\n│       ├── main.c\n│       ├── pmm.c\n│       ├── print.c\n│       ├── proc.c\n│       ├── string.c\n│       ├── syscall.c\n│       ├── sysproc.c\n│       ├── uvm.c\n│       ├── vga.c\n│       └── vmm.c\n└── usr\n    └── logo.txt\n</code></pre></div><h2>运行代码</h2><div class=\"highlight\"><pre><code class=\"language-nasm\"><span></span><span class=\"nl\">.fork:</span>\n    <span class=\"nf\">mov</span> <span class=\"nb\">eax</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"c1\">; fork</span>\n    <span class=\"nf\">int</span> <span class=\"mh\">0x80</span> <span class=\"c1\">; syscall</span>\n    <span class=\"nf\">cmp</span> <span class=\"nb\">eax</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n    <span class=\"nf\">jz</span> <span class=\"nb\">ch</span><span class=\"nv\">ild</span>\n    <span class=\"nf\">call</span> <span class=\"nv\">delay</span>\n    <span class=\"nf\">mov</span> <span class=\"nb\">eax</span><span class=\"p\">,</span> <span class=\"mi\">5</span> <span class=\"c1\">; wait</span>\n    <span class=\"nf\">int</span> <span class=\"mh\">0x80</span> <span class=\"c1\">; syscall</span>\n    <span class=\"nf\">call</span> <span class=\"nv\">delay</span>\n    <span class=\"nf\">loop</span> <span class=\"nv\">.fork</span>\n\n<span class=\"nl\">child:</span>\n    <span class=\"nf\">mov</span> <span class=\"nb\">eax</span><span class=\"p\">,</span> <span class=\"mi\">3</span> <span class=\"c1\">; exec</span>\n    <span class=\"nf\">int</span> <span class=\"mh\">0x80</span> <span class=\"c1\">; syscall</span>\n    <span class=\"nf\">mov</span> <span class=\"nb\">eax</span><span class=\"p\">,</span> <span class=\"mi\">2</span> <span class=\"c1\">; exit</span>\n    <span class=\"nf\">int</span> <span class=\"mh\">0x80</span> <span class=\"c1\">; syscall</span>\n    <span class=\"nf\">jmp</span> <span class=\"kc\">$</span>\n\n<span class=\"nl\">delay:</span>\n    <span class=\"nf\">push</span> <span class=\"nb\">ecx</span>\n    <span class=\"nf\">mov</span> <span class=\"nb\">ecx</span><span class=\"p\">,</span> <span class=\"mh\">0x100000</span>\n    <span class=\"nf\">loop</span> <span class=\"kc\">$</span>\n    <span class=\"nf\">pop</span> <span class=\"nb\">ecx</span>\n    <span class=\"nf\">ret</span>\n</code></pre></div><h2>参考</h2><ol><li><a href=\"http://link.zhihu.com/?target=https%3A//github.com/SilverRainZ/OS67\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SilverRainZ/OS67<i class=\"icon-external\"></i></a><br></li><li><a href=\"http://link.zhihu.com/?target=http%3A//wiki.osdev.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Expanded Main Page<i class=\"icon-external\"></i></a><br></li><li><b>* 《Orange'S：一个操作系统的实现 - 于渊》</b>（这是本好书！进程切换代码是参考书里的）<br></li><li>网络上的资料</li></ol>","updated":"2017-03-26T16:37:15.000Z","canComment":false,"commentPermission":"anyone","commentCount":11,"collapsedCount":0,"likeCount":13,"state":"published","isLiked":false,"slug":"26010547","isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic4.zhimg.com/v2-0c048b7c7d57d5b273556725ef082eeb_r.png","links":{"comments":"/api/posts/26010547/comments"},"reviewers":[],"topics":[{"url":"https://www.zhihu.com/topic/19627055","id":"19627055","name":"操作系统内核"},{"url":"https://www.zhihu.com/topic/19561633","id":"19561633","name":"C（编程语言）"},{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"}],"titleImageSize":{"width":1362,"height":667},"href":"/api/posts/26010547","excerptTitle":"","column":{"slug":"learncpp","name":"从零开始构建标准库"},"tipjarState":"inactivated","sourceUrl":"","pageCommentsCount":11,"snapshotUrl":"","publishedTime":"2017-03-27T00:37:15+08:00","url":"/p/26010547","lastestLikers":[{"profileUrl":"https://www.zhihu.com/people/ToiletCommander","bio":"学生/只会编程的死垃圾一只/渗透菜鸟/云端架设","hash":"e44c1adf46a8aaba6bff214102fc5934","uid":755124415611539500,"isOrg":false,"description":"嗯,一位知乎小透明.来知乎不是为了回答问题的,是来学习的.\n一个开拓自己的眼界,另一方面看一下中国大多数人对社会的看法","isOrgWhiteList":false,"slug":"ToiletCommander","avatar":{"id":"v2-03c10c09b8aa43c201a098ac06734c30","template":"https://pic1.zhimg.com/{id}_{size}.jpg"},"name":"马桶将军"},{"profileUrl":"https://www.zhihu.com/people/hou-ge-ke-yi","bio":"学生","hash":"d16076bbfefb0b6b14cdc5fd8c66598c","uid":748858591787622400,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"hou-ge-ke-yi","avatar":{"id":"da8e974dc","template":"https://pic1.zhimg.com/{id}_{size}.jpg"},"name":"猴哥可以"},{"profileUrl":"https://www.zhihu.com/people/adxnz","bio":"热爱电子科技","hash":"a44c38a60a4a9ba1fca50b338a3889cc","uid":668907982407077900,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"adxnz","avatar":{"id":"8839f2c4f553705a8d4fa0014926e384","template":"https://pic1.zhimg.com/{id}_{size}.jpg"},"name":"adxnz"},{"profileUrl":"https://www.zhihu.com/people/wang-zhao-wei-43-56","bio":"低端代码狗","hash":"aa7e7df5f60d7155cc234b25d4cfb34f","uid":731412364989038600,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"wang-zhao-wei-43-56","avatar":{"id":"v2-3f5015141074f56f48a073434605577e","template":"https://pic3.zhimg.com/{id}_{size}.jpg"},"name":"王兆伟"},{"profileUrl":"https://www.zhihu.com/people/jiang-hao-38-63","bio":"快邀请我回答问题。","hash":"750237d530cd00810dc3b4234a6103ae","uid":30354299682816,"isOrg":false,"description":"不敢在午夜问路，怕走到了百花深处……","isOrgWhiteList":false,"slug":"jiang-hao-38-63","avatar":{"id":"dd9e0a72abec55041b12f77bcbbc4f33","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"从今以后我"}],"summary":"写在前面项目地址：<a href=\"https://github.com/bajdcc/MiniOS\" data-editable=\"true\" data-title=\"bajdcc/MiniOS\">bajdcc/MiniOS</a>Release：<a href=\"https://github.com/bajdcc/MiniOS/releases/tag/0.2.5\" data-editable=\"true\" data-title=\"bajdcc/MiniOS\" class=\"\">bajdcc/MiniOS</a>效果如题图。简要介绍<b>制作一个最小化内核，实现中断处理、异常处理、虚页管理、系统调用、进程切换！</b>前后花了两个星期，每天不断想其中的bug要怎么解决，一点点添加代码，没有全部复制，目前有足够把…","reviewingCommentsCount":0,"meta":{"previous":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic2.zhimg.com/v2-9d40f235fbbe291b86dbd526dc213361_r.png","links":{"comments":"/api/posts/25888881/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19925162","id":"19925162","name":"Leetcode"},{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"},{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"}],"href":"/api/posts/25888881","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<h2>题目</h2><p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.</p><p>Example:</p><blockquote>Input: \"babad\"<br>Output: \"bab\"<br>Note: \"aba\" is also a valid answer.</blockquote><p>Example:</p><blockquote>Input: \"cbbd\"<br>Output: \"bb\"</blockquote><h2>目前的解法</h2><p>如<a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000003914228\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">最长回文子串--Manacher 算法<i class=\"icon-external\"></i></a>及<a href=\"https://link.zhihu.com/?target=http%3A//www.cnblogs.com/leoin2012/p/3984997.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[转]最长回文子串--4种解法 - 立航 - 博客园<i class=\"icon-external\"></i></a>中所说，有：<br></p><ol><li>BF 暴力破解法<br></li><li>DP 动态规划法</li><li>中心拓展法</li><li>Manacher法</li></ol><p>那么Manacher法应该是复杂度最低的，为O(N)。<br></p><p>然而，，我就是要另寻出（si）路，有没有其他的办法呢？</p><h2>大开脑洞</h2><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/githubwoniu/learnprogram/blob/master/leetcode/05/note_bajdcc.md\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">githubwoniu/learnprogram<i class=\"icon-external\"></i></a><br></p><p><a href=\"https://www.zhihu.com/question/40965749/answer/152514917\" class=\"internal\">最简便的找字符串中最长回文子串的方法是什么？ - 知乎</a><br></p><p><b>下面是优化思路：</b></p><p>首先，一个回文串的字符频度应该是：中点频度最低为1，其他字符频度最低为2。</p><p>那么，<b>如果串中有频度是1的字符，它肯定位于回文串的中心，不然就不属于任何回文串。</b></p><p>因此，按频度可以筛选掉一定量的多余字符，将母串进行<b>分割</b>。分割的好处是<b>子串有界</b>。</p><p>最懒方法：遍历整串，从中心向两侧扩张（中心扩散法）并做比较，取得长度，最后返回最大长度所在的串。</p><p>优化：</p><ul><li>在遍历整串过程中，最大长度maxlen会<b>时刻增加</b>，那么，当分割后的<b>有界子串</b>长度小于最大长度maxlen时，就不需要再去判断了。</li><li>如果串的某个连续子串(len&amp;gt;=2)它们的频度都是1，那么它们就<b>不属于任何回文串</b>，可以快速剔除，节省时间。这是关键。</li><li>其他方法还没想到，欢迎补充。</li></ul><p>所以大体的思路是：</p><ol><li>统计字符频度，用数组表示频数</li><li>找出频度为1的字符a，看以a为单核中心向外扩散，求最长回文；如果没有回文，就将它从串中断开，进行分治；如果回文长度超过记录，就保存它</li><li>然后从左到右查回文，只有长度超过记录，才保存</li><li>第一次串分割完毕后，进行分治，重新统计频度，回到1步骤</li></ol><h2>新方法评价</h2><p>目测新方法的复杂度是高于O(N)的，不过，将分治法运用于本题也算是另辟蹊径了。奇葩方法就是将几种方法揉合在一起，那么本方法结合了：</p><ol><li>递归分治，将频度为1的字符作为<b>可能的分割点</b></li><li>中心扩散，目前最优值N，那么从当前点(P)的P-N和P+N进行比较，先N递减，然后递增<br></li><li>缓存最优解，当前解N，那么小于N的情况就忽略了</li></ol><p>无论如何，本方法就是不修改原始字符串哈哈~</p><h2>上代码</h2><p>用时6ms <a href=\"https://link.zhihu.com/?target=https%3A//leetcode.com/submissions/detail/97501094/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">leetcode.com/submission</span><span class=\"invisible\">s/detail/97501094/</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"mi\">256</span><span class=\"p\">];</span>\n\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"n\">string</span> <span class=\"n\">longestPalindrome</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">str</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">longestPalindrome</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">(),</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"o\">&amp;gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"c1\">//这里改了下</span>\n            <span class=\"k\">return</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">start</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">longestPalindromePartition</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;amp;</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;amp;</span><span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">maxLen</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">maxLen</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">maxStart</span><span class=\"p\">,</span> <span class=\"n\">maxEnd</span><span class=\"p\">,</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">maxLen</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">reserve</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">maxLen</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">reserveEnd</span> <span class=\"o\">=</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">reserve</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"n\">reserve</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">reserveEnd</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">k</span> <span class=\"o\">&amp;gt;=</span> <span class=\"n\">start</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">k</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">k</span><span class=\"p\">])</span>\n                        <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"n\">k</span><span class=\"o\">--</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n                    <span class=\"n\">reserve</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">len</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n                    <span class=\"n\">reserveEnd</span> <span class=\"o\">=</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">reserve</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                    <span class=\"n\">maxStart</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">k</span><span class=\"p\">;</span>\n                    <span class=\"n\">maxEnd</span> <span class=\"o\">=</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">k</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">reserve</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&amp;gt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">])</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">reserve</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">j</span> <span class=\"o\">&amp;gt;=</span> <span class=\"n\">start</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">])</span>\n                        <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"n\">reserve</span> <span class=\"o\">=</span> <span class=\"o\">--</span><span class=\"n\">j</span><span class=\"p\">;</span>\n                <span class=\"n\">reserveEnd</span> <span class=\"o\">=</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">reserve</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">j</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                    <span class=\"n\">maxStart</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">j</span><span class=\"p\">;</span>\n                    <span class=\"n\">maxEnd</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">maxLen</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">maxStart</span><span class=\"p\">;</span>\n            <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">maxEnd</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span> <span class=\"n\">len</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">longestPalindrome</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;amp;</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;amp;</span><span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"o\">==</span> <span class=\"n\">end</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;=</span> <span class=\"mi\">26</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"sc\">'a'</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">auto</span> <span class=\"n\">dups</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"p\">[</span><span class=\"n\">len</span><span class=\"p\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">dupCount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">dups</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">&amp;gt;</span> <span class=\"mi\">1</span> <span class=\"o\">?</span> <span class=\"p\">(</span><span class=\"n\">dupCount</span><span class=\"o\">++</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dups</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">len</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">len</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">tmpStart</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">tmpEnd</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">maxStart</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">maxEnd</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">tmpLen</span><span class=\"p\">,</span> <span class=\"n\">maxLen</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dups</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                <span class=\"n\">tmpStart</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n                <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">dups</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                        <span class=\"n\">tmpEnd</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                        <span class=\"k\">break</span><span class=\"p\">;</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">--</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">tmpEnd</span> <span class=\"o\">=</span> <span class=\"n\">end</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">tmpLen</span> <span class=\"o\">=</span> <span class=\"n\">longestPalindromePartition</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"n\">tmpStart</span><span class=\"p\">,</span> <span class=\"n\">tmpEnd</span><span class=\"p\">,</span> <span class=\"n\">maxLen</span><span class=\"p\">))</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">maxLen</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">maxLen</span> <span class=\"o\">=</span> <span class=\"n\">tmpLen</span><span class=\"p\">;</span>\n                    <span class=\"n\">maxStart</span> <span class=\"o\">=</span> <span class=\"n\">tmpStart</span><span class=\"p\">;</span>\n                    <span class=\"n\">maxEnd</span> <span class=\"o\">=</span> <span class=\"n\">tmpEnd</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">tmpStart</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n                <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dups</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                        <span class=\"n\">tmpEnd</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                        <span class=\"k\">break</span><span class=\"p\">;</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">--</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">tmpEnd</span> <span class=\"o\">=</span> <span class=\"n\">end</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tmpStart</span> <span class=\"o\">==</span> <span class=\"n\">tmpEnd</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">tmpStart</span> <span class=\"o\">&amp;gt;=</span> <span class=\"n\">start</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">tmpEnd</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"o\">--</span><span class=\"n\">tmpStart</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"o\">++</span><span class=\"n\">tmpEnd</span><span class=\"p\">]);</span>\n                    <span class=\"n\">tmpLen</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">tmpEnd</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"o\">++</span><span class=\"n\">tmpStart</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tmpLen</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">maxLen</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"n\">maxLen</span> <span class=\"o\">=</span> <span class=\"n\">tmpLen</span><span class=\"p\">;</span>\n                        <span class=\"n\">maxStart</span> <span class=\"o\">=</span> <span class=\"n\">tmpStart</span><span class=\"p\">;</span>\n                        <span class=\"n\">maxEnd</span> <span class=\"o\">=</span> <span class=\"n\">tmpEnd</span><span class=\"p\">;</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">maxStart</span><span class=\"p\">;</span>\n        <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">maxEnd</span><span class=\"p\">;</span>\n        <span class=\"k\">delete</span><span class=\"p\">[]</span><span class=\"n\">dups</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">maxLen</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div><h2>阶段性总结</h2><p>奇葩方法花了两天时间去实现，不追求啥，就是好玩。。不去照着实现现有的算法，也是一种乐趣啊，为什么一直要走别人的路呢？当自己设计算法、设计架构、设计界面的时候，才真正是一种创作/创造的过程，才是真正的乐趣所在呢。不过，在这之前，你得首先入门吧~记得好声音中的一句话，一开始你被音乐玩，后来你才能玩音乐，编程何尝不是如此呢？</p><p><b>人生三大境界：</b></p><ol><li><b><u>搬砖的境界。</u></b>机械地、条件反射地、枯燥地、重复地劳动，做一件事，为的是把一件小事做熟练、做通透。虽然境界很low，但是有10000小时理论啊，这是不可避免的过程。但是，熟能生巧，在这一境界做出成就后，才能跃升至下一境界。[多维空间某一点]<br></li><li><b><u>统筹的境界。</u></b>能够把许多件小事安排好，规划好优先级，就像知道造一座房子所需的一系列步骤，把它按部就班去完成。懂得取舍，抓住要点，目光不再短浅。许多知识融会贯通，信手拈来。[局部最优点]</li><li><b><u>设计的境界。</u></b>同时也是创造的境界。不再拘泥于一扇窗户、一个房间、一幢房子，全心全意处理的是整体的细节，树立大局观，自顶向下处理一件件事。知晓事物的本质，丰富的联想/举一反三能力，可以找到两件不同事之间的相同点，想出独特的方法。[全局最优点]</li></ol>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":25888881,"publishedTime":"2017-03-20T20:49:53+08:00","url":"/p/25888881","title":"【LeetCode】005-最长回文子串","summary":"题目Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.Example:Input: \"babad\" Output: \"bab\" Note: \"aba\" is also a valid answer.Example:Input: \"cbbd\" Output: \"bb\"目前的解法如<a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000003914228\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">…<i class=\"icon-external\"></i></a>","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0},"next":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic4.zhimg.com/v2-3b32471e938dae81bfd4d93bf9add3d7_r.png","links":{"comments":"/api/posts/26054925/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19552686","id":"19552686","name":"操作系统"},{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"},{"url":"https://www.zhihu.com/topic/19561633","id":"19561633","name":"C（编程语言）"}],"href":"/api/posts/26054925","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<p>在本系统中发现了两个BUG：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/bajdcc/MiniOS/issues/3\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">两个BUG · Issue #3 · bajdcc/MiniOS<i class=\"icon-external\"></i></a>，限于自己水平比较渣，没法解决这两个BUG，那么OS系列就告一段落了，纵观整个过程，还是对IPC机制的理解帮助比较大，这种思想可以运用于实践中，如管道、套接字、流的实现。</p><p>---------------------------------------------------------------------------</p><p>有童鞋问如何从零开始学习代码，我写了点总结：</p><blockquote><p>首先要了解操作系统的知识，从零开始指的是代码从零开始，所以相关知识的基础也是不可或缺的。要了解系统的启动过程，<a href=\"https://zhuanlan.zhihu.com/p/25913125\" class=\"internal\">Zyw_OS启动流程跟实现~未完待续 - 知乎专栏</a> 。从启动过程来分析代码，首先是BIOS。</p><p>(1)然后是<b>boot文件夹下的三个asm文件</b>，它们完成<u>读软盘、设置GDT、加载内核数据至0x100000，并跳转到0x100000处执行内核代码</u>；</p><p>(2)随后<b>根据main.c中初始化的顺序学习</b>：(I)vga显示输出、(II)gdt分段管理、(III)idt中断向量设置、(IV)isr中断处理程序、(V)pmm获取可用内存并按4KB记录并保存至栈中，完成物理页框的申请与释放、(VI)vmm分页管理、(VII)sys初始化系统调用函数、(VIII)proc多进程管理，进程切换。</p><p>(3)<b>从零开始添加功能</b>，如先写好boot.asm，能够开机并用中断打印一个A，没问题之后，再设置gdt,vga以及中断管理，这时运行一个int 3看看有没有打印结果出来；这样每次写的代码都能够独立运行。如果是把所有代码下载下来运行的话，效果很不错，但是会不知道从读起。现在要做的就是精简代码，只保留核心功能，摒弃一切杂念。</p><p>(4)那么<b>写代码过程中有几个情况要处理</b>：(I)<u>不明所以</u>，这时可以看注释或是上网查资料(II)这里<u>代码是不是有问题</u>？先放着不管(III)<u>运行出错了</u>，那就debug吧。其中debug的时间比较久，我做到IPC这一部分起码编程时间100小时以上，不包括日常吃饭时想的时间，所以不要慌，操作系统代码需要细嚼慢咽，急也急不得。debug可能用时比较久，这时比较纠结、想放弃、头脑混乱，因为好多bug真不知道哪冒出来的，用qemu源码级调试好处也有限。其实这一关过不了，对操作系统的理解水平也就触到天花板了，也就是只是理解了书上的思想，而没有将代码和思想结合起来。写代码、山寨别人的代码、东拼西凑，不管用什么方式，只要把bug除了就皆大欢喜。</p><p>(5)这样做有好处：<u>代码、思路，所有的细节全部load到了脑子里，要啥有啥，也就是真正理解了内核，可以举一反三，并自己更改代码，添加功能</u>。</p><p>(6)<b>要有毅力、有恒心，能吃苦</b>，成功不是一蹴而就，别看我写的代码运行效果挺好，我起码debug了100h以上，每天打底调试6小时，最后才能bug弄好。真正自己花时间花工夫写的代码，才会长久的留自己的脑海里。</p></blockquote><p>--------------------------------------------------------------------</p><h2>写在前面</h2><p>Release：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/bajdcc/MiniOS/releases/tag/0.2.6\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/MiniOS<i class=\"icon-external\"></i></a><br></p><p>总结下当前的进度：</p><ol><li>引导、GDT、中断、虚页：花了两三天</li><li>多进程：花了一周</li><li>进程间通信：花了两三天</li></ol><p>90%的时间花在了debug上，除完所有bug，已经对整个实现机制了如指掌。所以，debug的过程也是一个学习的过程，虽然效率不高，但是效果好（就是单词抄写百遍的效果啦）。</p><p>90%操作系统的内容 = 枯燥乏味，而10%（余下的内容） = 精妙绝伦</p><p>目前感受设计精妙的地方：</p><ol><li><b>进程切换机制</b>（时钟分派），进程的父子关系，进程的状态。代表：fork,wait,sleep,exit,kill，如wait和exit的搭配为例，进程的销毁是惰性的（销毁操作集中于父进程中的wait）。</li><li><b>进程间通信机制</b>。通信分异步和同步，那么这里实现的是同步IPC，比较简单，用不着写队列。这是微内核的基础，它将某些同类别的系统调用转化为唯一一个系统调用0x80。如何区分不同功能的调用呢？就是在调用int 0x80前将参数入栈，参数有<b>通信方式</b>（SEND/RECEIVE），<b>通信对象</b>（正数表示pid，-1表示任意对象），<b>消息结构</b>。</li></ol><p>这些精妙的地方只能通过代码去体会。</p><h2>用户代码</h2><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">halt</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">delay</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">volatile</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;</span> <span class=\"mh\">0x1000000</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">user_main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">SYS_FORK</span><span class=\"p\">);</span>\n\n    <span class=\"n\">delay</span><span class=\"p\">();</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">sys_tasks0</span><span class=\"p\">();</span>\n        <span class=\"n\">delay</span><span class=\"p\">();</span>\n        <span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">SYS_WAIT</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">delay</span><span class=\"p\">();</span>\n            <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">sys_ticks</span><span class=\"p\">();</span>\n            <span class=\"n\">delay</span><span class=\"p\">();</span>\n            <span class=\"n\">printk</span><span class=\"p\">(</span><span class=\"s\">\"!! proc#%d received tick '%d'</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">proc2pid</span><span class=\"p\">(</span><span class=\"n\">proc</span><span class=\"p\">),</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n            <span class=\"n\">delay</span><span class=\"p\">();</span>\n            <span class=\"n\">delay</span><span class=\"p\">();</span>\n            <span class=\"n\">delay</span><span class=\"p\">();</span>\n            <span class=\"n\">delay</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">printk</span><span class=\"p\">(</span><span class=\"s\">\"halt...</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n\n    <span class=\"n\">halt</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">sys_tasks0</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">extern</span> <span class=\"kt\">uint32_t</span> <span class=\"n\">tick</span><span class=\"p\">;</span>\n\n    <span class=\"n\">MESSAGE</span> <span class=\"n\">msg</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">send_recv</span><span class=\"p\">(</span><span class=\"n\">RECEIVE</span><span class=\"p\">,</span> <span class=\"n\">TASK_ANY</span><span class=\"p\">,</span> <span class=\"o\">&amp;amp;</span><span class=\"n\">msg</span><span class=\"p\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">source</span><span class=\"p\">;</span>\n        <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"nl\">SYS_TICKS</span><span class=\"p\">:</span>\n            <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">RETVAL</span> <span class=\"o\">=</span> <span class=\"n\">tick</span><span class=\"p\">;</span>\n            <span class=\"n\">printk</span><span class=\"p\">(</span><span class=\"s\">\"!! proc #%d sent tick '%d'</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">proc2pid</span><span class=\"p\">(</span><span class=\"n\">proc</span><span class=\"p\">),</span> <span class=\"n\">tick</span><span class=\"p\">);</span>\n            <span class=\"n\">send_recv</span><span class=\"p\">(</span><span class=\"n\">SEND</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"o\">&amp;amp;</span><span class=\"n\">msg</span><span class=\"p\">);</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">default</span><span class=\"o\">:</span>\n            <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"unknown msg type\"</span><span class=\"p\">);</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">sys_ipc_call</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">MESSAGE</span> <span class=\"n\">msg</span><span class=\"p\">;</span>\n    <span class=\"n\">reset_msg</span><span class=\"p\">(</span><span class=\"o\">&amp;amp;</span><span class=\"n\">msg</span><span class=\"p\">);</span>\n    <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">type</span><span class=\"p\">;</span>\n    <span class=\"n\">send_recv</span><span class=\"p\">(</span><span class=\"n\">BOTH</span><span class=\"p\">,</span> <span class=\"n\">TASK_SYS</span><span class=\"p\">,</span> <span class=\"o\">&amp;amp;</span><span class=\"n\">msg</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">RETVAL</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">sys_ticks</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">sys_ipc_call</span><span class=\"p\">(</span><span class=\"n\">SYS_TICKS</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><br><h2>进程的结构</h2><p>说到IPC，可能会想到pipe、clipboard、windows message、socket、shared memory、file等方式，然而没法实现那么多（括弧笑，所以跟着书上走吧~</p><p>目前只是抄了书上的代码（希望尽快看到结果），还没时间去分析IPC机制的代码。</p><p>首先，我们创建的<b>进程proc的结构</b>有：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"k\">struct</span> <span class=\"n\">proc</span> <span class=\"p\">{</span>\n    <span class=\"cm\">/* KERNEL */</span>\n    <span class=\"k\">struct</span> <span class=\"n\">interrupt_frame</span> <span class=\"o\">*</span><span class=\"n\">fi</span><span class=\"p\">;</span>     <span class=\"c1\">// 中断现场</span>\n    <span class=\"k\">volatile</span> <span class=\"kt\">uint8_t</span> <span class=\"n\">pid</span><span class=\"p\">;</span>           <span class=\"c1\">// 进程ID</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">size</span><span class=\"p\">;</span>                  <span class=\"c1\">// 用户空间大小</span>\n    <span class=\"kt\">uint8_t</span> <span class=\"n\">state</span><span class=\"p\">;</span>                  <span class=\"c1\">// 进程状态</span>\n    <span class=\"kt\">char</span> <span class=\"n\">name</span><span class=\"p\">[</span><span class=\"n\">PN_MAX_LEN</span><span class=\"p\">];</span>          <span class=\"c1\">// 进程名称</span>\n    <span class=\"n\">pde_t</span> <span class=\"o\">*</span><span class=\"n\">pgdir</span><span class=\"p\">;</span>                   <span class=\"c1\">// 虚页目录（一级页表）</span>\n    <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">stack</span><span class=\"p\">;</span>                    <span class=\"c1\">// 进程内核堆栈</span>\n    <span class=\"k\">struct</span> <span class=\"n\">proc</span> <span class=\"o\">*</span><span class=\"n\">parent</span><span class=\"p\">;</span>            <span class=\"c1\">// 父进程</span>\n    <span class=\"kt\">int8_t</span> <span class=\"n\">ticks</span><span class=\"p\">;</span>                   <span class=\"c1\">// 时间片</span>\n    <span class=\"kt\">int8_t</span> <span class=\"n\">priority</span><span class=\"p\">;</span>                <span class=\"c1\">// 优先级</span>\n    <span class=\"cm\">/* IPC */</span>\n    <span class=\"kt\">int</span> <span class=\"n\">p_flags</span><span class=\"p\">;</span>                    <span class=\"c1\">// 标识</span>\n    <span class=\"n\">MESSAGE</span> <span class=\"o\">*</span><span class=\"n\">p_msg</span><span class=\"p\">;</span>                 <span class=\"c1\">// 消息</span>\n    <span class=\"kt\">int</span> <span class=\"n\">p_recvfrom</span><span class=\"p\">;</span>                 <span class=\"c1\">// 接收消息的进程ID</span>\n    <span class=\"kt\">int</span> <span class=\"n\">p_sendto</span><span class=\"p\">;</span>                   <span class=\"c1\">// 发送消息的进程ID</span>\n    <span class=\"kt\">int</span> <span class=\"n\">has_int_msg</span><span class=\"p\">;</span>                <span class=\"c1\">// nonzero if an INTERRUPT occurred when the task is not ready to deal with it.</span>\n    <span class=\"k\">struct</span> <span class=\"n\">proc</span> <span class=\"o\">*</span><span class=\"n\">q_sending</span><span class=\"p\">;</span>         <span class=\"c1\">// queue of procs sending messages to this proc</span>\n    <span class=\"k\">struct</span> <span class=\"n\">proc</span> <span class=\"o\">*</span><span class=\"n\">next_sending</span><span class=\"p\">;</span>      <span class=\"c1\">// next proc in the sending queue (q_sending)</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>结构很复杂吧？不过，如果是一步步实现功能，往里添加的话，其实也不算多。</p><p><b>PCB结构：</b></p><ol><li>进程相关信息：名称，ID，状态，父进程</li><li>调度信息：中断现场，时间片，优先级</li><li>内存信息：代码空间大小，页表，内核堆栈</li><li>IPC：消息收发状态flags，消息msg，收发进程ID，消息队列（链表）</li></ol><br><p><b>进程的切换：</b></p><ol><li>主进程死循环，通过时钟中断，进行调度<br></li><li>中断时保存现场（即proc-&amp;gt;fi），如果是最外层中断，那么起调度作用（此时k_reenter=0），内层中断k_reenter&amp;gt;0，中断结束后iret返回，从proc-&amp;gt;fi中恢复现场，此时修改相应特权级</li></ol><h2>微内核架构</h2><p>原版的linux中有一堆的系统调用，那么微内核架构与此不同，它将系统调用按功能划分开来，如分成内存管理、文件管理等，建立专门的系统级进程来负责系统调用。</p><p>那么，也就是 “ring1级系统服务进程” 与 系统 打交道（通过系统调用），而我们的“ring3级用户进程” 只要与 “ring1级系统服务进程” 通信就可以了。结论：ring3用户级 &amp;lt;=&amp;gt; ring1服务级 &amp;lt;=&amp;gt; ring0系统级，ring1就像中介一样，而ring0与ring3可以素不相识。这样，微内核架构（相当于微服务）抽象出一个服务层sys_task，降低了耦合度。<br></p><br><ul><li>ring1与ring0打交道：通过系统调用即可<br></li><li>ring1与ring3打交道：维护一个消息等待队列</li></ul><br><h2>进程间通信</h2><p>主要分两个函数msg_send和msg_receive。</p><p>收/发消息有几种情况：</p><ol><li><b>系统服务监听消息</b>：没消息时休眠，来消息时唤醒</li><li><b>系统服务发送消息</b>：仅当系统服务收到用户的SEND消息后，被唤醒，随后用户再发送RECV消息，系统服务收到后设置msg</li><li><b>用户进程发送消息</b>：系统服务不可用，用户进程堵塞，直到系统服务处理完其他任务，从等待队列中取出用户进程，并唤醒用户进程</li><li><b>用户进程接收消息</b>：当用户进程发送SEND消息收到回应后，会再发送一个RECV消息，等待系统服务响应并设置msg，最后用户进程拿到设置后的msg</li></ol><p>这里的操作挺像TCP的握手操作的，归纳起来的<b>同步通信模型</b>：</p><ol><li>系统服务：监听消息（就像web服务器一样），单线程： while(1){recv(), send()}</li><li>用户进程：像web客户端一样，单线程：{send() recv()}</li></ol><h2>消息队列</h2><p>统一调用接口：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"kt\">int</span> <span class=\"nf\">send_recv</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">function</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">src_dest</span><span class=\"p\">,</span> <span class=\"n\">MESSAGE</span><span class=\"o\">*</span> <span class=\"n\">msg</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">caller</span><span class=\"p\">;</span>\n\n    <span class=\"n\">caller</span> <span class=\"o\">=</span> <span class=\"n\">proc2pid</span><span class=\"p\">(</span><span class=\"n\">proc</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">function</span> <span class=\"o\">==</span> <span class=\"n\">RECEIVE</span><span class=\"p\">)</span>\n        <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">MESSAGE</span><span class=\"p\">));</span>\n\n    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"nl\">BOTH</span><span class=\"p\">:</span> <span class=\"c1\">// 先发送再接收</span>\n        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">_sendrec</span><span class=\"p\">(</span><span class=\"n\">SEND</span><span class=\"p\">,</span> <span class=\"n\">src_dest</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">caller</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ret</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">_sendrec</span><span class=\"p\">(</span><span class=\"n\">RECEIVE</span><span class=\"p\">,</span> <span class=\"n\">src_dest</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">caller</span><span class=\"p\">);</span>\n        <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"nl\">SEND</span><span class=\"p\">:</span>\n    <span class=\"k\">case</span> <span class=\"nl\">RECEIVE</span><span class=\"p\">:</span>\n        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">_sendrec</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">,</span> <span class=\"n\">src_dest</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">caller</span><span class=\"p\">);</span>\n        <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">default</span><span class=\"o\">:</span>\n        <span class=\"n\">assert</span><span class=\"p\">((</span><span class=\"n\">function</span> <span class=\"o\">==</span> <span class=\"n\">BOTH</span><span class=\"p\">)</span> <span class=\"o\">||</span>\n               <span class=\"p\">(</span><span class=\"n\">function</span> <span class=\"o\">==</span> <span class=\"n\">SEND</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"n\">function</span> <span class=\"o\">==</span> <span class=\"n\">RECEIVE</span><span class=\"p\">));</span>\n        <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>对于系统服务service：</p><ol><li>send_recv(RECV, TASK_ANY, msg) 监听消息<br></li><li>处理msg</li><li>send_recv(RECV, msg.source, msg) 发送消息给客户端<br></li></ol><br><p>对于客户端程序client：</p><ol><li>初始化msg</li><li>send_recv(SEND, SYSTASK_ID, msg) 发送消息给系统服务<br></li><li>send_recv(RECV, SYSTASK_ID, msg) 堵塞并接收消息<br></li><li>处理msg</li></ol><p><b>一、发送消息</b></p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"kt\">int</span> <span class=\"nf\">msg_send</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">proc</span><span class=\"o\">*</span> <span class=\"n\">current</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">dest</span><span class=\"p\">,</span> <span class=\"n\">MESSAGE</span><span class=\"o\">*</span> <span class=\"n\">m</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">struct</span> <span class=\"n\">proc</span><span class=\"o\">*</span> <span class=\"n\">sender</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">proc</span><span class=\"o\">*</span> <span class=\"n\">p_dest</span> <span class=\"o\">=</span> <span class=\"n\">npid</span><span class=\"p\">(</span><span class=\"n\">dest</span><span class=\"p\">);</span> <span class=\"cm\">/* proc dest */</span>\n\n    <span class=\"cm\">/* check for deadlock here */</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">deadlock</span><span class=\"p\">(</span><span class=\"n\">proc2pid</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">),</span> <span class=\"n\">dest</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"n\">printk</span><span class=\"p\">(</span><span class=\"s\">\"DEADLOCK! %d --&amp;gt; %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">pid</span><span class=\"p\">,</span> <span class=\"n\">p_dest</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">pid</span><span class=\"p\">);</span>\n        <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"DEADLOCK\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">p_dest</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">p_flags</span> <span class=\"o\">&amp;amp;</span> <span class=\"n\">RECEIVING</span><span class=\"p\">)</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"cm\">/* dest is waiting for the msg */</span>\n        <span class=\"p\">(</span><span class=\"n\">p_dest</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">p_recvfrom</span> <span class=\"o\">==</span> <span class=\"n\">proc2pid</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">)</span> <span class=\"o\">||</span>\n         <span class=\"n\">p_dest</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">p_recvfrom</span> <span class=\"o\">==</span> <span class=\"n\">TASK_ANY</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n\n        <span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"n\">va2la</span><span class=\"p\">(</span><span class=\"n\">dest</span><span class=\"p\">,</span> <span class=\"n\">p_dest</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">p_msg</span><span class=\"p\">),</span>\n              <span class=\"n\">va2la</span><span class=\"p\">(</span><span class=\"n\">proc2pid</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">),</span> <span class=\"n\">m</span><span class=\"p\">),</span>\n              <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">MESSAGE</span><span class=\"p\">));</span>\n\n        <span class=\"n\">p_dest</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">p_msg</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">p_dest</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">p_flags</span> <span class=\"o\">&amp;amp;=</span> <span class=\"o\">~</span><span class=\"n\">RECEIVING</span><span class=\"p\">;</span> <span class=\"cm\">/* dest has received the msg */</span>\n        <span class=\"n\">p_dest</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">p_recvfrom</span> <span class=\"o\">=</span> <span class=\"n\">TASK_NONE</span><span class=\"p\">;</span>\n        <span class=\"n\">unblock</span><span class=\"p\">(</span><span class=\"n\">p_dest</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"cm\">/* dest is not waiting for the msg */</span>\n        <span class=\"n\">sender</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">p_flags</span> <span class=\"o\">|=</span> <span class=\"n\">SENDING</span><span class=\"p\">;</span>\n        <span class=\"n\">sender</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">p_sendto</span> <span class=\"o\">=</span> <span class=\"n\">dest</span><span class=\"p\">;</span>\n        <span class=\"n\">sender</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">p_msg</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n\n        <span class=\"cm\">/* append to the sending queue */</span>\n        <span class=\"k\">struct</span> <span class=\"n\">proc</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p_dest</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">q_sending</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p_dest</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">q_sending</span><span class=\"p\">;</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">next_sending</span><span class=\"p\">)</span>\n                <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">next_sending</span><span class=\"p\">;</span>\n            <span class=\"n\">p</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">next_sending</span> <span class=\"o\">=</span> <span class=\"n\">sender</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">p_dest</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">q_sending</span> <span class=\"o\">=</span> <span class=\"n\">sender</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">sender</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">next_sending</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n        <span class=\"n\">block</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>解释：</p><ol><li>判断是否死锁，即A-&amp;gt;send-&amp;gt;B，同时B-&amp;gt;send-&amp;gt;A</li><li>若对方正在监听消息，则将msg拷贝到对方的p_msg中，并消除对方的监听与堵塞状态</li><li>若对方不在监听消息（可能在处理其他事务），则将发送方PCB指针插入到对方的q_sending队列中，并将发送方堵塞以等待接收方的回应</li></ol><br><p><b>二、接收消息</b></p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"kt\">int</span> <span class=\"nf\">msg_receive</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">proc</span><span class=\"o\">*</span> <span class=\"n\">current</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">MESSAGE</span><span class=\"o\">*</span> <span class=\"n\">m</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">struct</span> <span class=\"n\">proc</span><span class=\"o\">*</span> <span class=\"n\">p_who_wanna_recv</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">proc</span><span class=\"o\">*</span> <span class=\"n\">p_from</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"cm\">/* from which the message will be fetched */</span>\n    <span class=\"k\">struct</span> <span class=\"n\">proc</span><span class=\"o\">*</span> <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">copyok</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">p_who_wanna_recv</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">has_int_msg</span><span class=\"p\">)</span> <span class=\"o\">&amp;amp;&amp;amp;</span>\n        <span class=\"p\">((</span><span class=\"n\">src</span> <span class=\"o\">==</span> <span class=\"n\">TASK_ANY</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"n\">src</span> <span class=\"o\">==</span> <span class=\"n\">INTERRUPT</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n        <span class=\"cm\">/* There is an interrupt needs p_who_wanna_recv's handling and</span>\n<span class=\"cm\">         * p_who_wanna_recv is ready to handle it.</span>\n<span class=\"cm\">         */</span>\n\n        <span class=\"n\">MESSAGE</span> <span class=\"n\">msg</span><span class=\"p\">;</span>\n        <span class=\"n\">reset_msg</span><span class=\"p\">(</span><span class=\"o\">&amp;amp;</span><span class=\"n\">msg</span><span class=\"p\">);</span>\n        <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">INTERRUPT</span><span class=\"p\">;</span>\n        <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">HARD_INT</span><span class=\"p\">;</span>\n        <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">);</span>\n        <span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"n\">va2la</span><span class=\"p\">(</span><span class=\"n\">proc2pid</span><span class=\"p\">(</span><span class=\"n\">p_who_wanna_recv</span><span class=\"p\">),</span> <span class=\"n\">m</span><span class=\"p\">),</span> <span class=\"o\">&amp;amp;</span><span class=\"n\">msg</span><span class=\"p\">,</span>\n              <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">MESSAGE</span><span class=\"p\">));</span>\n\n        <span class=\"n\">p_who_wanna_recv</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">has_int_msg</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n\n    <span class=\"cm\">/* Arrives here if no interrupt for p_who_wanna_recv. */</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">src</span> <span class=\"o\">==</span> <span class=\"n\">TASK_ANY</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"cm\">/* p_who_wanna_recv is ready to receive messages from</span>\n<span class=\"cm\">         * TASK_ANY proc, we'll check the sending queue and pick the</span>\n<span class=\"cm\">         * first proc in it.</span>\n<span class=\"cm\">         */</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p_who_wanna_recv</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">q_sending</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p_from</span> <span class=\"o\">=</span> <span class=\"n\">p_who_wanna_recv</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">q_sending</span><span class=\"p\">;</span>\n            <span class=\"n\">copyok</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"cm\">/* p_who_wanna_recv wants to receive a message from</span>\n<span class=\"cm\">         * a certain proc: src.</span>\n<span class=\"cm\">         */</span>\n        <span class=\"n\">p_from</span> <span class=\"o\">=</span> <span class=\"n\">npid</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">p_from</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">p_flags</span> <span class=\"o\">&amp;amp;</span> <span class=\"n\">SENDING</span><span class=\"p\">)</span> <span class=\"o\">&amp;amp;&amp;amp;</span>\n            <span class=\"p\">(</span><span class=\"n\">p_from</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">p_sendto</span> <span class=\"o\">==</span> <span class=\"n\">proc2pid</span><span class=\"p\">(</span><span class=\"n\">p_who_wanna_recv</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n            <span class=\"cm\">/* Perfect, src is sending a message to</span>\n<span class=\"cm\">             * p_who_wanna_recv.</span>\n<span class=\"cm\">             */</span>\n            <span class=\"n\">copyok</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n            <span class=\"k\">struct</span> <span class=\"n\">proc</span><span class=\"o\">*</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p_who_wanna_recv</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">q_sending</span><span class=\"p\">;</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">p_from</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">p_flags</span> <span class=\"o\">&amp;amp;</span> <span class=\"n\">SENDING</span><span class=\"p\">);</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">proc2pid</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">proc2pid</span><span class=\"p\">(</span><span class=\"n\">npid</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">)))</span> <span class=\"p\">{</span> <span class=\"cm\">/* if p is the one */</span>\n                    <span class=\"n\">p_from</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n                <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">next_sending</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">copyok</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"cm\">/* It's determined from which proc the message will</span>\n<span class=\"cm\">         * be copied. Note that this proc must have been</span>\n<span class=\"cm\">         * waiting for this moment in the queue, so we should</span>\n<span class=\"cm\">         * remove it from the queue.</span>\n<span class=\"cm\">         */</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p_from</span> <span class=\"o\">==</span> <span class=\"n\">p_who_wanna_recv</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">q_sending</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"cm\">/* the 1st one */</span>\n            <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">prev</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n            <span class=\"n\">p_who_wanna_recv</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">q_sending</span> <span class=\"o\">=</span> <span class=\"n\">p_from</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">next_sending</span><span class=\"p\">;</span>\n            <span class=\"n\">p_from</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">next_sending</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">prev</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">next_sending</span> <span class=\"o\">=</span> <span class=\"n\">p_from</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">next_sending</span><span class=\"p\">;</span>\n            <span class=\"n\">p_from</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">next_sending</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"cm\">/* copy the message */</span>\n        <span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"n\">va2la</span><span class=\"p\">(</span><span class=\"n\">proc2pid</span><span class=\"p\">(</span><span class=\"n\">p_who_wanna_recv</span><span class=\"p\">),</span> <span class=\"n\">m</span><span class=\"p\">),</span>\n              <span class=\"n\">va2la</span><span class=\"p\">(</span><span class=\"n\">proc2pid</span><span class=\"p\">(</span><span class=\"n\">p_from</span><span class=\"p\">),</span> <span class=\"n\">p_from</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">p_msg</span><span class=\"p\">),</span>\n              <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">MESSAGE</span><span class=\"p\">));</span>\n\n        <span class=\"n\">p_from</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">p_msg</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">p_from</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">p_sendto</span> <span class=\"o\">=</span> <span class=\"n\">TASK_NONE</span><span class=\"p\">;</span>\n        <span class=\"n\">p_from</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">p_flags</span> <span class=\"o\">&amp;amp;=</span> <span class=\"o\">~</span><span class=\"n\">SENDING</span><span class=\"p\">;</span>\n        <span class=\"n\">unblock</span><span class=\"p\">(</span><span class=\"n\">p_from</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"p\">{</span>  <span class=\"cm\">/* nobody's sending TASK_ANY msg */</span>\n        <span class=\"cm\">/* Set p_flags so that p_who_wanna_recv will not</span>\n<span class=\"cm\">         * be scheduled until it is unblocked.</span>\n<span class=\"cm\">         */</span>\n        <span class=\"n\">p_who_wanna_recv</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">p_flags</span> <span class=\"o\">|=</span> <span class=\"n\">RECEIVING</span><span class=\"p\">;</span>\n\n        <span class=\"n\">p_who_wanna_recv</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">p_msg</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">src</span> <span class=\"o\">==</span> <span class=\"n\">TASK_ANY</span><span class=\"p\">)</span>\n            <span class=\"n\">p_who_wanna_recv</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">p_recvfrom</span> <span class=\"o\">=</span> <span class=\"n\">TASK_ANY</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">p_who_wanna_recv</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">p_recvfrom</span> <span class=\"o\">=</span> <span class=\"n\">proc2pid</span><span class=\"p\">(</span><span class=\"n\">p_from</span><span class=\"p\">);</span>\n\n        <span class=\"n\">block</span><span class=\"p\">(</span><span class=\"n\">p_who_wanna_recv</span><span class=\"p\">);</span>\n\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>解释：</p><ol><li>若接收方发生中断，则处理中断，函数立即返回</li><li>若接收方可以接收一切消息TASK_ANY，那么此时判断q_sending发送队列中是否有消息，是的话，则从队列中取消息，清除发送方的SENDING状态；如果此时q_sending中没有消息，则接收方堵塞，置RECEIVING状态</li><li>若接收方只接收某一种消息，则当消息不匹配时，接收方堵塞；若消息匹配，进行第2步中的取消息操作</li></ol><br><p><b>死锁的简单判断：</b></p><p>由于q_sending队列表示等待队列，只要遍历它，看是否可以遍历到当前进程本身即可。</p><p><b>堵塞的简单实现：</b></p><p>堵塞意味着要暂停当前进程并切换到其他进程，然而本系统的实现有限，只能强行触发时钟中断进行进程切换，由此可能导致BUG。</p><br><h2>阶段性总结</h2>如果说debug是负反馈，那么proc和ipc的实现就是大大的正反馈，先前用java实现了解释器并构建操作系统（<a href=\"https://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/jMiniLang<i class=\"icon-external\"></i></a>），提供lambda、coroutine、multi-process等机制，但效率极低，求个一百内素数都要半天，还是没法完成做一个操作系统的愿望。本来用C/C++/ java/C# 也造了好多好多轮子，那么这次实现操作系统只用到了ASM和C，但是！！！难度非同小可！因为：资料贫乏、机制复杂、陷阱众多、难以调试、理解困难等等……但我没有放弃！！但看来IPC运行良好没有panic的时候，我的内心是非常喜悦的！这大概就是编程的美吧！<h2>参考</h2><ol><li><b>于渊：Orange'S：一个操作系统的实现</b></li></ol>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":26054925,"publishedTime":"2017-03-28T23:13:24+08:00","url":"/p/26054925","title":"【构建操作系统】进程间通信","summary":"在本系统中发现了两个BUG：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/bajdcc/MiniOS/issues/3\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">两个BUG · Issue #3 · bajdcc/MiniOS<i class=\"icon-external\"></i></a>，限于自己水平比较渣，没法解决这两个BUG，那么OS系列就告一段落了，纵观整个过程，还是对IPC机制的理解帮助比较大，这种思想可以运用于实践中，如管道、套接字、流的实现。---------------…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0}},"commentsCount":11,"likesCount":13,"FULLINFO":true}},"User":{"bajdcc":{"isFollowed":false,"name":"陈安","headline":"专业研究野生技术 https://github.com/bajdcc","avatarUrl":"https://pic4.zhimg.com/v2-cd6d61ad9ef94c41b9e77f8e0f727893_s.jpg","isFollowing":false,"type":"people","slug":"bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","profileUrl":"https://www.zhihu.com/people/bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false,"badge":{"identity":null,"bestAnswerer":null}}},"Comment":{},"favlists":{}},"me":{},"global":{},"columns":{"learncpp":{"following":false,"canManage":false,"href":"/api/columns/learncpp","name":"从零开始构建标准库","creator":{"slug":"bajdcc"},"url":"/learncpp","slug":"learncpp","avatar":{"id":"v2-bf63794c542fc73b11e17014b7e0d01d","template":"https://pic2.zhimg.com/{id}_{size}.jpg"}}},"columnPosts":{},"postComments":{},"postReviewComments":{"comments":[],"newComments":[],"hasMore":true},"favlistsByUser":{},"favlistRelations":{}}</textarea>

    <script src="//static.zhihu.com/hemingway/common.09e6a1984c735e134505.js"></script>
<script src="//static.zhihu.com/hemingway/app.89ecf4e073987c60567b.js"></script>
<script src="//static.zhihu.com/hemingway/raven.4f017398aa850e39fe3c.js" async defer></script>
  </body>
</html>
