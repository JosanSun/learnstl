<!doctype html>
<html lang="zh-CN" class="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>【Trac】浏览器中查看源码库 - 知乎专栏</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link rel="shortcut icon" href="https://static.zhihu.com/static/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="//static.zhihu.com/hemingway/app.4936d5747e0875f3d24e1bd1e11d9014.css" />
    <style></style>
    <script>document.documentElement.className += ('ontouchstart' in window) ? ' touch' : ' no-touch'</script>
  </head>
  <body>

    <div id="react-root"></div>
    <textarea id="clientConfig" hidden>{"debug":false,"apiRoot":"","paySDK":"https://pay.zhihu.com/api/js","wechatConfigAPI":"/api/wechat/jssdkconfig","name":"production","instance":"column","tokens":{"X-XSRF-TOKEN":null,"X-UDID":null,"Authorization":"oauth c3cef7c66a1843f8b3a9e6a1e3160e20"}}</textarea>
    <textarea id="preloadedState" hidden>{"database":{"Post":{"26553299":{"title":"【Trac】浏览器中查看源码库","author":"bajdcc","content":"<h2>写在前面</h2><p>最近又看到了Trac，想起之前用到它一次，决定再温习一遍，使用效果不错。主要看中Trac的源码管理功能，当然了，它还有许多其他的插件可以用，如可以管理svn、写wiki等。</p><p>综上网上各种教程，最终归纳成本文。</p><h2>搭建顺序</h2><ol><li>安装python 2.7及相关库</li><li>设置Trac</li></ol><h2>安装</h2><p>下载py2.7，然后pip安装以下库，默认是最新版本：</p><ol><li><b>babel </b>用于切换中文语言</li><li><b>genshi </b>网页模版引擎</li><li><b>trac</b> 我们的主角</li></ol><p>pysqlite用内建的，不需要安装。</p><br><h2>设置</h2><p><b><u>一、初始化Trac环境</u></b></p><p>在d:\\trac\\下创建环境：</p><p><b>trac-admin d:\\trac initenv</b></p><p>期间输入项目名称。</p><p><u><b>二、创建管理员账号</b></u></p><p>用脚本创建名为admin密码123456的账号，保存在passwd.digest中：</p><p><b>python.exe trac-digest.py -u admin -p 123456 &amp;gt;&amp;gt; d:\\trac\\passwd.digest</b><br></p><p>trac-digest.py内容如下（<a href=\"http://link.zhihu.com/?target=http%3A//rain.snowrain.org/archives/73\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">rain.snowrain.org/archi</span><span class=\"invisible\">ves/73</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>）：</p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"kn\">from</span> <span class=\"nn\">optparse</span> <span class=\"kn\">import</span> <span class=\"n\">OptionParser</span>\n<span class=\"kn\">import</span> <span class=\"nn\">md5</span>\n \n<span class=\"c1\"># build the options</span>\n<span class=\"n\">usage</span> <span class=\"o\">=</span> <span class=\"s2\">\"usage: %prog [options]\"</span>\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">OptionParser</span><span class=\"p\">(</span><span class=\"n\">usage</span><span class=\"o\">=</span><span class=\"n\">usage</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_option</span><span class=\"p\">(</span><span class=\"s2\">\"-u\"</span><span class=\"p\">,</span> <span class=\"s2\">\"--username\"</span><span class=\"p\">,</span><span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">\"store\"</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"s2\">\"username\"</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n                  <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"the username for whom to generate a password\"</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_option</span><span class=\"p\">(</span><span class=\"s2\">\"-p\"</span><span class=\"p\">,</span> <span class=\"s2\">\"--password\"</span><span class=\"p\">,</span><span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">\"store\"</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"s2\">\"password\"</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n                  <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"the password to use\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n \n<span class=\"c1\"># check options</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">password</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">):</span>\n   <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"You must supply both the username and password\"</span><span class=\"p\">)</span>\n \n<span class=\"c1\"># Generate the string to enter into the htdigest file</span>\n<span class=\"n\">realm</span> <span class=\"o\">=</span> <span class=\"s1\">'njg'</span>\n<span class=\"n\">kd</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">md5</span><span class=\"o\">.</span><span class=\"n\">md5</span><span class=\"p\">(</span><span class=\"s1\">':'</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">()</span>\n<span class=\"k\">print</span> <span class=\"s1\">':'</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">((</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">realm</span><span class=\"p\">,</span> <span class=\"n\">kd</span><span class=\"p\">([</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">realm</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">password</span><span class=\"p\">])))</span>\n</code></pre></div><p>将admin设成管理员账号：<b>trac-admin d:/trac permission add admin TRAC_ADMIN</b><br></p><p><b><u>三、设置配置文件</u></b></p><p>修改conf/trac.ini</p><p>添加下列内容，启用git。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>[trac]\n...\ngit_bin = C:/Program Files/Git/bin/git.exe\n...\n[components]\ntracopt.versioncontrol.git.* = enabled\n</code></pre></div><p><b><u>四、启动服务器</u></b></p><p>于8080端口监听：<b>tracd -p 8080 . --auth=*,passwd.digest,njg</b><br></p><br><h2>参考</h2><ol><li><a href=\"http://link.zhihu.com/?target=http%3A//blog.csdn.net/linuxdriverdeveloper/article/details/7631456\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Windows搭建Trac - linuxdriverdeveloper的专栏 - 博客频道 - CSDN.NET<i class=\"icon-external\"></i></a><br></li><li><a href=\"http://link.zhihu.com/?target=http%3A//rain.snowrain.org/archives/73\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">rain.snowrain.org/archi</span><span class=\"invisible\">ves/73</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></li></ol>","updated":"2017-04-25T01:59:28.000Z","canComment":false,"commentPermission":"anyone","commentCount":0,"collapsedCount":0,"likeCount":2,"state":"published","isLiked":false,"slug":"26553299","isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic1.zhimg.com/v2-8dd8a69b4fe4b34f81200ab83a6aeb44_r.png","links":{"comments":"/api/posts/26553299/comments"},"reviewers":[],"topics":[{"url":"https://www.zhihu.com/topic/19552832","id":"19552832","name":"Python"},{"url":"https://www.zhihu.com/topic/19557710","id":"19557710","name":"Git"},{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"}],"adminClosedComment":false,"titleImageSize":{"width":834,"height":504},"href":"/api/posts/26553299","excerptTitle":"","column":{"slug":"learncpp","name":"从零开始构建标准库"},"tipjarState":"inactivated","sourceUrl":"","pageCommentsCount":0,"snapshotUrl":"","publishedTime":"2017-04-25T09:59:28+08:00","url":"/p/26553299","lastestLikers":[{"profileUrl":"https://www.zhihu.com/people/fourhu-68","bio":"喜欢写代码的吃货","hash":"d93fff20b98c0cf18152f90fc2ce8764","uid":71903196741632,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"fourhu-68","avatar":{"id":"v2-4e3412b18d9be6b32992ab1d254d2271","template":"https://pic2.zhimg.com/{id}_{size}.jpg"},"name":"胡木木"},{"profileUrl":"https://www.zhihu.com/people/zjczoo","bio":"","hash":"083cecf3af8f629239442d913dcbeb41","uid":27236140843008,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"zjczoo","avatar":{"id":"v2-1f0c43c46cd992d523d2284ab01c7b9c","template":"https://pic1.zhimg.com/{id}_{size}.jpg"},"name":"Early"}],"summary":"写在前面最近又看到了Trac，想起之前用到它一次，决定再温习一遍，使用效果不错。主要看中Trac的源码管理功能，当然了，它还有许多其他的插件可以用，如可以管理svn、写wiki等。综上网上各种教程，最终归纳成本文。搭建顺序安装python 2.7及相关库设置Trac…","reviewingCommentsCount":0,"meta":{"previous":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic4.zhimg.com/v2-45eb4ca1dbdc644802e1bf448305ef13_r.png","links":{"comments":"/api/posts/26492108/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19601369","id":"19601369","name":"编译原理"},{"url":"https://www.zhihu.com/topic/19561132","id":"19561132","name":"Java"},{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"}],"adminClosedComment":false,"href":"/api/posts/26492108","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"Release：<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang/releases/tag/v2.2.4\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/jMiniLang<i class=\"icon-external\"></i></a><h2>前言</h2><p>经过不断努力，我原本关于做一个脚本操作系统的设想终于得到了实现，也完成了先前构思的基于管道的设计初衷，jMiniOS完全是基于共享变量和管道的。</p><p>目前比较好玩的功能：</p><ol><li><b>Task</b> 进程间同步调用</li><li><b>Shell系列</b>（Range，Grep，Count等） 通过管道方式完成操作，如题图中的`range 1 1000 | grep 3 | count`目的是计算1到1000中带有3的数字的数量</li><li><b>四则运算 </b>通过`task util calc 4+6*7`来进行计算，那么我这里将运算表达式直接交给priv.bajdcc.OP.grammar去处理了，也算对<b>算符优先文法</b>的一个运用</li><li><b>图形界面 </b>通过`task ui print XXX`去实现，这里的Remote窗口我套用了原本的Shell窗口，后期打算用GDI去画画，操作指令试着用SVG的，解析的话用priv.bajdcc.LL1.grammar，正好用上它哈哈</li></ol><p>本阶段预期实现的结果是在Remote窗口中做一个稍微好看的Desktop出来，仿个Ubuntu吧，然后Shell窗口就做脚本控制端。</p><h2>为什么要设计这样一个脚本操作系统</h2><p>这其实是当初的一个<u>脑洞</u>，在学习了轮子哥的LR分析代码后，体现到了Parsing Combinator的博大精深之处，由于原先的语法是与C++紧密相关的，所以移植到java上后我只好采用解析字符串的方法，所以每个parser我都会先写个syntax类，用来解析语法规则。</p><p>脚本操作系统运行在我做的解释器上，里面的指令都是我自己掰的，缺啥补啥。当初比较头疼的是实现闭包和协程，然后是写Shell的核心代码，现在基本没啥头疼的问题，因为逐渐靠近顶层设计了，不会在意太多细节。</p><p>可能大多数人看到LR分析代码会望而生畏，不过我就是抱着誓不罢休的决心，对整个C++的LR代码全部移植到java上，这样，我不大可能忽视太多细节。正因为我采用了java，所以便萌生了做解释器的想法。</p><p>做一个解释器还是挺好玩的，因为指令我可以自己设计，不用去读那些晦涩的8086汇编指令，语言也可能更加灵活，能够实现更多语法。关于做一个简单的基于栈的脚本解释器其实也不难，只要把书啃会，多学习优秀代码，花点时间，不要放弃。</p><p>写完解释器后，过了段时间，我又想了：给它搞个多进程会怎样？一不做二不休，大刀阔斧改代码，花了九牛二虎之力，后面的操作系统正是建立在单线程模拟多进程的基础上。</p><p>废话说完了，关于现在这个脚本操作系统，我的构想是给它源代码，它用到哪个自动去编译哪个，系统的进程间通信全部基于管道，管道的抢占全部使用自旋锁，所以造就了最终跑满CPU的jMiniOS。</p><p>其实写这系统纯属为了好玩。哈哈。</p><h2>系统的启动过程</h2><p>其实我这个系统的构思也是结合了现在很多OS的特性，如中断、IPC等。</p><p>其实看output你也可以了解系统的启用过程。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">1</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">kern</span><span class=\"o\">/</span><span class=\"n\">entry</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Waiting</span> <span class=\"nl\">proc</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">0</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">1</span>\n<span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">2</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">kern</span><span class=\"o\">/</span><span class=\"n\">irq</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Waiting</span> <span class=\"nl\">proc</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">1</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">2</span>\n<span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">3</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">kern</span><span class=\"o\">/</span><span class=\"n\">irq</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Create</span> <span class=\"nl\">int_proc</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">0</span>\n<span class=\"n\">Sharing</span> <span class=\"err\">'</span><span class=\"n\">IRQ</span><span class=\"err\">#</span><span class=\"n\">ON</span><span class=\"mf\">.0</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">4</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">kern</span><span class=\"o\">/</span><span class=\"n\">irq</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Create</span> <span class=\"nl\">int_proc</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">1</span>\n<span class=\"n\">Pipe</span> <span class=\"err\">#</span><span class=\"mi\">0</span> <span class=\"err\">'</span><span class=\"kt\">int</span><span class=\"err\">#</span><span class=\"mi\">0</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">5</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">kern</span><span class=\"o\">/</span><span class=\"n\">irq</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Sharing</span> <span class=\"err\">'</span><span class=\"n\">IRQ</span><span class=\"err\">#</span><span class=\"n\">ON</span><span class=\"mf\">.1</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Create</span> <span class=\"nl\">int_proc</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">2</span>\n<span class=\"n\">Pipe</span> <span class=\"err\">#</span><span class=\"mi\">1</span> <span class=\"err\">'</span><span class=\"kt\">int</span><span class=\"err\">#</span><span class=\"mi\">1</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Sharing</span> <span class=\"err\">'</span><span class=\"n\">IRQ</span><span class=\"err\">#</span><span class=\"n\">ON</span><span class=\"mf\">.2</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">6</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">kern</span><span class=\"o\">/</span><span class=\"n\">irq</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Create</span> <span class=\"nl\">int_proc</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">3</span>\n<span class=\"n\">Pipe</span> <span class=\"err\">#</span><span class=\"mi\">2</span> <span class=\"err\">'</span><span class=\"kt\">int</span><span class=\"err\">#</span><span class=\"mi\">2</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Sharing</span> <span class=\"err\">'</span><span class=\"n\">IRQ</span><span class=\"err\">#</span><span class=\"n\">ON</span><span class=\"mf\">.3</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Pipe</span> <span class=\"err\">#</span><span class=\"mi\">3</span> <span class=\"err\">'</span><span class=\"kt\">int</span><span class=\"err\">#</span><span class=\"mi\">3</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Sharing</span> <span class=\"err\">'</span><span class=\"n\">TASK</span><span class=\"err\">#</span><span class=\"n\">TABLE</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Reading</span> <span class=\"nl\">pipe</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">6</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">3</span>\n<span class=\"n\">Sharing</span> <span class=\"err\">'</span><span class=\"n\">TASK</span><span class=\"err\">#</span><span class=\"n\">LIST</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Process</span> <span class=\"err\">#</span><span class=\"mi\">2</span> <span class=\"n\">exit</span>\n<span class=\"n\">Reading</span> <span class=\"nl\">pipe</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">4</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">1</span>\n<span class=\"n\">Reading</span> <span class=\"nl\">pipe</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">5</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">2</span>\n<span class=\"n\">Reading</span> <span class=\"nl\">pipe</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">3</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">0</span>\n<span class=\"n\">Waiting</span> <span class=\"nl\">proc</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">1</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">2</span> <span class=\"n\">ok</span>\n<span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">7</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">kern</span><span class=\"o\">/</span><span class=\"n\">task</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">8</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">proc</span><span class=\"o\">/</span><span class=\"n\">schd</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">User</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">9</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Process</span> <span class=\"err\">#</span><span class=\"mi\">1</span> <span class=\"n\">exit</span>\n<span class=\"n\">Sharing</span> <span class=\"err\">'</span><span class=\"n\">TASK</span><span class=\"err\">#</span><span class=\"n\">NAMELIST</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Sharing</span> <span class=\"err\">'</span><span class=\"n\">SCHD</span><span class=\"err\">#</span><span class=\"n\">ON</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">User</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">10</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">p</span><span class=\"o\">/</span><span class=\"n\">sh</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Process</span> <span class=\"err\">#</span><span class=\"mi\">9</span> <span class=\"n\">exit</span>\n<span class=\"n\">User</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">11</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">p</span><span class=\"o\">/</span><span class=\"n\">sh</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Waiting</span> <span class=\"nl\">proc</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">10</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">11</span>\n<span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">12</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">task</span><span class=\"o\">/</span><span class=\"n\">system</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Waiting</span> <span class=\"nl\">proc</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">0</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">1</span> <span class=\"n\">ok</span>\n<span class=\"n\">Process</span> <span class=\"err\">#</span><span class=\"mi\">0</span> <span class=\"n\">exit</span>\n<span class=\"n\">Pipe</span> <span class=\"err\">#</span><span class=\"mi\">4</span> <span class=\"err\">'</span><span class=\"n\">TASKSEND</span><span class=\"err\">#</span><span class=\"mi\">1</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">13</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">task</span><span class=\"o\">/</span><span class=\"n\">util</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Pipe</span> <span class=\"err\">#</span><span class=\"mi\">5</span> <span class=\"err\">'</span><span class=\"n\">TASKSEND</span><span class=\"err\">#</span><span class=\"mi\">2</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Task</span> <span class=\"err\">#</span><span class=\"mi\">1</span> <span class=\"n\">created</span>\n<span class=\"n\">Reading</span> <span class=\"nl\">pipe</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">12</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">4</span>\n<span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">14</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">task</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Task</span> <span class=\"err\">#</span><span class=\"mi\">2</span> <span class=\"n\">created</span>\n<span class=\"n\">Reading</span> <span class=\"nl\">pipe</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">13</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">5</span>\n<span class=\"n\">Pipe</span> <span class=\"err\">#</span><span class=\"mi\">6</span> <span class=\"err\">'</span><span class=\"n\">TASKSEND</span><span class=\"err\">#</span><span class=\"mi\">3</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Task</span> <span class=\"err\">#</span><span class=\"mi\">3</span> <span class=\"n\">created</span>\n<span class=\"n\">Reading</span> <span class=\"nl\">pipe</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">14</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">6</span>\n<span class=\"n\">Process</span> <span class=\"err\">#</span><span class=\"mi\">7</span> <span class=\"n\">exit</span>\n<span class=\"n\">Process</span> <span class=\"err\">#</span><span class=\"mi\">11</span> <span class=\"n\">exit</span>\n<span class=\"n\">Waiting</span> <span class=\"nl\">proc</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">10</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">11</span> <span class=\"n\">ok</span>\n<span class=\"n\">Sharing</span> <span class=\"err\">'</span><span class=\"n\">cmd</span><span class=\"err\">#</span><span class=\"n\">histroy</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Sharing</span> <span class=\"err\">'</span><span class=\"n\">PIPE</span><span class=\"err\">#</span><span class=\"n\">HANDLE</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">User</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">15</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">p</span><span class=\"o\">/</span><span class=\"n\">sh</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Process</span> <span class=\"err\">#</span><span class=\"mi\">10</span> <span class=\"n\">exit</span>\n</code></pre></div><p>系统从内核代码入口处开始：</p><ol><li>运行内核服务：用户进程调度服务Schd、中断处理服务Irq、远程调用服务Task。系统进程分内核态和用户态（特权检查暂时没做，管道的创建和使用特权也没做），Schd只是调度用户态进程。Irq有四个：图形界面、远程调用、控制台输出、系统退出，当然嫌少的话可以加，从前到后优先级降低。Task是基于MiniOS的思路，通过管道做一个简单的同步IPC。<br></li><li>Schd和Irq开始运行，Irq收到信息就可以调用相应服务。</li><li>Task运行三个服务：System、Util、UI。</li><li>运行Shell，等待输入。</li></ol><p>那么任何一个细节也是千丝万缕，尤其是最复杂的Shell，调试它的问题花了数日。</p><p>从启动过程可以看到，系统是组件化、微服务化的，各个组件分得很清楚，我主要是通过管道和共享变量去解耦。从写代码的过程中，我很是体会到了那些优秀操作系统中的精妙构想，真是非常美！</p><p>贴一张系统服务的图：</p><img src=\"http://pic3.zhimg.com/v2-1319b919de0ee8baba5373ef48182c96_b.png\" data-rawwidth=\"810\" data-rawheight=\"610\" class=\"origin_image zh-lightbox-thumb\" width=\"810\" data-original=\"http://pic3.zhimg.com/v2-1319b919de0ee8baba5373ef48182c96_r.png\"><h2>后面的设想</h2><p>就是抓住UI这一块，做个桌面，这样就想把轮子哥讲过的三大浪漫全给集齐了。</p>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":26492108,"publishedTime":"2017-04-21T11:23:18+08:00","url":"/p/26492108","title":"【脚本操作系统】jMiniOS介绍","summary":"Release：<a href=\"https://github.com/bajdcc/jMiniLang/releases/tag/v2.2.4\" class=\"\" data-editable=\"true\" data-title=\"bajdcc/jMiniLang\">bajdcc/jMiniLang</a>前言经过不断努力，我原本关于做一个脚本操作系统的设想终于得到了实现，也完成了先前构思的基于管道的设计初衷，jMiniOS完全是基于共享变量和管道的。目前比较好玩的功能：<b>Task</b> 进程间同步调用<b>Shell系列</b>（Range，Grep，Count等）…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0},"next":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic2.zhimg.com/v2-df997737d8bdad7674c878f424efb44d_r.png","links":{"comments":"/api/posts/26591115/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"},{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"},{"url":"https://www.zhihu.com/topic/19585411","id":"19585411","name":"函数式编程"}],"adminClosedComment":false,"href":"/api/posts/26591115","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<h2>写在前面</h2><p><a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/CppShell\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/CppShell<i class=\"icon-external\"></i></a><br></p><p>最近心血来潮又造了个轮子，其实启发我的是<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/jMiniLang<i class=\"icon-external\"></i></a>中的管道思想，java运行着太慢，因而用C艹实现一把。</p><p>如题图所示，使用非常非常简单。</p><ol><li>range生成有限/无穷数列，`range 0`生成自然数无穷数列，`range 1 10`生成1到10</li><li>take N，表示从有限/无穷数列中摘取前N行</li><li>last N，表示从有限数列中取倒数N行，当然了如果数列是无穷的，那么GG</li><li>load FILENAME，加载文件</li><li>save FILENAME，保存至文件</li></ol><h2>设计思路</h2><p>首先当然是解析命令行输入啦，然后则是处理与输出。</p><p><u><b>一、处理命令</b></u></p><p>假如命令是诸如`load 1.txt | uppercase | save 2.txt`，以“|”作分隔，分隔后得到单一程序命令行，再以空格作分隔。</p><p>用式子来表示是：</p><ol><li>用户输入command_string</li><li>applications = command_string.split('|')</li></ol><br><p>对applications中每一app，app_args = app.split(' ')，然后app_name = app_args[0]，删除app_args[0]，得到后面的参数arguments下面的任务是，根据app_name和arguments来创建应用程序。</p><p><b><u>二、创建应用程序</u></b></p><p>我们以`range 1 100 | save 2.txt`为例，意义为“生成1到100的数列，然后保存至文件”。</p><p>所以必须生成两个程序range和save，那么两者是什么关系呢？</p><p>思考一下：生成数列，将数列保存至文件。即：以数列作输入，文件为输出。得到：range =&amp;gt; save。即save的输入是range的输出，是从前向后逐渐依赖的关系，换句话说，后者调用前者。</p><p>这里用到了装饰者模式，既然后者调用前者，那么后者将前者包裹起来即可。应用程序的创建涉及工厂模式，没什么大过花哨的C++技巧。</p><p><u><b>三、应用程序接口设计</b></u></p><p>其实也就是“流”接口的设计。参考众多流设计，这里我只实现最简单的：</p><ol><li>bool available() const，返回流是否可用/到末尾</li><li>char next()，读取当前字符，并准备下个字符</li></ol><p>应用程序只要重载这两个接口即可。</p><h2>代码实现</h2><p><u><b>1. Shell</b></u></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"kt\">void</span> <span class=\"n\">CShell</span><span class=\"o\">::</span><span class=\"n\">exec</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&amp;amp;</span> <span class=\"n\">cmd</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"sc\">'|'</span><span class=\"p\">);</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&amp;lt;</span><span class=\"n\">app_t</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">cmder</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&amp;lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">names</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&amp;lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&amp;lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&amp;gt;&amp;gt;</span> <span class=\"n\">arg</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span><span class=\"o\">&amp;amp;</span> <span class=\"nl\">str</span> <span class=\"p\">:</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">trim</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">);</span>\n        <span class=\"k\">auto</span> <span class=\"n\">part</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"sc\">' '</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span>\n            <span class=\"k\">return</span> <span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">\"empty argument\"</span><span class=\"p\">);</span>\n        <span class=\"n\">names</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n        <span class=\"k\">auto</span> <span class=\"n\">apt</span> <span class=\"o\">=</span> <span class=\"n\">CApp</span><span class=\"o\">::</span><span class=\"n\">get_type_by_name</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">apt</span> <span class=\"o\">==</span> <span class=\"n\">app_none</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">\"invalid application: \"</span> <span class=\"o\">+</span> <span class=\"n\">str</span><span class=\"p\">);</span>\n        <span class=\"n\">part</span><span class=\"p\">.</span><span class=\"n\">erase</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">());</span>\n        <span class=\"n\">cmder</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">apt</span><span class=\"p\">);</span>\n        <span class=\"n\">arg</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">);</span> <span class=\"c1\">// 应用程序参数</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">auto</span> <span class=\"n\">inner</span> <span class=\"o\">=</span> <span class=\"n\">CApp</span><span class=\"o\">::</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">app_null</span><span class=\"p\">);</span> <span class=\"c1\">// 最里层程序</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CApp</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">app</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">uint32_t</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">cmder</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">CApp</span><span class=\"o\">::</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">cmder</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span> <span class=\"c1\">// 工厂模式创建应用程序</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">set_arg</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s\">\": \"</span> <span class=\"o\">+</span> <span class=\"n\">app</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">get_err</span><span class=\"p\">());</span>\n        <span class=\"n\">app</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">set_inner_app</span><span class=\"p\">(</span><span class=\"n\">inner</span><span class=\"p\">);</span> <span class=\"c1\">// 装饰模式进行包装</span>\n        <span class=\"n\">inner</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">available</span><span class=\"p\">())</span> <span class=\"c1\">// 正式工作！</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">auto</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">next</span><span class=\"p\">();</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">!=</span> <span class=\"sc\">'\\0'</span><span class=\"p\">)</span>\n            <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&amp;lt;&amp;lt;</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"n\">CShell</span><span class=\"o\">::</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&amp;amp;</span> <span class=\"n\">str</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&amp;lt;&amp;lt;</span> <span class=\"n\">str</span> <span class=\"o\">&amp;lt;&amp;lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><b><u>2. App</u></b></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">enum</span> <span class=\"n\">app_t</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">app__begin</span><span class=\"p\">,</span>\n    <span class=\"n\">app_none</span><span class=\"p\">,</span>\n    <span class=\"n\">app_null</span><span class=\"p\">,</span>\n    <span class=\"n\">app_pipe</span><span class=\"p\">,</span>\n    <span class=\"n\">app_range</span><span class=\"p\">,</span>\n    <span class=\"n\">app_take</span><span class=\"p\">,</span>\n    <span class=\"n\">app_last</span><span class=\"p\">,</span>\n    <span class=\"n\">app_load</span><span class=\"p\">,</span>\n    <span class=\"n\">app_save</span><span class=\"p\">,</span>\n    <span class=\"n\">app__end</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CApp</span>\n<span class=\"p\">{</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"n\">CApp</span><span class=\"p\">();</span>\n    <span class=\"k\">virtual</span> <span class=\"o\">~</span><span class=\"n\">CApp</span><span class=\"p\">();</span>\n\n    <span class=\"k\">static</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CApp</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">app_t</span> <span class=\"n\">type</span><span class=\"p\">);</span>\n    <span class=\"k\">static</span> <span class=\"n\">app_t</span> <span class=\"nf\">get_type_by_name</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;amp;</span><span class=\"n\">name</span><span class=\"p\">);</span>\n\n    <span class=\"kt\">int</span> <span class=\"nf\">set_arg</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&amp;lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">arg</span><span class=\"p\">);</span>\n    <span class=\"k\">virtual</span> <span class=\"kt\">int</span> <span class=\"nf\">init</span><span class=\"p\">()</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">set_inner_app</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CApp</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">app</span><span class=\"p\">);</span>\n\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">get_err</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n\n    <span class=\"k\">virtual</span> <span class=\"kt\">bool</span> <span class=\"nf\">available</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">virtual</span> <span class=\"kt\">char</span> <span class=\"nf\">next</span><span class=\"p\">()</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"k\">protected</span><span class=\"o\">:</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&amp;lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">args</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">error</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CApp</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">inner</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// 创建</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CApp</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">CApp</span><span class=\"o\">::</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">app_t</span> <span class=\"n\">type</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">type</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"nl\">app_none</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"nl\">app_null</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CAppNull</span><span class=\"o\">&amp;gt;</span><span class=\"p\">();</span>\n    <span class=\"k\">case</span> <span class=\"nl\">app_pipe</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CAppPipe</span><span class=\"o\">&amp;gt;</span><span class=\"p\">();</span>\n    <span class=\"k\">case</span> <span class=\"nl\">app_range</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CAppRange</span><span class=\"o\">&amp;gt;</span><span class=\"p\">();</span>\n    <span class=\"k\">case</span> <span class=\"nl\">app_take</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CAppTake</span><span class=\"o\">&amp;gt;</span><span class=\"p\">();</span>\n    <span class=\"k\">case</span> <span class=\"nl\">app_last</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CAppLast</span><span class=\"o\">&amp;gt;</span><span class=\"p\">();</span>\n    <span class=\"k\">case</span> <span class=\"nl\">app_load</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CAppLoad</span><span class=\"o\">&amp;gt;</span><span class=\"p\">();</span>\n    <span class=\"k\">case</span> <span class=\"nl\">app_save</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CAppSave</span><span class=\"o\">&amp;gt;</span><span class=\"p\">();</span>\n    <span class=\"k\">default</span><span class=\"o\">:</span>\n        <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"invalid type\"</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><b><u>3. AppLoad</u></b></p><p>就举这一个例子吧</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"kt\">int</span> <span class=\"n\">CAppTake</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"p\">()</span> <span class=\"c1\">// 初始化</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\">// 有一个参数</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">// 计数开始</span>\n        <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">atoi</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">c_str</span><span class=\"p\">());</span> <span class=\"c1\">// 计数结束</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"s\">\"invalid argument size\"</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">bool</span> <span class=\"n\">CAppTake</span><span class=\"o\">::</span><span class=\"n\">available</span><span class=\"p\">()</span> <span class=\"k\">const</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">start</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">char</span> <span class=\"n\">CAppTake</span><span class=\"o\">::</span><span class=\"n\">next</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">available</span><span class=\"p\">())</span> <span class=\"c1\">// 上一流已经中止</span>\n            <span class=\"k\">return</span> <span class=\"sc\">'\\0'</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">inner</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">available</span><span class=\"p\">())</span> <span class=\"c1\">// 上一流有数据</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">inner</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">next</span><span class=\"p\">();</span>\n            <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"sc\">'\\n'</span><span class=\"p\">)</span> <span class=\"c1\">// 读取一行到data中</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">start</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"c1\">// 计数加一</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"c1\">// 没有数据了</span>\n            <span class=\"k\">return</span> <span class=\"sc\">'\\0'</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">auto</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">front</span><span class=\"p\">();</span> <span class=\"c1\">// 输出读取的一行数据</span>\n    <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"n\">ch</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2><b>阶段性总结</b></h2><p>总之，做这个轮子还是挺愉悦的~因为并未脱离舒适区。。就当复习吧。</p><p>好吧，其实写这玩意是因为bash中的awk、sed、grep等查找替换太复杂了，还不如自己做个。</p>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":26591115,"publishedTime":"2017-04-26T18:49:51+08:00","url":"/p/26591115","title":"【小轮子系列】CppShell介绍","summary":"写在前面<a href=\"https://github.com/bajdcc/CppShell\" data-editable=\"true\" data-title=\"bajdcc/CppShell\" class=\"\">bajdcc/CppShell</a> 最近心血来潮又造了个轮子，其实启发我的是<a href=\"https://github.com/bajdcc/jMiniLang\" data-editable=\"true\" data-title=\"bajdcc/jMiniLang\">bajdcc/jMiniLang</a>中的管道思想，java运行着太慢，因而用C艹实现一把。如题图所示，使用非常非常简单。range生成有限/无穷数列，`range 0`生成自然数无穷数列，`range 1 10`生成1到10take …","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0}},"commentsCount":0,"likesCount":2,"FULLINFO":true}},"User":{"bajdcc":{"isFollowed":false,"name":"陈安","headline":"专业研究野生技术 https://github.com/bajdcc","avatarUrl":"https://pic4.zhimg.com/v2-cd6d61ad9ef94c41b9e77f8e0f727893_s.jpg","isFollowing":false,"type":"people","slug":"bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","profileUrl":"https://www.zhihu.com/people/bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false,"badge":{"identity":null,"bestAnswerer":null}}},"Comment":{},"favlists":{}},"me":{},"global":{},"columns":{"learncpp":{"following":false,"canManage":false,"href":"/api/columns/learncpp","name":"从零开始构建标准库","creator":{"slug":"bajdcc"},"url":"/learncpp","slug":"learncpp","avatar":{"id":"v2-bf63794c542fc73b11e17014b7e0d01d","template":"https://pic2.zhimg.com/{id}_{size}.jpg"}}},"columnPosts":{},"postComments":{},"postReviewComments":{"comments":[],"newComments":[],"hasMore":true},"favlistsByUser":{},"favlistRelations":{},"promotions":{},"env":{"isAppView":false,"appViewConfig":{"content_padding_top":128,"content_padding_bottom":56,"content_padding_left":16,"content_padding_right":16,"title_font_size":22,"body_font_size":16,"is_dark_theme":false,"can_auto_load_image":true,"app_info":"OS=iOS"},"isApp":false},"sys":{}}</textarea>

    <script src="//static.zhihu.com/hemingway/common.c070f7d93ecd9d89ea5e.js"></script>
<script src="//static.zhihu.com/hemingway/app.5353832f5b5cd3213d84.js"></script>
<script src="//static.zhihu.com/hemingway/raven.f556922844d9edc7362e.js" async defer></script>
  </body>
</html>
