<!doctype html>
<html lang="zh-CN">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>【Web系列】小说在线阅读 - 知乎专栏</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link rel="shortcut icon" href="https://static.zhihu.com/static/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="//static.zhihu.com/hemingway/app.3a8fc183ec8185fd25d3ec69cf0225ed.css" />
    <script>document.documentElement.className += ('ontouchstart' in window) ? ' touch' : ' no-touch'</script>
  </head>
  <body>

    <div id="react-root"></div>
    <textarea id="clientConfig" hidden>{"debug":false,"apiRoot":"","paySDK":"https://pay.zhihu.com/api/js","name":"production","instance":"column","tokens":{"X-XSRF-TOKEN":"2|3ff62564|bc458ed05159e38a1ac4f999afcf680c|1492224033","X-UDID":null,"Authorization":"oauth c3cef7c66a1843f8b3a9e6a1e3160e20"}}</textarea>
    <textarea id="preloadedState" hidden>{"database":{"Post":{"26202018":{"title":"【Web系列】小说在线阅读","author":"bajdcc","content":"<h2>写在前面</h2><p><a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/OnlineReader\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bajdcc/Onlin</span><span class=\"invisible\">eReader</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br></p><p>时常有读小说的烦恼，下了几MB的txt电子书，然而在电脑端上看真是惨不忍睹，所以做了个网站来解析小说。</p><p>要求的小说格式是：</p><ol><li>第一行是小说的标题，即书名</li><li>空一行</li><li>第三行是章节名，如“引子”或“第XXX章”</li><li>空一行</li><li>正文</li><li>下一章节名</li><li>……</li></ol><h2>渣效果图</h2><p>根据正文生成的目录：</p><p><noscript><img src=\"https://pic4.zhimg.com/v2-3a5316aad42ad790b90174e24ab94b33_b.png\" data-rawwidth=\"863\" data-rawheight=\"484\" class=\"origin_image zh-lightbox-thumb\" width=\"863\" data-original=\"https://pic4.zhimg.com/v2-3a5316aad42ad790b90174e24ab94b33_r.png\">网站主体如题图所示。</noscript><img src=\"//zhstatic.zhihu.com/assets/zhihu/ztext/whitedot.jpg\" data-rawwidth=\"863\" data-rawheight=\"484\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"863\" data-original=\"https://pic4.zhimg.com/v2-3a5316aad42ad790b90174e24ab94b33_r.png\" data-actualsrc=\"https://pic4.zhimg.com/v2-3a5316aad42ad790b90174e24ab94b33_b.png\">网站主体如题图所示。</p><h2>设计思路</h2><p>搭一个网站可以用很多工具，这里后端采用PHP，前端用Vue.js。</p><p>自动加载触发机制：localhost/getmenu.php?id=书名，如1000.txt，书名是1000，不包括后缀名，因此请求是localhost/getmenu.php?id=1000，请求后系统自动导入小说。</p><p>当加载一个小说如“1000.txt”的时候，系统做：</p><ol><li>如果没有db.sqlite，新建一个，返回失败</li><li>再次请求时，系统找到1000.txt，读文件（in getmenu.php）</li><li>按“引子”、“第XXX章”将文章进行分割，记录分割后各个片段的起始位置和终点位置（in getmenu.php），并保存入db.sqlite中，序列化方式是json和base64</li><li>之后请求时，从db.sqlite取出位置，然后从1000.txt中根据位置找出相应小说片段，并返回给前端</li></ol><h2>分页规则</h2><p>在utils.php中的_filterRegexp方法中，目前是</p><br><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"sr\">/^(引子|第.{1,15}章)/</span>\n</code></pre></div><h2>使用方法</h2><p>php开扩展sqlite3，然后serve即可。</p><p>如我下了本新小说，将它命名成2000.txt，在主页上输入2000，点加载，然后即可开始阅读。</p><h2>其他特性</h2><ul><li>系统按IP保存当前阅读进度<br></li><li>触屏滑动支持</li><li>快捷键翻页支持</li><li>查询章节名</li></ul><br><h2>总结</h2><p>建个小网站，造个小轮子，不亦乐乎啊。</p>","updated":"2017-04-06T04:41:56.000Z","canComment":false,"commentPermission":"anyone","commentCount":9,"collapsedCount":0,"likeCount":6,"state":"published","isLiked":false,"slug":"26202018","isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic2.zhimg.com/v2-b38ba479213e649fffa96eb1a5983145_r.png","links":{"comments":"/api/posts/26202018/comments"},"reviewers":[],"topics":[{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"},{"url":"https://www.zhihu.com/topic/19824417","id":"19824417","name":"小说阅读"},{"url":"https://www.zhihu.com/topic/19550901","id":"19550901","name":"前端开发"}],"titleImageSize":{"width":1320,"height":611},"href":"/api/posts/26202018","excerptTitle":"","column":{"slug":"learncpp","name":"从零开始构建标准库"},"tipjarState":"inactivated","sourceUrl":"","pageCommentsCount":9,"snapshotUrl":"","publishedTime":"2017-04-06T12:41:56+08:00","url":"/p/26202018","lastestLikers":[{"profileUrl":"https://www.zhihu.com/people/yuan-ye-34-20","bio":"亮点在名字","hash":"314146c55ba5db941de5c5a3429877cf","uid":782315119286698000,"isOrg":false,"description":"哪有什么遥不可及，都是人心在作祟","isOrgWhiteList":false,"slug":"yuan-ye-34-20","avatar":{"id":"v2-232e491342c840775c31390376aaf496","template":"https://pic3.zhimg.com/{id}_{size}.jpg"},"name":"程序袁妹子"},{"profileUrl":"https://www.zhihu.com/people/zhumawinner","bio":"You know nothing.","hash":"20b69948d136c246e428ca59428fcf9a","uid":57086645895168,"isOrg":false,"description":"吾日三省吾身，装什么逼 矫什么情 作什么死","isOrgWhiteList":false,"slug":"zhumawinner","avatar":{"id":"704c6b405cbf6b44b75093f635a45757","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"LittleEcho"},{"profileUrl":"https://www.zhihu.com/people/yang-wang-23-66","bio":"不要学技术，不要只学技术","hash":"ec58d5b10180cbcd09cae524fe6790c4","uid":43595478335488,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"yang-wang-23-66","avatar":{"id":"c42555897309637de86235fa9002f1db","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"the cat"},{"profileUrl":"https://www.zhihu.com/people/li-ji-5-58","bio":"ACG与ACGT爱好者","hash":"baf175be8e902b1f9453db781731663e","uid":546660000400093200,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"li-ji-5-58","avatar":{"id":"da8e974dc","template":"https://pic1.zhimg.com/{id}_{size}.jpg"},"name":"李棘"},{"profileUrl":"https://www.zhihu.com/people/ender-6","bio":"Radio Network Optimization Engineer","hash":"3771aea08e3fe1ad26a2a2dad6d7c186","uid":56672605175808,"isOrg":false,"description":"死读书  读死书","isOrgWhiteList":false,"slug":"ender-6","avatar":{"id":"6cf681644","template":"https://pic1.zhimg.com/{id}_{size}.jpg"},"name":"Ender"}],"summary":"写在前面<a href=\"https://github.com/bajdcc/OnlineReader\">https://github.com/bajdcc/OnlineReader</a> 时常有读小说的烦恼，下了几MB的txt电子书，然而在电脑端上看真是惨不忍睹，所以做了个网站来解析小说。要求的小说格式是：第一行是小说的标题，即书名空一行第三行是章节名，如“引子”或“第XXX章”空一行正文下一章节名……","reviewingCommentsCount":0,"meta":{"previous":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic4.zhimg.com/v2-12fcbe73a8340d20a9488ae0228ff11f_r.png","links":{"comments":"/api/posts/26193530/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"},{"url":"https://www.zhihu.com/topic/20032517","id":"20032517","name":"Parser"},{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"}],"href":"/api/posts/26193530","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<h2>写在前面</h2><p><a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/CParser\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/CParser<i class=\"icon-external\"></i></a><br></p><p>这是Lexer部分第二章，比上一章更新了识别数字/字符/字符串的功能。</p><p>总体而言，这部分的思路是非常清晰的。如题图所示，我们制作的Lexer已将原代码完整解析了出来。由于Lexer缺乏解析关键字和操作符的功能，因此要在下一章中才能解析真正的C文件。</p><p>整个扫描算法是一趟扫描，无回溯，复杂度O(n)。</p><h2>正则表达式</h2><p>目前使用的正则表达式：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">using</span> <span class=\"n\">regex_t</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"p\">;</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_string</span><span class=\"p\">{</span> <span class=\"s\">R\"(([^\\\\])|(?:\\\\(?:([bfnrtv'\"\\\\])|(?:0(\\d{1,2}))|(\\d)|(?:x([:xdigit:]{1,2})))))\"</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_char</span><span class=\"p\">{</span> <span class=\"s\">R\"('(?:([^'\"\\\\])|(?:\\\\(?:([bfnrtv'\"\\\\])|(?:0(\\d{1,2}))|(\\d)|(?:x([:xdigit:]{1,2})))))')\"</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_digit</span><span class=\"p\">{</span> <span class=\"s\">R\"(((?:\\d*(\\.)?\\d+|\\d+(\\.)?\\d*)(?:[eE][+-]?\\d+)?)([uU])?([fFdDiIlL])?)\"</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_alpha</span><span class=\"p\">{</span> <span class=\"s\">R\"([[:alpha:]_]\\w*)\"</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_space</span><span class=\"p\">{</span> <span class=\"s\">R\"(([ ]+)|((?:\\r\\n)+)|(\\n+))\"</span> <span class=\"p\">};</span>\n</code></pre></div><p>用图来展现：</p><p><b><u>字符串<img src=\"http://pic2.zhimg.com/v2-36aa8d17c10b2bc98a88d8ee1cdff631_b.png\" data-rawwidth=\"732\" data-rawheight=\"602\" class=\"origin_image zh-lightbox-thumb\" width=\"732\" data-original=\"http://pic2.zhimg.com/v2-36aa8d17c10b2bc98a88d8ee1cdff631_r.png\"></u></b></p><p><b><u>字符<img src=\"http://pic3.zhimg.com/v2-2669550901ea0c49c5eb5b2163f5cc06_b.png\" data-rawwidth=\"806\" data-rawheight=\"587\" class=\"origin_image zh-lightbox-thumb\" width=\"806\" data-original=\"http://pic3.zhimg.com/v2-2669550901ea0c49c5eb5b2163f5cc06_r.png\"></u></b></p><p><b><u>数字<img src=\"http://pic2.zhimg.com/v2-de3ee893e1bdc979bdca4cd5c3a13c89_b.png\" data-rawwidth=\"1134\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"1134\" data-original=\"http://pic2.zhimg.com/v2-de3ee893e1bdc979bdca4cd5c3a13c89_r.png\"></u></b></p><p><b><u>变量名<img src=\"http://pic3.zhimg.com/v2-f821228cc6d8ab05a529c95c1fb35a52_b.png\" data-rawwidth=\"366\" data-rawheight=\"126\" class=\"content_image\" width=\"366\"></u></b></p><p><b><u>空白字符<img src=\"http://pic4.zhimg.com/v2-319d58133ec5ac58a1350aaa038f4f2b_b.png\" data-rawwidth=\"332\" data-rawheight=\"409\" class=\"content_image\" width=\"332\"></u></b></p><p>通过上述可视化效果图，大家可以对正则表达式所能匹配的字串有一个直观的认识。</p><p>写好主逻辑：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">lexer_t</span> <span class=\"n\">CLexer</span><span class=\"o\">::</span><span class=\"n\">next</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">local</span><span class=\"p\">();</span>\n    <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isalpha</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"sc\">'_'</span><span class=\"p\">)</span> <span class=\"c1\">// 变量名或关键字</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">next_alpha</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isdigit</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"sc\">'.'</span><span class=\"p\">)</span> <span class=\"c1\">// 数字</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">next_digit</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isspace</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span> <span class=\"c1\">// 空白字符</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">next_space</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"sc\">'\\''</span><span class=\"p\">)</span> <span class=\"c1\">// 字符</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">next_char</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"sc\">'\\\"'</span><span class=\"p\">)</span> <span class=\"c1\">// 字符串</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">next_string</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">type</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>然后就可以开始新的解析任务了！</p><h2>识别数字</h2><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">lexer_t</span> <span class=\"n\">CLexer</span><span class=\"o\">::</span><span class=\"n\">next_digit</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex_search</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cbegin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cend</span><span class=\"p\">(),</span> <span class=\"n\">sm</span><span class=\"p\">,</span> <span class=\"n\">r_digit</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">auto</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">();</span>\n        <span class=\"k\">auto</span> <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"p\">{</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'F'</span><span class=\"o\">:</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'f'</span><span class=\"o\">:</span>\n                    <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_float</span><span class=\"p\">;</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_float</span> <span class=\"o\">=</span> <span class=\"n\">LEX_T</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">)(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atof</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">()));</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'D'</span><span class=\"o\">:</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'d'</span><span class=\"o\">:</span>\n                    <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_double</span><span class=\"p\">;</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_double</span> <span class=\"o\">=</span> <span class=\"n\">LEX_T</span><span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"p\">)(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atof</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">()));</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'I'</span><span class=\"o\">:</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'i'</span><span class=\"o\">:</span>\n                    <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_int</span><span class=\"p\">;</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_int</span> <span class=\"o\">=</span> <span class=\"n\">LEX_T</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atoi</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">()));</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'L'</span><span class=\"o\">:</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'l'</span><span class=\"o\">:</span>\n                    <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_long</span><span class=\"p\">;</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_long</span> <span class=\"o\">=</span> <span class=\"n\">LEX_T</span><span class=\"p\">(</span><span class=\"kt\">long</span><span class=\"p\">)(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atol</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">()));</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">default</span><span class=\"o\">:</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">else</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"p\">{</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'I'</span><span class=\"o\">:</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'i'</span><span class=\"o\">:</span>\n                    <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_uint</span><span class=\"p\">;</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_uint</span> <span class=\"o\">=</span> <span class=\"n\">LEX_T</span><span class=\"p\">(</span><span class=\"n\">uint</span><span class=\"p\">)(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atof</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">()));</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'L'</span><span class=\"o\">:</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'l'</span><span class=\"o\">:</span>\n                    <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_ulong</span><span class=\"p\">;</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_ulong</span> <span class=\"o\">=</span> <span class=\"n\">LEX_T</span><span class=\"p\">(</span><span class=\"n\">ulong</span><span class=\"p\">)(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atof</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">()));</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">default</span><span class=\"o\">:</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">matched</span> <span class=\"o\">||</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_double</span><span class=\"p\">;</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_double</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atof</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">else</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_int</span><span class=\"p\">;</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_int</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atoi</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">length</span><span class=\"p\">());</span>\n        <span class=\"k\">return</span> <span class=\"n\">type</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"digit not match\"</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>sm[N]表示取group #N，这个group在上面的正则表达式可视化效果图中有。group有时会匹配到，而有时匹配不到，这时需要用sm[N].matched去查看是否匹配。</p><p>主要逻辑：</p><ol><li>结尾带有“uU”、“fFdDiIlL”其中之一字样，如1234i代表int类型的1234，5678UL代表unsigned long类型的5678</li><li>默认是int类型，如有小数点则是double类型</li><li>为了防止类似3e8这样的数识别错误（atoi不识别3e8，会识别成3），使用先atof再强转成int的方法</li></ol><br><h2>识别单个字符</h2><p>单个字符的识别说起来简单，像'a'这样只要char c = 'a'就可以了，但是考虑到转义，问题就复杂了。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">lexer_t</span> <span class=\"n\">CLexer</span><span class=\"o\">::</span><span class=\"n\">next_char</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex_search</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cbegin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cend</span><span class=\"p\">(),</span> <span class=\"n\">sm</span><span class=\"p\">,</span> <span class=\"n\">r_char</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">length</span><span class=\"p\">());</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">isprint</span><span class=\"p\">(</span><span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span><span class=\"p\">))</span>\n                <span class=\"k\">return</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span> <span class=\"n\">l_char</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_char</span><span class=\"p\">;</span>\n            <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"p\">{</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'b'</span><span class=\"o\">:</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"sc\">'\\b'</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'f'</span><span class=\"o\">:</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"sc\">'\\f'</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'n'</span><span class=\"o\">:</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'r'</span><span class=\"o\">:</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"sc\">'\\r'</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'t'</span><span class=\"o\">:</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"sc\">'\\t'</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'v'</span><span class=\"o\">:</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"sc\">'\\v'</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'\\''</span><span class=\"o\">:</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"sc\">'\\''</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'\\\"'</span><span class=\"o\">:</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"sc\">'\\\"'</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'\\\\'</span><span class=\"o\">:</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"sc\">'\\\\'</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"k\">default</span><span class=\"o\">:</span>\n                <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">length</span><span class=\"p\">());</span>\n            <span class=\"k\">return</span> <span class=\"n\">type</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"n\">oct</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">strtol</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">().</span><span class=\"n\">c_str</span><span class=\"p\">(),</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">);</span>\n            <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"kt\">char</span><span class=\"p\">(</span><span class=\"n\">oct</span><span class=\"p\">);</span>\n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">length</span><span class=\"p\">());</span>\n            <span class=\"k\">return</span> <span class=\"n\">l_char</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atoi</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">().</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n            <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"kt\">char</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">length</span><span class=\"p\">());</span>\n            <span class=\"k\">return</span> <span class=\"n\">l_char</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"n\">hex</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">strtol</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">().</span><span class=\"n\">c_str</span><span class=\"p\">(),</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">);</span>\n            <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"kt\">char</span><span class=\"p\">(</span><span class=\"n\">hex</span><span class=\"p\">);</span>\n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">length</span><span class=\"p\">());</span>\n            <span class=\"k\">return</span> <span class=\"n\">l_char</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"char not match\"</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>主要逻辑：</p><ol><li>类似【'a'】这种的，直接存入char中</li><li>转义【'\\r'】,【 '\\n'】等等，直接判断r、n，返回\\r、\\n</li><li>遇到转义【'\\0'】,【 '\\1'】，直接返回0、1</li><li>遇到八进制转义【'\\0xx'】或十六进制转义【'\\xFF'】，返回strtol转码后的结果</li></ol><h2>识别字符串</h2><p>字符串的识别比字符识别更麻烦，因为正则表达式匹配出的group是有限的，所以只能一个个字符进行匹配。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">lexer_t</span> <span class=\"n\">CLexer</span><span class=\"o\">::</span><span class=\"n\">next_string</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span><span class=\"p\">.</span><span class=\"n\">clear</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;;)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex_search</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cbegin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cend</span><span class=\"p\">(),</span> <span class=\"n\">sm</span><span class=\"p\">,</span> <span class=\"n\">r_string</span><span class=\"p\">))</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">idx</span> <span class=\"o\">+=</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">length</span><span class=\"p\">();</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">auto</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"sc\">'\\\"'</span><span class=\"p\">)</span>\n                <span class=\"p\">{</span>\n                    <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">idx</span> <span class=\"o\">-</span> <span class=\"n\">index</span><span class=\"p\">);</span>\n                    <span class=\"k\">return</span> <span class=\"n\">l_string</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">isprint</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span>\n                    <span class=\"k\">return</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">auto</span> <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_char</span><span class=\"p\">;</span>\n                <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"p\">{</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'b'</span><span class=\"o\">:</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"sc\">'\\b'</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'f'</span><span class=\"o\">:</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"sc\">'\\f'</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'n'</span><span class=\"o\">:</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'r'</span><span class=\"o\">:</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"sc\">'\\r'</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'t'</span><span class=\"o\">:</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"sc\">'\\t'</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'v'</span><span class=\"o\">:</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"sc\">'\\v'</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'\\''</span><span class=\"o\">:</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"sc\">'\\''</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'\\\"'</span><span class=\"o\">:</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"sc\">'\\\"'</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'\\\\'</span><span class=\"o\">:</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"sc\">'\\\\'</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">default</span><span class=\"o\">:</span>\n                    <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">auto</span> <span class=\"n\">oct</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">strtol</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">().</span><span class=\"n\">c_str</span><span class=\"p\">(),</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">);</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"kt\">char</span><span class=\"p\">(</span><span class=\"n\">oct</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">auto</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atoi</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">().</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"kt\">char</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">auto</span> <span class=\"n\">hex</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">strtol</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">().</span><span class=\"n\">c_str</span><span class=\"p\">(),</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">);</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"kt\">char</span><span class=\"p\">(</span><span class=\"n\">hex</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">else</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"string not match\"</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>主要逻辑：</p><ol><li>如果遇到双引号【 \" 】，则中止，返回结果</li><li>类似【'a'】这种的，直接添加</li><li>转义【'\\r'】,【 '\\n'】等等，直接判断r、n，添加\\r、\\n</li><li>遇到转义【'\\0'】,【 '\\1'】，直接添加0、1</li><li>遇到八进制转义【'\\0xx'】或十六进制转义【'\\xFF'】，添加strtol转码后的结果</li><li>继续匹配下一个</li></ol><h2>测试</h2><h2><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"cp\">#define OUTPUT(l, t) printf(\"[%03d:%03d] %-12s - %s\\n\", \\</span>\n<span class=\"cp\">    l.get_last_line(), \\</span>\n<span class=\"cp\">    l.get_last_column(), \\</span>\n<span class=\"cp\">    LEX_STRING(l.get_type()).c_str(), \\</span>\n<span class=\"cp\">    l.current().c_str());</span>\n\n<span class=\"cp\">#define TEST(l, t, v) \\</span>\n<span class=\"cp\">    assert(l.next() == l_##t); \\</span>\n<span class=\"cp\">    assert(l.get_##t() == v); \\</span>\n<span class=\"cp\">    OUTPUT(l, t);</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"s\">\"ABC </span><span class=\"se\">\\r\\n\\n\\n</span><span class=\"s\">.2e8 6e5ul3f1234  a_ _b '</span><span class=\"se\">\\\\</span><span class=\"s\">0''a' '</span><span class=\"se\">\\\\</span><span class=\"s\">'''</span><span class=\"se\">\\\\</span><span class=\"s\">n''</span><span class=\"se\">\\x41</span><span class=\"s\">' </span><span class=\"se\">\\\"\\\"\\\"</span><span class=\"s\">abc</span><span class=\"se\">\\\"</span><span class=\"s\"> </span><span class=\"se\">\\\"\\\\\\\"\\\"</span><span class=\"s\"> </span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"# 输入 </span><span class=\"se\">\\n</span><span class=\"s\">----[[[</span><span class=\"se\">\\n</span><span class=\"s\">%s</span><span class=\"se\">\\n</span><span class=\"s\">----]]]</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">);</span>\n\n    <span class=\"n\">CLexer</span> <span class=\"n\">lexer</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">);</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\"># 解析 </span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">identifier</span><span class=\"p\">,</span> <span class=\"s\">\"ABC\"</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">newline</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">newline</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"p\">,</span> <span class=\"mf\">.2e8</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">ulong</span><span class=\"p\">,</span> <span class=\"mf\">6e5</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"p\">,</span> <span class=\"mf\">3.0f</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"mi\">1234</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">identifier</span><span class=\"p\">,</span> <span class=\"s\">\"a_\"</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">identifier</span><span class=\"p\">,</span> <span class=\"s\">\"_b\"</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"p\">,</span> <span class=\"sc\">'\\0'</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"p\">,</span> <span class=\"sc\">'a'</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"p\">,</span> <span class=\"sc\">'\\''</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"p\">,</span> <span class=\"sc\">'\\n'</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"p\">,</span> <span class=\"sc\">'A'</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"s\">\"\"</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"s\">\"abc\"</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"s\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">newline</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></h2><p>偷懒只写了部分测试代码，理由是完善Lexer后随便找一篇C代码扔进去测试即可，不用费心。不是说自己产生TEST语句，只是根据Log与源码比对一下。。</p><h2>阶段性总结</h2><p>词法分析这一阶段做得还算平滑，用了regex之后，节省了大部分的时间。那么后面的任务就是继续完善Lexer，除了解析关键词/操作符外，还要把解析错误放入record中，后面需要根据语义来反推这个错误的Lexer应该是什么类型（这个实现有点难喔~）。</p><p>总结一下Lexer：</p><ol><li>识别正确，返回类型，存储结果</li><li>识别失败，保存入record，跳过（skip多少位还需要斟酌）</li><li>识别失败的，给出一个关于这个token的类型的猜测</li><li>对于识别失败的，用AST反推类型，并将其塞入AST</li><li>如果有个token被遗漏了，导致AST没法成功生成，如何让parser无视这样一些小的词法错误？这需要parser能基于当前上下文给出一个关于token类型的合理猜测</li><li>怎样给出合理猜测是非常值得思考的，也是parser的核心之一啊，花会编译报个错别人都看不懂，这样的parser有个屁用</li></ol><p>后面的任务会越来越有挑战性，写代码前也需要打打草稿了 :)</p>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":26193530,"publishedTime":"2017-04-05T23:37:10+08:00","url":"/p/26193530","title":"【Parser系列】Lexer II","summary":"写在前面<a href=\"https://github.com/bajdcc/CParser\" data-editable=\"true\" data-title=\"bajdcc/CParser\">bajdcc/CParser</a> 这是Lexer部分第二章，比上一章更新了识别数字/字符/字符串的功能。总体而言，这部分的思路是非常清晰的。如题图所示，我们制作的Lexer已将原代码完整解析了出来。由于Lexer缺乏解析关键字和操作符的功能，因此要在下一章中才能解析…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0},"next":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic1.zhimg.com/v2-2dd99dc9e93a41b0855b3fde610922ec_r.png","links":{"comments":"/api/posts/26331043/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"},{"url":"https://www.zhihu.com/topic/19601369","id":"19601369","name":"编译原理"},{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"}],"href":"/api/posts/26331043","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<h2>写在前面</h2><p><a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/CParser/releases/tag/v0.1\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/CParser<i class=\"icon-external\"></i></a><br></p><p>赶了一天工，把Lexer完成了，现在，Lexer可以毫不羞涩地解析<a href=\"http://link.zhihu.com/?target=https%3A//github.com/dropbox/json11\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">dropbox/json11<i class=\"icon-external\"></i></a>了。虽然json11是C++的代码，Lexer还是可以解析的。部分结果如题图。</p><p>运行的话，用VS2015编译（Release快一点），然后运行即可，它会读取工程目录下的text/json11.cpp，然后解析。</p><p>初始的解析非常简单，因而忽略了错误处理、速度优化等方面。</p><p>比上一篇内容多了些改进，json11作为一个大的测试用例，让我看到了先前代码中的一些缺陷，好在全都改正了。</p><p>那么Lexer部分的最后，完成下列匹配功能：</p><ol><li>匹配注释</li><li>匹配关键词</li><li>匹配操作符</li></ol><p>显而易见，如果都匹配不到，就skip一个字符，并将其标记为error。</p><h2>完善的正则表达式</h2><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">smatch_t</span> <span class=\"n\">sm</span><span class=\"p\">;</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_string</span><span class=\"p\">{</span> <span class=\"s\">R\"(([^\\\\])|(?:\\\\(?:([bfnrtv'\"\\\\])|(?:0(\\d{1,2}))|(\\d)|(?:x([[:xdigit:]]{1,2})))))\"</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_char</span><span class=\"p\">{</span> <span class=\"s\">R\"('(?:([^'\"\\\\])|(?:\\\\(?:([bfnrtv'\"\\\\])|(?:0(\\d{1,2}))|(\\d)|(?:x([[:xdigit:]]{1,2})))))')\"</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_digit</span><span class=\"p\">{</span> <span class=\"s\">R\"(((?:\\d+(\\.)?\\d*)(?:[eE][+-]?\\d+)?)([uU])?([fFdDiIlL])?)\"</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_alpha</span><span class=\"p\">{</span> <span class=\"s\">R\"([[:alpha:]_]\\w*)\"</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_space</span><span class=\"p\">{</span> <span class=\"s\">R\"(([ ]+)|((?:\\r\\n)+)|(\\n+))\"</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_comment</span><span class=\"p\">{</span> <span class=\"s\">R\"((?://([^\\r\\n]*))|(?:/\\*([[:print:]\\n]*?)\\*/))\"</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_hex</span><span class=\"p\">{</span> <span class=\"s\">R\"(^0x([[:xdigit:]]{1,8}))\"</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_keyword</span><span class=\"p\">{</span> <span class=\"n\">lexer_keyword_regex</span><span class=\"p\">(),</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_operator</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">regex_t</span><span class=\"p\">{</span> <span class=\"n\">lexer_operator_regex</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">},</span>\n    <span class=\"n\">regex_t</span><span class=\"p\">{</span> <span class=\"n\">lexer_operator_regex</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">},</span>\n    <span class=\"n\">regex_t</span><span class=\"p\">{</span> <span class=\"n\">lexer_operator_regex</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div><h2>匹配注释</h2><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">lexer_t</span> <span class=\"n\">CLexer</span><span class=\"o\">::</span><span class=\"n\">next_comment</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex_search</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cbegin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cend</span><span class=\"p\">(),</span> <span class=\"n\">sm</span><span class=\"p\">,</span> <span class=\"n\">r_comment</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">auto</span> <span class=\"n\">ms</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">();</span>\n        <span class=\"k\">auto</span> <span class=\"n\">ml</span> <span class=\"o\">=</span> <span class=\"n\">ms</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span> <span class=\"c1\">// comment like '// ...'</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_comment</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">();</span>\n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">ml</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"n\">l_comment</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span> <span class=\"c1\">// comment like '/* ... */'</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_comment</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">();</span>\n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">ml</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_comment</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_comment</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"sc\">'\\n'</span><span class=\"p\">),</span> <span class=\"nb\">true</span><span class=\"p\">);</span> <span class=\"c1\">// check new line</span>\n            <span class=\"k\">return</span> <span class=\"n\">l_comment</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"comment not match\"</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>这里有个小细节：虽然注释都以“/”打头，但是假如是“4/2”呢？这就不是注释了，所以必须接着判断“/”或者“*”，如果不是的话，就将“/”识别成除号。</p><h2>匹配关键字</h2><p>关键字的部分其实是属于“变量名”范围的，所以拿到变量名字符串str，用正则表达式去匹配它即可。正则表达式有capture group即捕获组的功能，所以构造一个“(^auto$)|(^bool$)|(^break$)|...”去匹配。如果匹配到是bool，那么group[2]就有值，这个编号2同时也是k_bool的值，都是相对应的。</p><p>如何生成这个regex就是用说了，用string去拼接，这里懒得用stringstream等东西了。</p><p>生成正则表达式：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">string_t</span> <span class=\"nf\">lexer_keyword_regex</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">string_t</span> <span class=\"n\">str</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">k__start</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">k__end</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">str</span> <span class=\"o\">+=</span> <span class=\"s\">\"(^\"</span><span class=\"p\">;</span>\n        <span class=\"n\">str</span> <span class=\"o\">+=</span> <span class=\"n\">keyword_string_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">str</span> <span class=\"o\">+=</span> <span class=\"s\">\"$)|\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">erase</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">str</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>识别出变量名后匹配看是否是关键字：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">lexer_t</span> <span class=\"n\">CLexer</span><span class=\"o\">::</span><span class=\"n\">next_alpha</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex_search</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cbegin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cend</span><span class=\"p\">(),</span> <span class=\"n\">sm</span><span class=\"p\">,</span> <span class=\"n\">r_alpha</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">auto</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">();</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex_search</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">cbegin</span><span class=\"p\">(),</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">cend</span><span class=\"p\">(),</span> <span class=\"n\">sm</span><span class=\"p\">,</span> <span class=\"n\">r_keyword</span><span class=\"p\">))</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">auto</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">distance</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">find_if</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">sm</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"n\">match_pred</span><span class=\"p\">));</span>\n            <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_keyword</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">keyword_t</span><span class=\"p\">)(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span> \n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">());</span>\n            <span class=\"k\">return</span> <span class=\"n\">l_keyword</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_identifier</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">();</span>\n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">());</span>\n            <span class=\"k\">return</span> <span class=\"n\">l_identifier</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"alpha not match\"</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>匹配操作符</h2><p>匹配操作符和匹配关键字的过程殊途同归，不过区别在于不能将操作符原封不动填进正则表达式里，这里需要转义。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">string_t</span> <span class=\"n\">operator_esc_string_list</span><span class=\"p\">[]</span> <span class=\"o\">=</span>\n<span class=\"p\">{</span>\n    <span class=\"s\">\"@START\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">+\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"-\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">*\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"/\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\\\\\</span><span class=\"s\">\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">?\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"%\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"&amp;amp;\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">|\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"~\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">^\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"!\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"&amp;lt;\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"&amp;gt;\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">(\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">)\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">{\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">}\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">[\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">]\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\",\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\";\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\":\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"==\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"!=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">+</span><span class=\"se\">\\\\</span><span class=\"s\">+\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"--\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">+=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"-=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">*=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"/=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"&amp;amp;=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">|=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">^=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"%=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">&amp;lt;=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">&amp;gt;=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"&amp;amp;&amp;amp;\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">|</span><span class=\"se\">\\\\</span><span class=\"s\">|\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"-&amp;gt;\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"&amp;lt;&amp;lt;\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"&amp;gt;&amp;gt;\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"&amp;lt;&amp;lt;=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"&amp;gt;&amp;gt;=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">.</span><span class=\"se\">\\\\</span><span class=\"s\">.</span><span class=\"se\">\\\\</span><span class=\"s\">.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"@END\"</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">const</span> <span class=\"n\">string_t</span><span class=\"o\">&amp;amp;</span> <span class=\"n\">lexer_opstr</span><span class=\"p\">(</span><span class=\"n\">operator_t</span> <span class=\"n\">type</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">type</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">op__start</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">type</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">op__end</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">operator_string_list</span><span class=\"p\">[</span><span class=\"n\">type</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">const</span> <span class=\"n\">string_t</span><span class=\"o\">&amp;amp;</span> <span class=\"n\">lexer_opnamestr</span><span class=\"p\">(</span><span class=\"n\">operator_t</span> <span class=\"n\">type</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">type</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">op__start</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">type</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">op__end</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">opname_string_list</span><span class=\"p\">[</span><span class=\"n\">type</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">op_len_start_idx</span><span class=\"p\">[]</span> <span class=\"o\">=</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">op__start</span><span class=\"p\">,</span>\n    <span class=\"n\">op_assign</span><span class=\"p\">,</span>\n    <span class=\"n\">op_equal</span><span class=\"p\">,</span>\n    <span class=\"n\">op_left_shift_assign</span><span class=\"p\">,</span>\n    <span class=\"n\">op__end</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">lexer_operator_start_idx</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">len</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">len</span> <span class=\"o\">&amp;gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">len</span> <span class=\"o\">&amp;lt;=</span> <span class=\"mi\">4</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">op_len_start_idx</span><span class=\"p\">[</span><span class=\"n\">len</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">string_t</span> <span class=\"nf\">lexer_operator_regex</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">len</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">len</span> <span class=\"o\">&amp;gt;=</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">len</span> <span class=\"o\">&amp;lt;=</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n    <span class=\"n\">string_t</span> <span class=\"n\">str</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">op_len_start_idx</span><span class=\"p\">[</span><span class=\"n\">len</span><span class=\"p\">];</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">op_len_start_idx</span><span class=\"p\">[</span><span class=\"n\">len</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">str</span> <span class=\"o\">+=</span> <span class=\"s\">\"(^\"</span><span class=\"p\">;</span>\n        <span class=\"n\">str</span> <span class=\"o\">+=</span> <span class=\"n\">operator_esc_string_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">str</span> <span class=\"o\">+=</span> <span class=\"s\">\"$)|\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">erase</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">str</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>由于某种原因，遇到“a|aa”这样的正则表达式后，std::regex只会识别出a，它是非贪婪的，这个问题没法解决，所以只能按操作符长度对所有的操作符进行分类，确保同类中没有重复前缀。</p><p>构造完操作符的正则表达式后，用来解析：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">lexer_t</span> <span class=\"n\">CLexer</span><span class=\"o\">::</span><span class=\"n\">next_operator</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"n\">i</span> <span class=\"o\">&amp;gt;=</span> <span class=\"n\">length</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex_search</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cbegin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cbegin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">sm</span><span class=\"p\">,</span> <span class=\"n\">r_operator</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">();</span>\n            <span class=\"k\">auto</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">auto</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">distance</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">find_if</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">sm</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"n\">match_pred</span><span class=\"p\">));</span>\n            <span class=\"n\">j</span> <span class=\"o\">+=</span> <span class=\"n\">lexer_operator_start_idx</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_operator</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">operator_t</span><span class=\"p\">)(</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">());</span>\n            <span class=\"k\">return</span> <span class=\"n\">l_operator</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// ignore error</span>\n    <span class=\"c1\">// assert(!\"operator not match\");</span>\n    <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>识别操作符是Lexer的最后一环节，如果还不通过的话，就无视它，标记为error。后面会将这些错误保存在list中。</p><h2>阶段性总结</h2><p>那么经过两周的努力，一个萌萌哒Lexer就大功告成了~</p><p>这个Lexer是与众不同的，因为它比较懒，用regex去匹配原串了，让代码更精简。借助LL(1)的解析，让层次更清晰。</p><p>后面的话，需要做parser以便解析C语言的语法，不过由于本人水平较渣，像指针这类变态语法还未曾思考过如何去解析，看来这注定是一场LL与LR的妥协。不过这个项目于我的突破就是LL以及解析指针/强制转换的语法问题，后者是因为解析后的语法树可以有歧义，需要选择正确的一个，所以——回溯看来是不可避免的。</p><p>后面的指令集我就自己设计去了，然后运行程序的时候，我想再增加个分页机制和用于内存申请的内存池，把先前学习的内容再用上一遍，想起来就美滋滋的。虽然这样导致程序运行速度变慢，不过无所谓，解释器嘛。</p>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":26331043,"publishedTime":"2017-04-12T23:34:48+08:00","url":"/p/26331043","title":"【Parser系列】Lexer III","summary":"写在前面<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/CParser/releases/tag/v0.1\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/CParser<i class=\"icon-external\"></i></a> 赶了一天工，把Lexer完成了，现在，Lexer可以毫不羞涩地解析<a href=\"http://link.zhihu.com/?target=https%3A//github.com/dropbox/json11\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">dropbox/json11<i class=\"icon-external\"></i></a>了。虽然json11是C++的代码，Lexer还是可以解析的。部分结果如题图。运行的话，用VS2015编译（Release快一点），然后运行即可，它会读取工程目录下的text/j…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0}},"commentsCount":9,"likesCount":6,"FULLINFO":true}},"User":{"bajdcc":{"isFollowed":false,"name":"陈安","headline":"专业研究野生技术 https://github.com/bajdcc","avatarUrl":"https://pic4.zhimg.com/v2-cd6d61ad9ef94c41b9e77f8e0f727893_s.jpg","isFollowing":false,"type":"people","slug":"bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","profileUrl":"https://www.zhihu.com/people/bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false,"badge":{"identity":null,"bestAnswerer":null}}},"Comment":{},"favlists":{}},"me":{},"global":{},"columns":{"learncpp":{"following":false,"canManage":false,"href":"/api/columns/learncpp","name":"从零开始构建标准库","creator":{"slug":"bajdcc"},"url":"/learncpp","slug":"learncpp","avatar":{"id":"v2-bf63794c542fc73b11e17014b7e0d01d","template":"https://pic2.zhimg.com/{id}_{size}.jpg"}}},"columnPosts":{},"postComments":{},"postReviewComments":{"comments":[],"newComments":[],"hasMore":true},"favlistsByUser":{},"favlistRelations":{},"promotions":{}}</textarea>

    <script src="//static.zhihu.com/hemingway/common.269c40e8655bf81740fd.js"></script>
<script src="//static.zhihu.com/hemingway/app.3e4cffb648892455be81.js"></script>
<script src="//static.zhihu.com/hemingway/raven.e2158dde2067fd0d67db.js" async defer></script>
  </body>
</html>
