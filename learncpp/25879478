<!doctype html>
<html lang="zh-CN">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>【LeetCode】065-验证数字 - 知乎专栏</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link rel="shortcut icon" href="https://static.zhihu.com/static/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="//static.zhihu.com/hemingway/app.79ee58592781f37f89cf23e10f1f9ff0.css" />
    <script>document.documentElement.className += ('ontouchstart' in window) ? ' touch' : ' no-touch'</script>
  </head>
  <body>

    <div id="react-root"></div>
    <textarea id="clientConfig" hidden>{"debug":false,"apiRoot":"","paySDK":"https://pay.zhihu.com/api/js","name":"production","instance":"column","tokens":{"X-XSRF-TOKEN":null,"X-UDID":null,"Authorization":"oauth c3cef7c66a1843f8b3a9e6a1e3160e20"}}</textarea>
    <textarea id="preloadedState" hidden>{"database":{"Post":{"25879478":{"title":"【LeetCode】065-验证数字","author":"bajdcc","content":"<h2>写在前面</h2><p>前面研究OS的经历实在是令人心力憔悴。。所以换个新鲜的，把自己的刷题感悟整理一番。刷了有些题了，就先拿最近几天hard题打头阵吧。首先说的是(065)Valid Number这个题，其实一眼看起来很简单，不就是for/while/if/else吗？那么你可能不知道这道题其实有一个更加简(bian)洁(tai)的方法，听我慢慢道来。</p><h2>题目要求</h2><blockquote><p>Validate if a given string is numeric.</p><p>Some examples: \"0\" =&amp;gt; true \" 0.1 \" =&amp;gt; true \"abc\" =&amp;gt; false \"1 a\" =&amp;gt; false \"2e10\" =&amp;gt; true</p><p>Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.</p></blockquote><h2>常规解法</h2><p><a href=\"http://link.zhihu.com/?target=http%3A//www.cnblogs.com/tonyluis/p/4507515.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Java for LeetCode 065 Valid Number<i class=\"icon-external\"></i></a>：<br></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">public</span> <span class=\"n\">boolean</span> <span class=\"nf\">isNumber</span><span class=\"p\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">trim</span><span class=\"p\">();</span>\n    <span class=\"n\">String</span><span class=\"p\">[]</span> <span class=\"n\">splitArr</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">\"e\"</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">charAt</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"sc\">'e'</span>\n            <span class=\"o\">||</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">charAt</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"sc\">'e'</span> <span class=\"o\">||</span> <span class=\"n\">splitArr</span><span class=\"p\">.</span><span class=\"n\">length</span> <span class=\"o\">&amp;gt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">k</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">splitArr</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">;</span> <span class=\"n\">k</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">String</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"n\">splitArr</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n        <span class=\"n\">boolean</span> <span class=\"n\">isDecimal</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">charAt</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"sc\">'-'</span> <span class=\"o\">||</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">charAt</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"sc\">'+'</span><span class=\"p\">)</span>\n            <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">substring</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"sc\">'0'</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">charAt</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">charAt</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">&amp;lt;=</span> <span class=\"sc\">'9'</span><span class=\"p\">)</span>\n                <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">charAt</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"sc\">'.'</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"o\">!</span><span class=\"n\">isDecimal</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">&amp;gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                    <span class=\"n\">isDecimal</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n                <span class=\"k\">else</span>\n                    <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span>\n                <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>对常规解法的评价</h2><p>只要会点C++，那么常规解法就不在话下，其实就是手动实现一遍itoa而已。</p><p><b>常规解法的优点是：门槛低/常人写得出/容易修改，也就是定制性好/扩展性差。</b></p><p>同时，<b>它的缺点是：一旦验证逻辑变复杂，那就gg了。</b>比如我想把复数也算进去啊，那又得改那堆杂七杂八的代码，令人感觉不会再爱了。</p><h2>正则表达式</h2><p><a href=\"http://link.zhihu.com/?target=http%3A//deerchao.net/tutorials/regex/regex.htm\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">正则表达式30分钟入门教程<i class=\"icon-external\"></i></a>总结得比较好。简单来说，正则表达式（regex）可以表示一个特定的词法（<a href=\"http://link.zhihu.com/?target=http%3A//blog.csdn.net/nic_r/article/details/7835908\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">编译原理之词法分析、语法分析、语义分析 - nic_r的专栏 - 博客频道 - CSDN.NET<i class=\"icon-external\"></i></a>），如整数、实数、复数、邮箱地址、电话号码等。regex除了有匹配的功能之外，它还带有替换/解析功能，这样，能够满足涉及字符串操作的大多数需求。</p><p>比如，匹配方面，涉及用户名匹配、邮箱地址的匹配等，如果这时你用常规解法就太臃肿、太麻烦了。替换/解析方面，如解析HTML/XML/JSON等，比如便捷。</p><p>那么正则表达式与常规解法有什么不同呢？</p><p>刚才提到，常规解法虽然容易修改，但它的扩展性不足，我想更改一点需求，就要大刀阔斧改代码，令人不会再爱。那么如何解决这个扩展性的问题呢？那就需要将算法给抽象出来。</p><p>如果单用if/else/while/for做一个邮箱匹配，这时又需要做一个数字匹配功能，那么这两种代码是八竿子打不着的，根本没法子复用代码啊，怎么办呢？</p><p>其实稍微用脑子想一想——你写的爬虫程序和他写的游戏程序也是风马牛不相及吧？但是编译器将它们翻译成汇编语言后，是不是又有共同点了？比如都有Jump跳转啊，有mov啊，相似度瞬间提高。这里面的原理是什么呢？原来杂七杂八的代码间，通过编译器的翻译，竟然变成了两份差不多的汇编代码（指用的指令大体相似）。那么方法是翻译吗？</p><p>也就是说，原始的两种内容不同的代码，可能甲有着C++的高级特性，乙又是C写的，它们翻译成汇编后，用到的指令有99%都是相同的。反过来，如果我以汇编语言为标准，来表示甲和乙，那么这时候两者的代码有99%是相似的。<b>这时，我们发现了可重用性！</b></p><p>回过头来，想一想，假如有一种语言a可以表达数字、邮箱地址，那我们就不需要再写不同的C/C++代码了，即：<b>有一种机制将你的语言a的表达式翻译成对应的代码，运行这个代码，可以完成匹配工作。</b>这不就是编译器干的事么？</p><p>啰嗦了那么多，其实意思就是：<b><u>想要增加两种功能不同的代码之间的相似程度，必须从代码中的相同点/不同点抽象出一种崭新的语言，用这种崭新的语言可以以统一的语法形式来表达这两份代码。</u></b><br></p><p><u>而正则表达式，正是一种崭新的语言。</u>涉及正则表达式的语法、使用、解析，及NFA、DFA等知识这里不再赘述，请参阅专业书籍或是一些博客。</p><p>大致步骤是：</p><ol><li>输入正则表达式串pat</li><li>根据手写的LL1解析pat，生成AST</li><li>根据AST构建NFA，添加Epsilon边</li><li>从NFA转换为DFA，合并状态，确定终态</li><li>DFA最小化，生成状态转移矩阵</li><li>根据状态转移矩阵进行匹配</li></ol><br><h2>轮子的用武之地</h2><p>还好自己的<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMinilang\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bajdcc/jMini</span><span class=\"invisible\">lang</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>中有生成DFA的代码。</p><p>正则匹配部分在<b>priv.bajdcc.util.lexer.test.TestRegex</b>，直接运行它，然后输入上述正则表达式，那么具体信息就出来了。</p><p>详细信息（程序自动生成）：</p><br><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>#### 正则表达式语法树 ####\n序列 {\n\t循环{0,-1} {\n\t\t字符\t[\\u0020,' ']\n\t}\n\t循环{0,1} {\n\t\t字符\t[\\u002b,'+'],[\\u002d,'-']\n\t}\n\t分支 {\n\t\t序列 {\n\t\t\t循环{0,-1} {\n\t\t\t\t字符\t[\\u0030,'0']-[\\u0039,'9']\n\t\t\t}\n\t\t\t循环{0,1} {\n\t\t\t\t字符\t[\\u002e,'.']\n\t\t\t}\n\t\t\t循环{1,-1} {\n\t\t\t\t字符\t[\\u0030,'0']-[\\u0039,'9']\n\t\t\t}\n\t\t}\n\t\t序列 {\n\t\t\t循环{1,-1} {\n\t\t\t\t字符\t[\\u0030,'0']-[\\u0039,'9']\n\t\t\t}\n\t\t\t循环{0,1} {\n\t\t\t\t字符\t[\\u002e,'.']\n\t\t\t}\n\t\t\t循环{0,-1} {\n\t\t\t\t字符\t[\\u0030,'0']-[\\u0039,'9']\n\t\t\t}\n\t\t}\n\t}\n\t循环{0,1} {\n\t\t序列 {\n\t\t\t字符\t[\\u0065,'e']\n\t\t\t循环{0,1} {\n\t\t\t\t字符\t[\\u002b,'+'],[\\u002d,'-']\n\t\t\t}\n\t\t\t循环{1,-1} {\n\t\t\t\t字符\t[\\u0030,'0']-[\\u0039,'9']\n\t\t\t}\n\t\t}\n\t}\n\t循环{0,-1} {\n\t\t字符\t[\\u0020,' ']\n\t}\n}\n\n#### 状态集合 ####\n[\\u0020,' ']\n[\\u002b,'+']\n[\\u002d,'-']\n[\\u002e,'.']\n[\\u0030,'0']-[\\u0039,'9']\n[\\u0065,'e']\n#### 最小化 ####\n状态[0] =&amp;gt; 0,\n\t边 =&amp;gt; [1]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0030,'0']-[\\u0039,'9']\n\t边 =&amp;gt; [0]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0020,' ']\n\t边 =&amp;gt; [2]\n\t\t类型 =&amp;gt; 字符区间\t[\\u002e,'.']\n\t边 =&amp;gt; [3]\n\t\t类型 =&amp;gt; 字符区间\t[\\u002b,'+']\n\t边 =&amp;gt; [3]\n\t\t类型 =&amp;gt; 字符区间\t[\\u002d,'-']\n状态[1][结束] =&amp;gt; 3,4,6,\n\t边 =&amp;gt; [4]\n\t\t类型 =&amp;gt; 字符区间\t[\\u002e,'.']\n\t边 =&amp;gt; [5]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0065,'e']\n\t边 =&amp;gt; [6]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0020,' ']\n\t边 =&amp;gt; [1]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0030,'0']-[\\u0039,'9']\n状态[2] =&amp;gt; 5,\n\t边 =&amp;gt; [7]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0030,'0']-[\\u0039,'9']\n状态[3] =&amp;gt; 2,\n\t边 =&amp;gt; [2]\n\t\t类型 =&amp;gt; 字符区间\t[\\u002e,'.']\n\t边 =&amp;gt; [1]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0030,'0']-[\\u0039,'9']\n状态[4][结束] =&amp;gt; 5,8,\n\t边 =&amp;gt; [5]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0065,'e']\n\t边 =&amp;gt; [6]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0020,' ']\n\t边 =&amp;gt; [4]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0030,'0']-[\\u0039,'9']\n状态[5] =&amp;gt; 10,\n\t边 =&amp;gt; [8]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0030,'0']-[\\u0039,'9']\n\t边 =&amp;gt; [9]\n\t\t类型 =&amp;gt; 字符区间\t[\\u002b,'+']\n\t边 =&amp;gt; [9]\n\t\t类型 =&amp;gt; 字符区间\t[\\u002d,'-']\n状态[6][结束] =&amp;gt; 11,\n\t边 =&amp;gt; [6]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0020,' ']\n状态[7][结束] =&amp;gt; 6,\n\t边 =&amp;gt; [5]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0065,'e']\n\t边 =&amp;gt; [7]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0030,'0']-[\\u0039,'9']\n\t边 =&amp;gt; [6]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0020,' ']\n状态[8][结束] =&amp;gt; 14,\n\t边 =&amp;gt; [6]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0020,' ']\n\t边 =&amp;gt; [8]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0030,'0']-[\\u0039,'9']\n状态[9] =&amp;gt; 13,\n\t边 =&amp;gt; [8]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0030,'0']-[\\u0039,'9']\n\n#### 状态转移矩阵 ####\n\t0\t3\t3\t2\t1\t-1\n\t6\t-1\t-1\t4\t1\t5\n\t-1\t-1\t-1\t-1\t7\t-1\n\t-1\t-1\t-1\t2\t1\t-1\n\t6\t-1\t-1\t-1\t4\t5\n\t-1\t9\t9\t-1\t8\t-1\n\t6\t-1\t-1\t-1\t-1\t-1\n\t6\t-1\t-1\t-1\t7\t5\n\t6\t-1\t-1\t-1\t8\t-1\n\t-1\t-1\t-1\t-1\t8\t-1\n</code></pre></div><h2>解决方案</h2><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n    <span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"n\">getCharMap</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">&amp;amp;</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">case</span> <span class=\"sc\">' '</span><span class=\"o\">:</span>\n                <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'+'</span><span class=\"o\">:</span>\n                <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'-'</span><span class=\"o\">:</span>\n                <span class=\"k\">return</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'.'</span><span class=\"o\">:</span>\n                <span class=\"k\">return</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'0'</span><span class=\"o\">:</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'1'</span><span class=\"o\">:</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'2'</span><span class=\"o\">:</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'3'</span><span class=\"o\">:</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'4'</span><span class=\"o\">:</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'5'</span><span class=\"o\">:</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'6'</span><span class=\"o\">:</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'7'</span><span class=\"o\">:</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'8'</span><span class=\"o\">:</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'9'</span><span class=\"o\">:</span>\n                <span class=\"k\">return</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'e'</span><span class=\"o\">:</span>\n                <span class=\"k\">return</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">isNumber</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">using</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"kt\">int</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)[</span><span class=\"mi\">6</span><span class=\"p\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mm</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"mi\">0</span>\t<span class=\"p\">,</span><span class=\"mi\">3</span>\t<span class=\"p\">,</span><span class=\"mi\">3</span>\t<span class=\"p\">,</span><span class=\"mi\">2</span>\t<span class=\"p\">,</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"mi\">6</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"mi\">4</span>\t<span class=\"p\">,</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                <span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"mi\">7</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"mi\">2</span>\t<span class=\"p\">,</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"mi\">6</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"mi\">4</span>\t<span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                <span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"mi\">9</span>\t<span class=\"p\">,</span><span class=\"mi\">9</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"mi\">8</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"mi\">6</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"mi\">6</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"mi\">7</span>\t<span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                <span class=\"mi\">6</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"mi\">8</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"mi\">8</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"p\">};</span>\n        <span class=\"k\">auto</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"n\">mm</span><span class=\"p\">;</span>\n        <span class=\"kt\">bool</span> <span class=\"k\">final</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">};</span>\n        <span class=\"kt\">int</span> <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">auto</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">();</span>\n        <span class=\"k\">for</span> <span class=\"p\">(;;)</span> <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"n\">local</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">c</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"kt\">int</span> <span class=\"n\">charClass</span> <span class=\"o\">=</span> <span class=\"n\">getCharMap</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">);</span>\n            <span class=\"kt\">int</span> <span class=\"n\">refer</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">charClass</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">refer</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"n\">status</span><span class=\"p\">][</span><span class=\"n\">charClass</span><span class=\"p\">];</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">refer</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">local</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"k\">final</span><span class=\"p\">[</span><span class=\"n\">status</span><span class=\"p\">];</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">refer</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div>","updated":"2017-03-20T08:54:35.000Z","canComment":false,"commentPermission":"anyone","commentCount":1,"collapsedCount":0,"likeCount":2,"state":"published","isLiked":false,"slug":"25879478","isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic1.zhimg.com/v2-cff4e31091fe0b54552a443b85a78df0_r.png","links":{"comments":"/api/posts/25879478/comments"},"reviewers":[],"topics":[{"url":"https://www.zhihu.com/topic/19577832","id":"19577832","name":"正则表达式"},{"url":"https://www.zhihu.com/topic/19925162","id":"19925162","name":"Leetcode"},{"url":"https://www.zhihu.com/topic/19945414","id":"19945414","name":"状态机"}],"titleImageSize":{"width":1366,"height":546},"href":"/api/posts/25879478","excerptTitle":"","column":{"slug":"learncpp","name":"从零开始构建标准库"},"tipjarState":"inactivated","sourceUrl":"","pageCommentsCount":1,"snapshotUrl":"","publishedTime":"2017-03-20T16:54:35+08:00","url":"/p/25879478","lastestLikers":[{"profileUrl":"https://www.zhihu.com/people/lin-chang-xiao","bio":"","hash":"ed2699ac0ffba3a8f8a535772caee0c3","uid":52215658053632,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"lin-chang-xiao","avatar":{"id":"94bfeb3d6d9e0041e7856236a447d20e","template":"https://pic3.zhimg.com/{id}_{size}.jpg"},"name":"林长晓"},{"profileUrl":"https://www.zhihu.com/people/si-ma-chi-jun","bio":null,"hash":"f12f510c6209b5f7b80039f8d0d6097a","uid":718212500746678300,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"si-ma-chi-jun","avatar":{"id":"v2-0d97c60a8ffebbed876c69be136919b2","template":"https://pic3.zhimg.com/{id}_{size}.jpg"},"name":"Nutshelly"}],"summary":"写在前面前面研究OS的经历实在是令人心力憔悴。。所以换个新鲜的，把自己的刷题感悟整理一番。刷了有些题了，就先拿最近几天hard题打头阵吧。首先说的是(065)Valid Number这个题，其实一眼看起来很简单，不就是for/while/if/else吗？那么你可能不知道这道题…","reviewingCommentsCount":0,"meta":{"previous":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic1.zhimg.com/v2-1089bf810224a8e1ac3e6b9c5d674e44_r.png","links":{"comments":"/api/posts/25867829/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19614193","id":"19614193","name":"Linux 内核"},{"url":"https://www.zhihu.com/topic/19552686","id":"19552686","name":"操作系统"},{"url":"https://www.zhihu.com/topic/19561633","id":"19561633","name":"C（编程语言）"}],"href":"/api/posts/25867829","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<h2>写在前面</h2><p>添油加醋系列第二弹——剖析GDT</p><p>头文件：<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/MiniOS/blob/master/include/gdt.h\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bajdcc/MiniO</span><span class=\"invisible\">S/blob/master/include/gdt.h</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br></p><p>实现：<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/MiniOS/blob/master/src/kernel/gdt.c\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bajdcc/MiniO</span><span class=\"invisible\">S/blob/master/src/kernel/gdt.c</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br></p><p>话说C语言的话除了刷刷OJ外，就是用来实现操作系统这个大头了。C语言比C++少了很多很多臃肿的语法特性，写起来非常优美（至少写操作系统是这样的）。虽说C++有许多的奇技淫巧，一个算法有N种实现方法，但这会让选择恐惧症患者（比如我）难堪，比如说一个类要怎样写啊等等，，抛开其他不谈，假如一个语言的语法特性越少，学起来可能越简单（刚试过lua语法很简单）。OK废话不多说，进入本章主题（涉及OS的资料很杂很偏，如有错误望海涵）。</p><h2>GDT的构成</h2><p>这个网址不错（英文的）：<a href=\"http://link.zhihu.com/?target=http%3A//wiki.osdev.org/GDT\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Global Descriptor Table<i class=\"icon-external\"></i></a></p><p>首先，根据网上资料，GDT（全局描述符表）又叫段描述符表，暂且就这样认为吧，如有异议可以提出来。</p><p>一个GDT可能是这样的（<a href=\"http://link.zhihu.com/?target=http%3A//blog.csdn.net/billpig/article/details/5833980\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GDT与LDT - Lan'Sir - 博客频道 - CSDN.NET<i class=\"icon-external\"></i></a>）：</p><img src=\"http://pic2.zhimg.com/v2-6d7ed4310b1767e534fb1c8b69ca276d_b.png\" data-rawwidth=\"342\" data-rawheight=\"62\" class=\"content_image\" width=\"342\"><p>同样也是这样的（<a href=\"http://link.zhihu.com/?target=http%3A//wiki.osdev.org/GDT\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Global Descriptor Table<i class=\"icon-external\"></i></a>）：</p><p><img src=\"http://pic2.zhimg.com/v2-7d368769d159149aa35949405a91d08d_b.png\" data-rawwidth=\"512\" data-rawheight=\"192\" class=\"origin_image zh-lightbox-thumb\" width=\"512\" data-original=\"http://pic2.zhimg.com/v2-7d368769d159149aa35949405a91d08d_r.png\">在代码中它又是这样：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"c1\">// 全局描述符表结构 http://www.cnblogs.com/hicjiajia/archive/2012/05/25/2518684.html</span>\n<span class=\"c1\">// base: 基址（注意，base的byte是分散开的）</span>\n<span class=\"c1\">// limit: 寻址最大范围 tells the maximum addressable unit</span>\n<span class=\"c1\">// flags: 标志位 见上面的AC_AC等</span>\n<span class=\"c1\">// access: 访问权限</span>\n<span class=\"k\">struct</span> <span class=\"n\">gdt_entry</span> <span class=\"p\">{</span>\n    <span class=\"kt\">uint16_t</span> <span class=\"n\">limit_low</span><span class=\"p\">;</span>       \n    <span class=\"kt\">uint16_t</span> <span class=\"n\">base_low</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint8_t</span> <span class=\"n\">base_middle</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint8_t</span> <span class=\"n\">access</span><span class=\"p\">;</span>\n    <span class=\"kt\">unsigned</span> <span class=\"nl\">limit_high</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n    <span class=\"kt\">unsigned</span> <span class=\"nl\">flags</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint8_t</span> <span class=\"n\">base_high</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">packed</span><span class=\"p\">));</span>\n</code></pre></div><p>这时你的内心OS：</p><p><img src=\"http://pic2.zhimg.com/v2-6fd09b3a1294779cd3eb430df2c732fd_b.png\" data-rawwidth=\"485\" data-rawheight=\"322\" class=\"origin_image zh-lightbox-thumb\" width=\"485\" data-original=\"http://pic2.zhimg.com/v2-6fd09b3a1294779cd3eb430df2c732fd_r.png\">答案是——它们都是GDT。。</p><p><b>关于C语言的问题</b>：首先，可能有些童鞋不知道struct里那些冒号是神马意思。（<a href=\"http://link.zhihu.com/?target=http%3A//blog.csdn.net/aoshilang2249/article/details/37819173\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">C语言 struct结构体的变量声明加冒号<i class=\"icon-external\"></i></a>）这里叫作“<b>位域</b>”，就是占几个二进制位。同时，它又涉及内存对齐的概念（<a href=\"http://link.zhihu.com/?target=http%3A//blog.csdn.net/xing_hao/article/details/6678048\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">C语言 结构体的内存对齐问题与位域<i class=\"icon-external\"></i></a>）。涉及__attribute__((packed))的概念（<a href=\"http://link.zhihu.com/?target=http%3A//www.cnblogs.com/astwish/p/3460618.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">__attribute__ 你知多少？<i class=\"icon-external\"></i></a>）它是手动设置对齐大小。</p><p>众所周知，一个字节byte是八个bit，那么结构体中有两个4bit的成员，不可能用16bit去容纳它们吧~让它们互相挤挤，节省空间，何乐而不为。</p><p>可能看到这里，已经花了好多时间了……没办法，OS的内容非常多，同时GCC的一些怪异偏僻用法又不得不去领会，所以只能一步步来，慢慢理解，急不得。</p><p>至于GDT为什么这样描述呢，我自创行不行？一个字——标准，你想改，可能你电脑里的硬件设施不答应……</p><h2>GDT的存在意义</h2><p>（<a href=\"http://link.zhihu.com/?target=http%3A//www.cnblogs.com/hicjiajia/archive/2012/05/25/2518684.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GDT 与 LDT - hicjiajia - 博客园<i class=\"icon-external\"></i></a>）描述得很清楚。<br></p><blockquote><strong>全局描述符表GDT（Global Descriptor Table）</strong>在整个系统中，全局描述符表GDT<u>只有一张</u>(一个处理器对应一个GDT)，GDT可以被放在内存的<u>任何位置</u>，但CPU必须知道GDT的<u>入口</u>，也就是<u>基地址</u>放在哪里，Intel的设计者门提供了一个<b>寄存器GDTR</b>用来存放GDT的入口地址，程序员将GDT设定在内存中某个位置之后，可以通过<b>LGDT指令</b>将GDT的入口地址装入此寄存器，从此以后，CPU就根据此寄存器中的内容作为GDT的入口来访问GDT了。GDTR中存放的是GDT在内存中的<u>基地址和其表长界限</u>。</blockquote>也就是说，GDT是全局的，存放在内存中的某个位置，而这个位置是由你来指定给CPU的，换句话说，你来钦定！<h2>设置GDT</h2><p>现在知道了GDT的struct构成（就是一个个数组元素），那么我们要给CPU的就是一个gdt_entry数组地址啦~</p><p>那么设置gdt_entry的方法如下：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"kt\">void</span> <span class=\"nf\">gdt_install</span><span class=\"p\">(</span><span class=\"kt\">uint8_t</span> <span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"kt\">uint32_t</span> <span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"kt\">uint32_t</span> <span class=\"n\">limit</span><span class=\"p\">,</span> <span class=\"kt\">uint8_t</span> <span class=\"n\">access</span><span class=\"p\">,</span> <span class=\"kt\">uint8_t</span> <span class=\"n\">flags</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"cm\">/* Setup the descriptor base address */</span>\n    <span class=\"n\">gdt</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">].</span><span class=\"n\">base_low</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">base</span> <span class=\"o\">&amp;amp;</span> <span class=\"mh\">0xffff</span><span class=\"p\">);</span>\n    <span class=\"n\">gdt</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">].</span><span class=\"n\">base_middle</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">base</span> <span class=\"o\">&amp;gt;&amp;gt;</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"o\">&amp;amp;</span> <span class=\"mh\">0xff</span><span class=\"p\">;</span>\n    <span class=\"n\">gdt</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">].</span><span class=\"n\">base_high</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">base</span> <span class=\"o\">&amp;gt;&amp;gt;</span> <span class=\"mi\">24</span><span class=\"p\">)</span> <span class=\"o\">&amp;amp;</span> <span class=\"mh\">0xff</span><span class=\"p\">;</span>\n\n    <span class=\"cm\">/* Setup the descriptor limits */</span>\n    <span class=\"n\">gdt</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">].</span><span class=\"n\">limit_low</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">limit</span> <span class=\"o\">&amp;amp;</span> <span class=\"mh\">0xffff</span><span class=\"p\">);</span>\n    <span class=\"n\">gdt</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">].</span><span class=\"n\">limit_high</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">limit</span> <span class=\"o\">&amp;gt;&amp;gt;</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"o\">&amp;amp;</span> <span class=\"mh\">0x0f</span><span class=\"p\">);</span>\n\n    <span class=\"cm\">/* Finally, set up the granularity and access flags */</span>\n    <span class=\"n\">gdt</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">].</span><span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">flags</span><span class=\"p\">;</span>\n\n    <span class=\"n\">access</span> <span class=\"o\">|=</span> <span class=\"n\">AC_RE</span><span class=\"p\">;</span> <span class=\"c1\">// 设置保留位为1</span>\n    <span class=\"n\">gdt</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">].</span><span class=\"n\">access</span> <span class=\"o\">=</span> <span class=\"n\">access</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>通过实例认识它：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"c1\">// 宏定义</span>\n\n<span class=\"cp\">#define AC_AC 0x1       </span><span class=\"c1\">// 可访问 access</span>\n<span class=\"cp\">#define AC_RW 0x2       </span><span class=\"c1\">// [代码]可读；[数据]可写 readable for code selector &amp;amp; writeable for data selector</span>\n<span class=\"cp\">#define AC_DC 0x4       </span><span class=\"c1\">// 方向位 direction</span>\n<span class=\"cp\">#define AC_EX 0x8       </span><span class=\"c1\">// 可执行 executable, code segment</span>\n<span class=\"cp\">#define AC_RE 0x10      </span><span class=\"c1\">// 保留位 reserve</span>\n<span class=\"cp\">#define AC_PR 0x80      </span><span class=\"c1\">// 有效位 persent in memory</span>\n\n<span class=\"c1\">// 特权位： 01100000b</span>\n<span class=\"cp\">#define AC_DPL_KERN 0x0  </span><span class=\"c1\">// RING 0 kernel level</span>\n<span class=\"cp\">#define AC_DPL_USER 0x60 </span><span class=\"c1\">// RING 3 user level</span>\n\n<span class=\"cp\">#define GDT_GR  0x8     </span><span class=\"c1\">// 页面粒度 page granularity, limit in 4k blocks</span>\n<span class=\"cp\">#define GDT_SZ  0x4     </span><span class=\"c1\">// 大小位 size bt, 32 bit protect mode</span>\n\n<span class=\"c1\">// gdt selector 选择子</span>\n<span class=\"cp\">#define SEL_KCODE   0x1 </span><span class=\"c1\">// 内核代码段</span>\n<span class=\"cp\">#define SEL_KDATA   0x2 </span><span class=\"c1\">// 内核数据段</span>\n<span class=\"cp\">#define SEL_UCODE   0x3 </span><span class=\"c1\">// 用户代码段</span>\n<span class=\"cp\">#define SEL_UDATA   0x4 </span><span class=\"c1\">// 用户数据段</span>\n<span class=\"cp\">#define SEL_TSS     0x5 </span><span class=\"c1\">// 任务状态段 task state segment http://wiki.osdev.org/TSS</span>\n\n<span class=\"c1\">// RPL 请求特权等级 request privilege level</span>\n<span class=\"cp\">#define RPL_KERN    0x0</span>\n<span class=\"cp\">#define RPL_USER    0x3</span>\n\n<span class=\"c1\">// CPL 当前特权等级 current privilege level</span>\n<span class=\"cp\">#define CPL_KERN    0x0</span>\n<span class=\"cp\">#define CPL_USER    0x3</span>\n\n<span class=\"o\">========================================================</span>\n\n<span class=\"cm\">/* Setup the GDT pointer and limit */</span>\n<span class=\"n\">gp</span><span class=\"p\">.</span><span class=\"n\">limit</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">gdt_entry</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">NGDT</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"n\">gp</span><span class=\"p\">.</span><span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"p\">)</span><span class=\"o\">&amp;amp;</span><span class=\"n\">gdt</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/* null descriptor */</span>\n<span class=\"n\">gdt_install</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>  \n<span class=\"cm\">/* kernel code segment type: code addr: 0 limit: 4G gran: 4KB sz: 32bit */</span>\n<span class=\"n\">gdt_install</span><span class=\"p\">(</span><span class=\"n\">SEL_KCODE</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mh\">0xfffff</span><span class=\"p\">,</span> <span class=\"n\">AC_RW</span><span class=\"o\">|</span><span class=\"n\">AC_EX</span><span class=\"o\">|</span><span class=\"n\">AC_DPL_KERN</span><span class=\"o\">|</span><span class=\"n\">AC_PR</span><span class=\"p\">,</span> <span class=\"n\">GDT_GR</span><span class=\"o\">|</span><span class=\"n\">GDT_SZ</span><span class=\"p\">);</span>\n<span class=\"cm\">/* kernel data segment type: data addr: 0 limit: 4G gran: 4KB sz: bit 32bit */</span>\n<span class=\"n\">gdt_install</span><span class=\"p\">(</span><span class=\"n\">SEL_KDATA</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mh\">0xfffff</span><span class=\"p\">,</span> <span class=\"n\">AC_RW</span><span class=\"o\">|</span><span class=\"n\">AC_DPL_KERN</span><span class=\"o\">|</span><span class=\"n\">AC_PR</span><span class=\"p\">,</span> <span class=\"n\">GDT_GR</span><span class=\"o\">|</span><span class=\"n\">GDT_SZ</span><span class=\"p\">);</span> \n<span class=\"cm\">/* user code segment type: code addr: 0 limit: 4G gran: 4KB sz: 32bit */</span>\n<span class=\"n\">gdt_install</span><span class=\"p\">(</span><span class=\"n\">SEL_UCODE</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mh\">0xfffff</span><span class=\"p\">,</span> <span class=\"n\">AC_RW</span><span class=\"o\">|</span><span class=\"n\">AC_EX</span><span class=\"o\">|</span><span class=\"n\">AC_DPL_USER</span><span class=\"o\">|</span><span class=\"n\">AC_PR</span><span class=\"p\">,</span> <span class=\"n\">GDT_GR</span><span class=\"o\">|</span><span class=\"n\">GDT_SZ</span><span class=\"p\">);</span> \n<span class=\"cm\">/* user code segment type: data addr: 0 limit: 4G gran: 4KB sz: 32bit */</span>\n<span class=\"n\">gdt_install</span><span class=\"p\">(</span><span class=\"n\">SEL_UDATA</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mh\">0xfffff</span><span class=\"p\">,</span> <span class=\"n\">AC_RW</span><span class=\"o\">|</span><span class=\"n\">AC_DPL_USER</span><span class=\"o\">|</span><span class=\"n\">AC_PR</span><span class=\"p\">,</span> <span class=\"n\">GDT_GR</span><span class=\"o\">|</span><span class=\"n\">GDT_SZ</span><span class=\"p\">);</span> \n</code></pre></div><p>我的理解是，gdt_install的参数：（段选择子索引号/见题图，基址起始，长度，访问权限，GDT flags）。虽然上述例子中基址起始地址和长度都是一样的（原项目<a href=\"http://link.zhihu.com/?target=https%3A//github.com/SilverRainZ/OS677\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/SilverRainZ/</span><span class=\"invisible\">OS677</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>是这样写的，<u>可能有点问题</u>），但是访问权限中有AC_EX和AC_DPL_KERN(ring0)/AC_DPL_USER(ring3)的变化，说明每个段的权限是不同的。这些段管理的是同一片内存，只是由于当前索引号的不同，访问/修改内存的权限也不同。</p><p>（<a href=\"http://link.zhihu.com/?target=http%3A//www.cnblogs.com/hicjiajia/archive/2012/05/25/2518684.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GDT 与 LDT - hicjiajia - 博客园<i class=\"icon-external\"></i></a>）讲述了分段管理和分页管理：<br></p><blockquote><p>分段管理可以把虚拟地址转换成线性地址，而分页管理可以进一步将线性地址转换成物理地址。</p><p>（根据段选择子找到）段基指 + 偏移地址 =&amp;gt; 线性地址</p><br><p>线性地址 （通过页表） =&amp;gt; 物理地址<br></p></blockquote><p>通过将GDT告诉给CPU后，CPU就知道了操作系统中段的设置，从而可以通过段选择子得到线性地址，在后面实现分页管理后，可进一步将线性地址转换为物理地址（不过当前连物理 址有多大都没法知道呢，在后面会解决）。</p><h2>段选择子</h2><img src=\"http://pic2.zhimg.com/v2-c9ea9406faa3314831f527ef6a0a8d29_b.png\" data-rawwidth=\"289\" data-rawheight=\"136\" class=\"content_image\" width=\"289\"><p>（<a href=\"http://link.zhihu.com/?target=http%3A//www.cnblogs.com/hicjiajia/archive/2012/05/25/2518684.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GDT 与 LDT - hicjiajia - 博客园<i class=\"icon-external\"></i></a>）介绍：<br></p><blockquote><p>段选择子包括三部分：描述符索引（index）、TI（指示从GDT还是LDT中找）、请求特权级（RPL）。</p><ol><li>index部分表示所需要的段的描述符在描述符表的<b>位置</b>，由这个位置再根据在GDTR中存储的描述符表基址就可以找到相应的描述符gdt_entry。然后用描述符gdt_entry中的段基址SEL加上逻辑地址OFFSET就可以转换成线性地址SEL:OFFSET（看下面给的例子应该就是它们的和SEL+OFFSET）<br></li><li>段选择子中的TI值只有一位0或1，0代表选择子是在GDT选择，1代表选择子是在LDT选择。<br></li><li>请求特权级（RPL）则代表选择子的特权级，共有4个特权级（0级、1级、2级、3级），0级最高。关于特权级的说明：任务中的每一个段都有一个特定的级别。每当一个程序试图访问某一个段时，就将该程序所拥有的特权级与要访问的特权级进行比较，以决定能否访问该段。系统约定，<b>CPU只能访问同一特权级或级别较低特权级的段</b>。</li></ol></blockquote><p>例如：</p><blockquote>给出逻辑地址：21h:12345678h，需要将其转换为线性地址<br><br>a. 选择子SEL=21h=0000000000100 0 01b，他代表的意思是：选择子的index=4即100b，选择GDT中的第4个描述符；TI=0代表选择子是在GDT选择；左后的01b代表特权级RPL=1（因此有SEL=n&amp;lt;&amp;lt;3，n是索引号）<br><br>b. OFFSET=12345678h，若此时GDT第四个描述符中描述的段基址（Base）为11111111h，则线性地址=11111111h+12345678h=23456789h</blockquote><h2>任务状态段TSS<br></h2><blockquote>任务寄存器（TR）用于寻址一个特殊的任务状态段（Task State Segment，TSS）。TSS中包含着当前执行任务的重要信息。<p>TR寄存器用于存放当前任务TSS段的16位段选择符、32位基地址、16位段长度和描述符属性值。它引用GDT表中的一个TSS类型的描述符。指令LTR和STR分别用于加载和保存TR寄存器的段选择符部分。当使用LTR指令把选择符加载进任务寄存器时，TSS描述符中的段基地址、段限长度以及描述符属性会被自动加载到任务寄存器中。当执行任务切换时，处理器会把新任务的TSS的段选择符和段描述符自动加载进任务寄存器TR中。</p></blockquote><p>它的初始化和设置：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"kt\">void</span> <span class=\"nf\">tss_init</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">gdt_install</span><span class=\"p\">(</span><span class=\"n\">SEL_TSS</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"p\">)</span><span class=\"o\">&amp;amp;</span><span class=\"n\">tss</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">tss</span><span class=\"p\">),</span><span class=\"n\">AC_PR</span><span class=\"o\">|</span><span class=\"n\">AC_AC</span><span class=\"o\">|</span><span class=\"n\">AC_EX</span><span class=\"p\">,</span> <span class=\"n\">GDT_GR</span><span class=\"p\">);</span> \n    <span class=\"cm\">/* for tss, access_reverse bit is 1 */</span>\n    <span class=\"n\">gdt</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">].</span><span class=\"n\">access</span> <span class=\"o\">&amp;amp;=</span> <span class=\"o\">~</span><span class=\"n\">AC_RE</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 装载TSS</span>\n<span class=\"kt\">void</span> <span class=\"nf\">tss_install</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">__asm__</span> <span class=\"k\">volatile</span><span class=\"p\">(</span><span class=\"s\">\"ltr %%ax\"</span> <span class=\"o\">:</span> <span class=\"o\">:</span> <span class=\"s\">\"a\"</span><span class=\"p\">((</span><span class=\"n\">SEL_TSS</span> <span class=\"o\">&amp;lt;&amp;lt;</span> <span class=\"mi\">3</span><span class=\"p\">)));</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 设置TSS</span>\n<span class=\"kt\">void</span> <span class=\"nf\">tss_set</span><span class=\"p\">(</span><span class=\"kt\">uint16_t</span> <span class=\"n\">ss0</span><span class=\"p\">,</span> <span class=\"kt\">uint32_t</span> <span class=\"n\">esp0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 清空TSS</span>\n    <span class=\"n\">memset</span><span class=\"p\">((</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;amp;</span><span class=\"n\">tss</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">tss</span><span class=\"p\">));</span>\n    <span class=\"n\">tss</span><span class=\"p\">.</span><span class=\"n\">ss0</span> <span class=\"o\">=</span> <span class=\"n\">ss0</span><span class=\"p\">;</span>\n    <span class=\"n\">tss</span><span class=\"p\">.</span><span class=\"n\">esp0</span> <span class=\"o\">=</span> <span class=\"n\">esp0</span><span class=\"p\">;</span>\n    <span class=\"n\">tss</span><span class=\"p\">.</span><span class=\"n\">iopb_off</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">tss</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>跟GDT也差不了多少，只是GDT_SZ没有了，也指定了tss的地址，并设置gdt_entry的保留位为1（至于为啥我没有仔细查）。至于__asm__ volatile的<a href=\"http://link.zhihu.com/?target=http%3A//blog.csdn.net/pbymw8iwm/article/details/8227839\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GCC在C语言中内嵌汇编 asm __volatile__<i class=\"icon-external\"></i></a>我也没全部搞明白怎么用。SEL_TSS &amp;lt;&amp;lt; 3的话要参考选择子的构成，它高13位是索引，所以要乘8。</p><p>关于ltr指令（<a href=\"http://link.zhihu.com/?target=http%3A//blog.sina.com.cn/s/blog_910179e50101hc75.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">设置TSS结构中堆栈信息的 ltr 指令<i class=\"icon-external\"></i></a>）：</p><blockquote>在任务内发生特权级变换时堆栈也随着自动切换，外层堆栈指针保存在内层堆栈中，而内层堆栈指针存放在当前任务的TSS中。所以，在从外层向内层变换时，要访问TSS(从内层向外层转移时不需要访问TSS，而只需访问内层栈中保存的栈指针)。<br> LTR指令是专门用于装载任务状态段寄存器TR的指令。该指令的操作数是对应TSS段描述符的选择子。LTR指令从GDT中取出相应的TSS段描述符，把TSS段描述符的基地址和界限等信息装入TR的高速缓冲寄存器中。</blockquote><p>TSS的构成在<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/MiniOS/blob/master/include/idt.h\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bajdcc/MiniO</span><span class=\"invisible\">S/blob/master/include/idt.h</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>中（看下面的英文注释/<a href=\"http://link.zhihu.com/?target=http%3A//wiki.osdev.org/TSS\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Task State Segment<i class=\"icon-external\"></i></a>，就是说SS0、ESP0比较重要）。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"c1\">// 任务状态段 task state segment http://wiki.osdev.org/TSS</span>\n<span class=\"c1\">// The only interesting fields are SS0 and ESP0.</span>\n<span class=\"c1\">//   SS0 gets the kernel datasegment descriptor (e.g. 0x10 if the third entry in your GDT describes your kernel's data)</span>\n<span class=\"c1\">//   ESP0 gets the value the stack-pointer shall get at a system call</span>\n<span class=\"c1\">//   IOPB may get the value sizeof(TSS) (which is 104) if you don't plan to use this io-bitmap further (according to mystran in http://forum.osdev.org/viewtopic.php?t=13678)</span>\n\n<span class=\"c1\">// http://blog.csdn.net/huybin_wang/article/details/2161886</span>\n<span class=\"c1\">// TSS的使用是为了解决调用门中特权级变换时堆栈发生的变化</span>\n\n<span class=\"c1\">// http://www.kancloud.cn/wizardforcel/intel-80386-ref-manual/123838</span>\n<span class=\"cm\">/*</span>\n<span class=\"cm\">    TSS 状态段由两部分组成：</span>\n<span class=\"cm\">    1、 动态部分（处理器在每次任务切换时会设置这些字段值）</span>\n<span class=\"cm\">        通用寄存器（EAX, ECX, EDX, EBX, ESP, EBP, ESI, EDI）</span>\n<span class=\"cm\">        段寄存器（ES，CS，SS，DS，FS，GS）</span>\n<span class=\"cm\">        状态寄存器（EFLAGS）</span>\n<span class=\"cm\">        指令指针（EIP）</span>\n<span class=\"cm\">        前一个执行的任务的TSS段的选择子（只有当要返回时才更新）</span>\n<span class=\"cm\">    2、 静态字段（处理器读取，但从不更改）</span>\n<span class=\"cm\">        任务的LDT选择子</span>\n<span class=\"cm\">        页目录基址寄存器（PDBR）（当启用分页时，只读）</span>\n<span class=\"cm\">        内层堆栈指针，特权级0-2</span>\n<span class=\"cm\">        T-位，指示了处理器在任务切换时是否引发一个调试异常</span>\n<span class=\"cm\">        I/O 位图基址</span>\n<span class=\"cm\">*/</span>\n<span class=\"k\">struct</span> <span class=\"n\">tss_entry</span> <span class=\"p\">{</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">link</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">esp0</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">ss0</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">esp1</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">ss1</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">esp2</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">ss2</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">cr3</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">eip</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">eflags</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">eax</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">ecx</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">edx</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">ebx</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">esp</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">ebp</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">esi</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">edi</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">es</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">cs</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">ss</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">ds</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">fs</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">gs</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">ldtr</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint16_t</span> <span class=\"n\">padding1</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint16_t</span> <span class=\"n\">iopb_off</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">__attribute__</span> <span class=\"p\">((</span><span class=\"n\">packed</span><span class=\"p\">));</span>\n</code></pre></div><h2>阶段性总结</h2><p>涉及OS的内容真是庞大，单单一个GDT就涉及巨量的知识，包括结构体定义、汇编指令、GCC黑魔法、参数的使用等，还涉及了TSS，目标仅仅是实现分段管理。而后面还有中断管理、物理内存管理、虚拟内存管理等一系列内容，篇幅绝对不比本文少，真令人望洋兴叹。</p><p>原始项目OS67中也存在着一些错误，有些错误像是单词拼写等我已经纠正了，还有些如软盘访问我去参考了网上的资料，与OS67的不一致，但我没采用OS67的。毕竟OS67也是其作者自己摸索出来的，让我跳过了许多坑。。不过我想后面的进程管理还是得自己写才能体会更深。</p><p>既然OS的内容很杂很多，所以也只能挑一些重点的讲讲了，不可能面面俱到，在后面的编写/借鉴中，还是要以查资料为主，给源码附上参考文章的地址，方便阅读。</p>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":25867829,"publishedTime":"2017-03-20T00:09:06+08:00","url":"/p/25867829","title":"【构建操作系统】全局描述符表GDT","summary":"写在前面添油加醋系列第二弹——剖析GDT头文件：<a href=\"https://github.com/bajdcc/MiniOS/blob/master/include/gdt.h\" data-editable=\"true\" data-title=\"github.com 的页面\" class=\"\">https://github.com/bajdcc/MiniOS/blob/master/include/gdt.h</a> 实现：<a href=\"https://github.com/bajdcc/MiniOS/blob/master/src/kernel/gdt.c\" data-editable=\"true\" data-title=\"github.com 的页面\">https://github.com/bajdcc/MiniOS/blob/master/src/kernel/gdt.c</a> 话说C语言的话除了刷刷OJ外，就是用来实现操作系统这个大头了。C语言比C++少了很多很多臃肿的语法特性，写起来非常优美（至少写操作系统是这样的）。虽说C+…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0},"next":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic2.zhimg.com/v2-9d40f235fbbe291b86dbd526dc213361_r.png","links":{"comments":"/api/posts/25888881/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19925162","id":"19925162","name":"Leetcode"},{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"},{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"}],"href":"/api/posts/25888881","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<h2>题目</h2><p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.</p><p>Example:</p><blockquote>Input: \"babad\"<br>Output: \"bab\"<br>Note: \"aba\" is also a valid answer.</blockquote><p>Example:</p><blockquote>Input: \"cbbd\"<br>Output: \"bb\"</blockquote><h2>目前的解法</h2><p>如<a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000003914228\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">最长回文子串--Manacher 算法<i class=\"icon-external\"></i></a>及<a href=\"https://link.zhihu.com/?target=http%3A//www.cnblogs.com/leoin2012/p/3984997.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[转]最长回文子串--4种解法 - 立航 - 博客园<i class=\"icon-external\"></i></a>中所说，有：<br></p><ol><li>BF 暴力破解法<br></li><li>DP 动态规划法</li><li>中心拓展法</li><li>Manacher法</li></ol><p>那么Manacher法应该是复杂度最低的，为O(N)。<br></p><p>然而，，我就是要另寻出（si）路，有没有其他的办法呢？</p><h2>大开脑洞</h2><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/githubwoniu/learnprogram/blob/master/leetcode/05/note_bajdcc.md\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">githubwoniu/learnprogram<i class=\"icon-external\"></i></a><br></p><p><a href=\"https://www.zhihu.com/question/40965749/answer/152514917\" class=\"internal\">最简便的找字符串中最长回文子串的方法是什么？ - 知乎</a><br></p><p><b>下面是优化思路：</b></p><p>首先，一个回文串的字符频度应该是：中点频度最低为1，其他字符频度最低为2。</p><p>那么，<b>如果串中有频度是1的字符，它肯定位于回文串的中心，不然就不属于任何回文串。</b></p><p>因此，按频度可以筛选掉一定量的多余字符，将母串进行<b>分割</b>。分割的好处是<b>子串有界</b>。</p><p>最懒方法：遍历整串，从中心向两侧扩张（中心扩散法）并做比较，取得长度，最后返回最大长度所在的串。</p><p>优化：</p><ul><li>在遍历整串过程中，最大长度maxlen会<b>时刻增加</b>，那么，当分割后的<b>有界子串</b>长度小于最大长度maxlen时，就不需要再去判断了。</li><li>如果串的某个连续子串(len&amp;gt;=2)它们的频度都是1，那么它们就<b>不属于任何回文串</b>，可以快速剔除，节省时间。这是关键。</li><li>其他方法还没想到，欢迎补充。</li></ul><p>所以大体的思路是：</p><ol><li>统计字符频度，用数组表示频数</li><li>找出频度为1的字符a，看以a为单核中心向外扩散，求最长回文；如果没有回文，就将它从串中断开，进行分治；如果回文长度超过记录，就保存它</li><li>然后从左到右查回文，只有长度超过记录，才保存</li><li>第一次串分割完毕后，进行分治，重新统计频度，回到1步骤</li></ol><h2>新方法评价</h2><p>目测新方法的复杂度是高于O(N)的，不过，将分治法运用于本题也算是另辟蹊径了。奇葩方法就是将几种方法揉合在一起，那么本方法结合了：</p><ol><li>递归分治，将频度为1的字符作为<b>可能的分割点</b></li><li>中心扩散，目前最优值N，那么从当前点(P)的P-N和P+N进行比较，先N递减，然后递增<br></li><li>缓存最优解，当前解N，那么小于N的情况就忽略了</li></ol><p>无论如何，本方法就是不修改原始字符串哈哈~</p><h2>上代码</h2><p>用时6ms <a href=\"https://link.zhihu.com/?target=https%3A//leetcode.com/submissions/detail/97501094/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">leetcode.com/submission</span><span class=\"invisible\">s/detail/97501094/</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"mi\">256</span><span class=\"p\">];</span>\n\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"n\">string</span> <span class=\"n\">longestPalindrome</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">str</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">longestPalindrome</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">(),</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"o\">&amp;gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"c1\">//这里改了下</span>\n            <span class=\"k\">return</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">start</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">longestPalindromePartition</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;amp;</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;amp;</span><span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">maxLen</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">maxLen</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">maxStart</span><span class=\"p\">,</span> <span class=\"n\">maxEnd</span><span class=\"p\">,</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">maxLen</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">reserve</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">maxLen</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">reserveEnd</span> <span class=\"o\">=</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">reserve</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"n\">reserve</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">reserveEnd</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">k</span> <span class=\"o\">&amp;gt;=</span> <span class=\"n\">start</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">k</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">k</span><span class=\"p\">])</span>\n                        <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"n\">k</span><span class=\"o\">--</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n                    <span class=\"n\">reserve</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">len</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n                    <span class=\"n\">reserveEnd</span> <span class=\"o\">=</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">reserve</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                    <span class=\"n\">maxStart</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">k</span><span class=\"p\">;</span>\n                    <span class=\"n\">maxEnd</span> <span class=\"o\">=</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">k</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">reserve</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&amp;gt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">])</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">reserve</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">j</span> <span class=\"o\">&amp;gt;=</span> <span class=\"n\">start</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">])</span>\n                        <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"n\">reserve</span> <span class=\"o\">=</span> <span class=\"o\">--</span><span class=\"n\">j</span><span class=\"p\">;</span>\n                <span class=\"n\">reserveEnd</span> <span class=\"o\">=</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">reserve</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">j</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                    <span class=\"n\">maxStart</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">j</span><span class=\"p\">;</span>\n                    <span class=\"n\">maxEnd</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">maxLen</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">maxStart</span><span class=\"p\">;</span>\n            <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">maxEnd</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span> <span class=\"n\">len</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">longestPalindrome</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;amp;</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;amp;</span><span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"o\">==</span> <span class=\"n\">end</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;=</span> <span class=\"mi\">26</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"sc\">'a'</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">auto</span> <span class=\"n\">dups</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"p\">[</span><span class=\"n\">len</span><span class=\"p\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">dupCount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">dups</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">&amp;gt;</span> <span class=\"mi\">1</span> <span class=\"o\">?</span> <span class=\"p\">(</span><span class=\"n\">dupCount</span><span class=\"o\">++</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dups</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">len</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">len</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">tmpStart</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">tmpEnd</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">maxStart</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">maxEnd</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">tmpLen</span><span class=\"p\">,</span> <span class=\"n\">maxLen</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dups</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                <span class=\"n\">tmpStart</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n                <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">dups</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                        <span class=\"n\">tmpEnd</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                        <span class=\"k\">break</span><span class=\"p\">;</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">--</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">tmpEnd</span> <span class=\"o\">=</span> <span class=\"n\">end</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">tmpLen</span> <span class=\"o\">=</span> <span class=\"n\">longestPalindromePartition</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"n\">tmpStart</span><span class=\"p\">,</span> <span class=\"n\">tmpEnd</span><span class=\"p\">,</span> <span class=\"n\">maxLen</span><span class=\"p\">))</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">maxLen</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">maxLen</span> <span class=\"o\">=</span> <span class=\"n\">tmpLen</span><span class=\"p\">;</span>\n                    <span class=\"n\">maxStart</span> <span class=\"o\">=</span> <span class=\"n\">tmpStart</span><span class=\"p\">;</span>\n                    <span class=\"n\">maxEnd</span> <span class=\"o\">=</span> <span class=\"n\">tmpEnd</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">tmpStart</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n                <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dups</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                        <span class=\"n\">tmpEnd</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                        <span class=\"k\">break</span><span class=\"p\">;</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">--</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">tmpEnd</span> <span class=\"o\">=</span> <span class=\"n\">end</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tmpStart</span> <span class=\"o\">==</span> <span class=\"n\">tmpEnd</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">tmpStart</span> <span class=\"o\">&amp;gt;=</span> <span class=\"n\">start</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">tmpEnd</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"o\">--</span><span class=\"n\">tmpStart</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"o\">++</span><span class=\"n\">tmpEnd</span><span class=\"p\">]);</span>\n                    <span class=\"n\">tmpLen</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">tmpEnd</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"o\">++</span><span class=\"n\">tmpStart</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tmpLen</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">maxLen</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"n\">maxLen</span> <span class=\"o\">=</span> <span class=\"n\">tmpLen</span><span class=\"p\">;</span>\n                        <span class=\"n\">maxStart</span> <span class=\"o\">=</span> <span class=\"n\">tmpStart</span><span class=\"p\">;</span>\n                        <span class=\"n\">maxEnd</span> <span class=\"o\">=</span> <span class=\"n\">tmpEnd</span><span class=\"p\">;</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">maxStart</span><span class=\"p\">;</span>\n        <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">maxEnd</span><span class=\"p\">;</span>\n        <span class=\"k\">delete</span><span class=\"p\">[]</span><span class=\"n\">dups</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">maxLen</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div><h2>阶段性总结</h2><p>奇葩方法花了两天时间去实现，不追求啥，就是好玩。。不去照着实现现有的算法，也是一种乐趣啊，为什么一直要走别人的路呢？当自己设计算法、设计架构、设计界面的时候，才真正是一种创作/创造的过程，才是真正的乐趣所在呢。不过，在这之前，你得首先入门吧~记得好声音中的一句话，一开始你被音乐玩，后来你才能玩音乐，编程何尝不是如此呢？</p><p><b>人生三大境界：</b></p><ol><li><b><u>搬砖的境界。</u></b>机械地、条件反射地、枯燥地、重复地劳动，做一件事，为的是把一件小事做熟练、做通透。虽然境界很low，但是有10000小时理论啊，这是不可避免的过程。但是，熟能生巧，在这一境界做出成就后，才能跃升至下一境界。[多维空间某一点]<br></li><li><b><u>统筹的境界。</u></b>能够把许多件小事安排好，规划好优先级，就像知道造一座房子所需的一系列步骤，把它按部就班去完成。懂得取舍，抓住要点，目光不再短浅。许多知识融会贯通，信手拈来。[局部最优点]</li><li><b><u>设计的境界。</u></b>同时也是创造的境界。不再拘泥于一扇窗户、一个房间、一幢房子，全心全意处理的是整体的细节，树立大局观，自顶向下处理一件件事。知晓事物的本质，丰富的联想/举一反三能力，可以找到两件不同事之间的相同点，想出独特的方法。[全局最优点]</li></ol>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":25888881,"publishedTime":"2017-03-20T20:49:53+08:00","url":"/p/25888881","title":"【LeetCode】005-最长回文子串","summary":"题目Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.Example:Input: \"babad\" Output: \"bab\" Note: \"aba\" is also a valid answer.Example:Input: \"cbbd\" Output: \"bb\"目前的解法如<a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000003914228\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">…<i class=\"icon-external\"></i></a>","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0}},"commentsCount":1,"likesCount":2,"FULLINFO":true}},"User":{"bajdcc":{"isFollowed":false,"name":"陈安","headline":"专业研究野生技术 https://github.com/bajdcc","avatarUrl":"https://pic4.zhimg.com/v2-cd6d61ad9ef94c41b9e77f8e0f727893_s.jpg","isFollowing":false,"type":"people","slug":"bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","profileUrl":"https://www.zhihu.com/people/bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false,"badge":{"identity":null,"bestAnswerer":null}}},"Comment":{},"favlists":{}},"me":{},"global":{},"columns":{"learncpp":{"following":false,"canManage":false,"href":"/api/columns/learncpp","name":"从零开始构建标准库","creator":{"slug":"bajdcc"},"url":"/learncpp","slug":"learncpp","avatar":{"id":"v2-bf63794c542fc73b11e17014b7e0d01d","template":"https://pic2.zhimg.com/{id}_{size}.jpg"}}},"columnPosts":{},"postComments":{},"postReviewComments":{"comments":[],"newComments":[],"hasMore":true},"favlistsByUser":{},"favlistRelations":{}}</textarea>

    <script src="//static.zhihu.com/hemingway/common.09e6a1984c735e134505.js"></script>
<script src="//static.zhihu.com/hemingway/app.89ecf4e073987c60567b.js"></script>
<script src="//static.zhihu.com/hemingway/raven.4f017398aa850e39fe3c.js" async defer></script>
  </body>
</html>
