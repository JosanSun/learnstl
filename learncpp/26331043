<!doctype html>
<html lang="zh-CN">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>【Parser系列】Lexer III - 知乎专栏</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link rel="shortcut icon" href="https://static.zhihu.com/static/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="//static.zhihu.com/hemingway/app.3a8fc183ec8185fd25d3ec69cf0225ed.css" />
    <script>document.documentElement.className += ('ontouchstart' in window) ? ' touch' : ' no-touch'</script>
  </head>
  <body>

    <div id="react-root"></div>
    <textarea id="clientConfig" hidden>{"debug":false,"apiRoot":"","paySDK":"https://pay.zhihu.com/api/js","name":"production","instance":"column","tokens":{"X-XSRF-TOKEN":"2|a598fc3d|262b5789cb373ad380aa20c035a1b155|1492224033","X-UDID":null,"Authorization":"oauth c3cef7c66a1843f8b3a9e6a1e3160e20"}}</textarea>
    <textarea id="preloadedState" hidden>{"database":{"Post":{"26331043":{"title":"【Parser系列】Lexer III","author":"bajdcc","content":"<h2>写在前面</h2><p><a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/CParser/releases/tag/v0.1\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/CParser<i class=\"icon-external\"></i></a><br></p><p>赶了一天工，把Lexer完成了，现在，Lexer可以毫不羞涩地解析<a href=\"http://link.zhihu.com/?target=https%3A//github.com/dropbox/json11\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">dropbox/json11<i class=\"icon-external\"></i></a>了。虽然json11是C++的代码，Lexer还是可以解析的。部分结果如题图。</p><p>运行的话，用VS2015编译（Release快一点），然后运行即可，它会读取工程目录下的text/json11.cpp，然后解析。</p><p>初始的解析非常简单，因而忽略了错误处理、速度优化等方面。</p><p>比上一篇内容多了些改进，json11作为一个大的测试用例，让我看到了先前代码中的一些缺陷，好在全都改正了。</p><p>那么Lexer部分的最后，完成下列匹配功能：</p><ol><li>匹配注释</li><li>匹配关键词</li><li>匹配操作符</li></ol><p>显而易见，如果都匹配不到，就skip一个字符，并将其标记为error。</p><h2>完善的正则表达式</h2><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">smatch_t</span> <span class=\"n\">sm</span><span class=\"p\">;</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_string</span><span class=\"p\">{</span> <span class=\"s\">R\"(([^\\\\])|(?:\\\\(?:([bfnrtv'\"\\\\])|(?:0(\\d{1,2}))|(\\d)|(?:x([[:xdigit:]]{1,2})))))\"</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_char</span><span class=\"p\">{</span> <span class=\"s\">R\"('(?:([^'\"\\\\])|(?:\\\\(?:([bfnrtv'\"\\\\])|(?:0(\\d{1,2}))|(\\d)|(?:x([[:xdigit:]]{1,2})))))')\"</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_digit</span><span class=\"p\">{</span> <span class=\"s\">R\"(((?:\\d+(\\.)?\\d*)(?:[eE][+-]?\\d+)?)([uU])?([fFdDiIlL])?)\"</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_alpha</span><span class=\"p\">{</span> <span class=\"s\">R\"([[:alpha:]_]\\w*)\"</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_space</span><span class=\"p\">{</span> <span class=\"s\">R\"(([ ]+)|((?:\\r\\n)+)|(\\n+))\"</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_comment</span><span class=\"p\">{</span> <span class=\"s\">R\"((?://([^\\r\\n]*))|(?:/\\*([[:print:]\\n]*?)\\*/))\"</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_hex</span><span class=\"p\">{</span> <span class=\"s\">R\"(^0x([[:xdigit:]]{1,8}))\"</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_keyword</span><span class=\"p\">{</span> <span class=\"n\">lexer_keyword_regex</span><span class=\"p\">(),</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_operator</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">regex_t</span><span class=\"p\">{</span> <span class=\"n\">lexer_operator_regex</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">},</span>\n    <span class=\"n\">regex_t</span><span class=\"p\">{</span> <span class=\"n\">lexer_operator_regex</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">},</span>\n    <span class=\"n\">regex_t</span><span class=\"p\">{</span> <span class=\"n\">lexer_operator_regex</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">ECMAScript</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"o\">::</span><span class=\"n\">optimize</span> <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div><h2>匹配注释</h2><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">lexer_t</span> <span class=\"n\">CLexer</span><span class=\"o\">::</span><span class=\"n\">next_comment</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex_search</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cbegin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cend</span><span class=\"p\">(),</span> <span class=\"n\">sm</span><span class=\"p\">,</span> <span class=\"n\">r_comment</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">auto</span> <span class=\"n\">ms</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">();</span>\n        <span class=\"k\">auto</span> <span class=\"n\">ml</span> <span class=\"o\">=</span> <span class=\"n\">ms</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span> <span class=\"c1\">// comment like '// ...'</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_comment</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">();</span>\n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">ml</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"n\">l_comment</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span> <span class=\"c1\">// comment like '/* ... */'</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_comment</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">();</span>\n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">ml</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_comment</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_comment</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"sc\">'\\n'</span><span class=\"p\">),</span> <span class=\"nb\">true</span><span class=\"p\">);</span> <span class=\"c1\">// check new line</span>\n            <span class=\"k\">return</span> <span class=\"n\">l_comment</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"comment not match\"</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>这里有个小细节：虽然注释都以“/”打头，但是假如是“4/2”呢？这就不是注释了，所以必须接着判断“/”或者“*”，如果不是的话，就将“/”识别成除号。</p><h2>匹配关键字</h2><p>关键字的部分其实是属于“变量名”范围的，所以拿到变量名字符串str，用正则表达式去匹配它即可。正则表达式有capture group即捕获组的功能，所以构造一个“(^auto$)|(^bool$)|(^break$)|...”去匹配。如果匹配到是bool，那么group[2]就有值，这个编号2同时也是k_bool的值，都是相对应的。</p><p>如何生成这个regex就是用说了，用string去拼接，这里懒得用stringstream等东西了。</p><p>生成正则表达式：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">string_t</span> <span class=\"nf\">lexer_keyword_regex</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">string_t</span> <span class=\"n\">str</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">k__start</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">k__end</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">str</span> <span class=\"o\">+=</span> <span class=\"s\">\"(^\"</span><span class=\"p\">;</span>\n        <span class=\"n\">str</span> <span class=\"o\">+=</span> <span class=\"n\">keyword_string_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">str</span> <span class=\"o\">+=</span> <span class=\"s\">\"$)|\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">erase</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">str</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>识别出变量名后匹配看是否是关键字：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">lexer_t</span> <span class=\"n\">CLexer</span><span class=\"o\">::</span><span class=\"n\">next_alpha</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex_search</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cbegin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cend</span><span class=\"p\">(),</span> <span class=\"n\">sm</span><span class=\"p\">,</span> <span class=\"n\">r_alpha</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">auto</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">();</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex_search</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">cbegin</span><span class=\"p\">(),</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">cend</span><span class=\"p\">(),</span> <span class=\"n\">sm</span><span class=\"p\">,</span> <span class=\"n\">r_keyword</span><span class=\"p\">))</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">auto</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">distance</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">find_if</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">sm</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"n\">match_pred</span><span class=\"p\">));</span>\n            <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_keyword</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">keyword_t</span><span class=\"p\">)(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span> \n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">());</span>\n            <span class=\"k\">return</span> <span class=\"n\">l_keyword</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_identifier</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">();</span>\n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">());</span>\n            <span class=\"k\">return</span> <span class=\"n\">l_identifier</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"alpha not match\"</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>匹配操作符</h2><p>匹配操作符和匹配关键字的过程殊途同归，不过区别在于不能将操作符原封不动填进正则表达式里，这里需要转义。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">string_t</span> <span class=\"n\">operator_esc_string_list</span><span class=\"p\">[]</span> <span class=\"o\">=</span>\n<span class=\"p\">{</span>\n    <span class=\"s\">\"@START\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">+\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"-\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">*\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"/\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\\\\\</span><span class=\"s\">\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">?\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"%\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"&amp;amp;\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">|\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"~\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">^\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"!\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"&amp;lt;\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"&amp;gt;\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">(\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">)\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">{\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">}\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">[\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">]\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\",\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\";\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\":\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"==\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"!=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">+</span><span class=\"se\">\\\\</span><span class=\"s\">+\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"--\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">+=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"-=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">*=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"/=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"&amp;amp;=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">|=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">^=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"%=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">&amp;lt;=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">&amp;gt;=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"&amp;amp;&amp;amp;\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">|</span><span class=\"se\">\\\\</span><span class=\"s\">|\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"-&amp;gt;\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"&amp;lt;&amp;lt;\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"&amp;gt;&amp;gt;\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"&amp;lt;&amp;lt;=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"&amp;gt;&amp;gt;=\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">.</span><span class=\"se\">\\\\</span><span class=\"s\">.</span><span class=\"se\">\\\\</span><span class=\"s\">.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"@END\"</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">const</span> <span class=\"n\">string_t</span><span class=\"o\">&amp;amp;</span> <span class=\"n\">lexer_opstr</span><span class=\"p\">(</span><span class=\"n\">operator_t</span> <span class=\"n\">type</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">type</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">op__start</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">type</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">op__end</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">operator_string_list</span><span class=\"p\">[</span><span class=\"n\">type</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">const</span> <span class=\"n\">string_t</span><span class=\"o\">&amp;amp;</span> <span class=\"n\">lexer_opnamestr</span><span class=\"p\">(</span><span class=\"n\">operator_t</span> <span class=\"n\">type</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">type</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">op__start</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">type</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">op__end</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">opname_string_list</span><span class=\"p\">[</span><span class=\"n\">type</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">op_len_start_idx</span><span class=\"p\">[]</span> <span class=\"o\">=</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">op__start</span><span class=\"p\">,</span>\n    <span class=\"n\">op_assign</span><span class=\"p\">,</span>\n    <span class=\"n\">op_equal</span><span class=\"p\">,</span>\n    <span class=\"n\">op_left_shift_assign</span><span class=\"p\">,</span>\n    <span class=\"n\">op__end</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">lexer_operator_start_idx</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">len</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">len</span> <span class=\"o\">&amp;gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">len</span> <span class=\"o\">&amp;lt;=</span> <span class=\"mi\">4</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">op_len_start_idx</span><span class=\"p\">[</span><span class=\"n\">len</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">string_t</span> <span class=\"nf\">lexer_operator_regex</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">len</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">len</span> <span class=\"o\">&amp;gt;=</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">len</span> <span class=\"o\">&amp;lt;=</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n    <span class=\"n\">string_t</span> <span class=\"n\">str</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">op_len_start_idx</span><span class=\"p\">[</span><span class=\"n\">len</span><span class=\"p\">];</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">op_len_start_idx</span><span class=\"p\">[</span><span class=\"n\">len</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">str</span> <span class=\"o\">+=</span> <span class=\"s\">\"(^\"</span><span class=\"p\">;</span>\n        <span class=\"n\">str</span> <span class=\"o\">+=</span> <span class=\"n\">operator_esc_string_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">str</span> <span class=\"o\">+=</span> <span class=\"s\">\"$)|\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">erase</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">str</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>由于某种原因，遇到“a|aa”这样的正则表达式后，std::regex只会识别出a，它是非贪婪的，这个问题没法解决，所以只能按操作符长度对所有的操作符进行分类，确保同类中没有重复前缀。</p><p>构造完操作符的正则表达式后，用来解析：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">lexer_t</span> <span class=\"n\">CLexer</span><span class=\"o\">::</span><span class=\"n\">next_operator</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"n\">i</span> <span class=\"o\">&amp;gt;=</span> <span class=\"n\">length</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex_search</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cbegin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cbegin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">sm</span><span class=\"p\">,</span> <span class=\"n\">r_operator</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">();</span>\n            <span class=\"k\">auto</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">auto</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">distance</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">find_if</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">sm</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"n\">match_pred</span><span class=\"p\">));</span>\n            <span class=\"n\">j</span> <span class=\"o\">+=</span> <span class=\"n\">lexer_operator_start_idx</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_operator</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">operator_t</span><span class=\"p\">)(</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">());</span>\n            <span class=\"k\">return</span> <span class=\"n\">l_operator</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// ignore error</span>\n    <span class=\"c1\">// assert(!\"operator not match\");</span>\n    <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>识别操作符是Lexer的最后一环节，如果还不通过的话，就无视它，标记为error。后面会将这些错误保存在list中。</p><h2>阶段性总结</h2><p>那么经过两周的努力，一个萌萌哒Lexer就大功告成了~</p><p>这个Lexer是与众不同的，因为它比较懒，用regex去匹配原串了，让代码更精简。借助LL(1)的解析，让层次更清晰。</p><p>后面的话，需要做parser以便解析C语言的语法，不过由于本人水平较渣，像指针这类变态语法还未曾思考过如何去解析，看来这注定是一场LL与LR的妥协。不过这个项目于我的突破就是LL以及解析指针/强制转换的语法问题，后者是因为解析后的语法树可以有歧义，需要选择正确的一个，所以——回溯看来是不可避免的。</p><p>后面的指令集我就自己设计去了，然后运行程序的时候，我想再增加个分页机制和用于内存申请的内存池，把先前学习的内容再用上一遍，想起来就美滋滋的。虽然这样导致程序运行速度变慢，不过无所谓，解释器嘛。</p>","updated":"2017-04-12T15:34:48.000Z","canComment":false,"commentPermission":"anyone","commentCount":0,"collapsedCount":0,"likeCount":7,"state":"published","isLiked":false,"slug":"26331043","isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic1.zhimg.com/v2-2dd99dc9e93a41b0855b3fde610922ec_r.png","links":{"comments":"/api/posts/26331043/comments"},"reviewers":[],"topics":[{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"},{"url":"https://www.zhihu.com/topic/19601369","id":"19601369","name":"编译原理"},{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"}],"titleImageSize":{"width":531,"height":512},"href":"/api/posts/26331043","excerptTitle":"","column":{"slug":"learncpp","name":"从零开始构建标准库"},"tipjarState":"inactivated","sourceUrl":"","pageCommentsCount":0,"snapshotUrl":"","publishedTime":"2017-04-12T23:34:48+08:00","url":"/p/26331043","lastestLikers":[{"profileUrl":"https://www.zhihu.com/people/chaowyc","bio":"","hash":"772bbaa23b25380358d566e7ba60feb0","uid":42505026404352,"isOrg":false,"description":"无所事事","isOrgWhiteList":false,"slug":"chaowyc","avatar":{"id":"v2-c8b4ffa36130a55e1ebe089abf7c4d4d","template":"https://pic2.zhimg.com/{id}_{size}.jpg"},"name":"王永超"},{"profileUrl":"https://www.zhihu.com/people/lazy-linux","bio":"都喜欢轮子，造一个试试","hash":"7c97d6a3179831b6b84082183551c485","uid":706471705396138000,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"lazy-linux","avatar":{"id":"169155a07d978c98cfc1e00033d39fc1","template":"https://pic2.zhimg.com/{id}_{size}.jpg"},"name":"Lazy.Linux"},{"profileUrl":"https://www.zhihu.com/people/yan-bo-wen-23","bio":"科技小白","hash":"b5d4a46830a880666c1c5fd033f7a118","uid":61301896249344,"isOrg":false,"description":"ylonelyhub.com","isOrgWhiteList":false,"slug":"yan-bo-wen-23","avatar":{"id":"06bf12d21a4d2c1a9df9112e6fbb3883","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"Lonely"},{"profileUrl":"https://www.zhihu.com/people/josephine-22-53","bio":"职业搬砖","hash":"06981169b8ff679f6c22d0e15fb1401f","uid":693920511603773400,"isOrg":false,"description":"假如你连开始の勇气都木有，又有何资格嘲笑那些三分钟热度的人呢。","isOrgWhiteList":false,"slug":"josephine-22-53","avatar":{"id":"a4ea8754f16375dcb784a762ad76945d","template":"https://pic2.zhimg.com/{id}_{size}.jpg"},"name":"Josephine"},{"profileUrl":"https://www.zhihu.com/people/dong-fang-wen-shu","bio":"王业不偏安，汉贼不两立","hash":"f4285248978b12a53d30ed7637bc05e2","uid":63083330404352,"isOrg":false,"description":"假正经","isOrgWhiteList":false,"slug":"dong-fang-wen-shu","avatar":{"id":"7eaa5b9a5082b2bada173144899319e9","template":"https://pic2.zhimg.com/{id}_{size}.jpg"},"name":"惠文王"}],"summary":"写在前面<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/CParser/releases/tag/v0.1\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/CParser<i class=\"icon-external\"></i></a> 赶了一天工，把Lexer完成了，现在，Lexer可以毫不羞涩地解析<a href=\"http://link.zhihu.com/?target=https%3A//github.com/dropbox/json11\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">dropbox/json11<i class=\"icon-external\"></i></a>了。虽然json11是C++的代码，Lexer还是可以解析的。部分结果如题图。运行的话，用VS2015编译（Release快一点），然后运行即可，它会读取工程目录下的text/j…","reviewingCommentsCount":0,"meta":{"previous":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic2.zhimg.com/v2-b38ba479213e649fffa96eb1a5983145_r.png","links":{"comments":"/api/posts/26202018/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"},{"url":"https://www.zhihu.com/topic/19824417","id":"19824417","name":"小说阅读"},{"url":"https://www.zhihu.com/topic/19550901","id":"19550901","name":"前端开发"}],"href":"/api/posts/26202018","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<h2>写在前面</h2><p><a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/OnlineReader\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bajdcc/Onlin</span><span class=\"invisible\">eReader</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br></p><p>时常有读小说的烦恼，下了几MB的txt电子书，然而在电脑端上看真是惨不忍睹，所以做了个网站来解析小说。</p><p>要求的小说格式是：</p><ol><li>第一行是小说的标题，即书名</li><li>空一行</li><li>第三行是章节名，如“引子”或“第XXX章”</li><li>空一行</li><li>正文</li><li>下一章节名</li><li>……</li></ol><h2>渣效果图</h2><p>根据正文生成的目录：</p><p><img src=\"http://pic4.zhimg.com/v2-3a5316aad42ad790b90174e24ab94b33_b.png\" data-rawwidth=\"863\" data-rawheight=\"484\" class=\"origin_image zh-lightbox-thumb\" width=\"863\" data-original=\"http://pic4.zhimg.com/v2-3a5316aad42ad790b90174e24ab94b33_r.png\">网站主体如题图所示。</p><h2>设计思路</h2><p>搭一个网站可以用很多工具，这里后端采用PHP，前端用Vue.js。</p><p>自动加载触发机制：localhost/getmenu.php?id=书名，如1000.txt，书名是1000，不包括后缀名，因此请求是localhost/getmenu.php?id=1000，请求后系统自动导入小说。</p><p>当加载一个小说如“1000.txt”的时候，系统做：</p><ol><li>如果没有db.sqlite，新建一个，返回失败</li><li>再次请求时，系统找到1000.txt，读文件（in getmenu.php）</li><li>按“引子”、“第XXX章”将文章进行分割，记录分割后各个片段的起始位置和终点位置（in getmenu.php），并保存入db.sqlite中，序列化方式是json和base64</li><li>之后请求时，从db.sqlite取出位置，然后从1000.txt中根据位置找出相应小说片段，并返回给前端</li></ol><h2>分页规则</h2><p>在utils.php中的_filterRegexp方法中，目前是</p><br><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"sr\">/^(引子|第.{1,15}章)/</span>\n</code></pre></div><h2>使用方法</h2><p>php开扩展sqlite3，然后serve即可。</p><p>如我下了本新小说，将它命名成2000.txt，在主页上输入2000，点加载，然后即可开始阅读。</p><h2>其他特性</h2><ul><li>系统按IP保存当前阅读进度<br></li><li>触屏滑动支持</li><li>快捷键翻页支持</li><li>查询章节名</li></ul><br><h2>总结</h2><p>建个小网站，造个小轮子，不亦乐乎啊。</p>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":26202018,"publishedTime":"2017-04-06T12:41:56+08:00","url":"/p/26202018","title":"【Web系列】小说在线阅读","summary":"写在前面<a href=\"https://github.com/bajdcc/OnlineReader\">https://github.com/bajdcc/OnlineReader</a> 时常有读小说的烦恼，下了几MB的txt电子书，然而在电脑端上看真是惨不忍睹，所以做了个网站来解析小说。要求的小说格式是：第一行是小说的标题，即书名空一行第三行是章节名，如“引子”或“第XXX章”空一行正文下一章节名……","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0},"next":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic4.zhimg.com/v2-d121a9ef08d330936fddf2100fb722bb_r.png","links":{"comments":"/api/posts/26356924/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"},{"url":"https://www.zhihu.com/topic/19601369","id":"19601369","name":"编译原理"},{"url":"https://www.zhihu.com/topic/19561132","id":"19561132","name":"Java"}],"href":"/api/posts/26356924","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<h2>写在前面</h2><p>Release： <a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang/releases/tag/v2.2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/jMiniLang<i class=\"icon-external\"></i></a>  运行：<i>java -jar jMiniLang.jar</i><br></p><p>课设说明PDF：<a href=\"http://link.zhihu.com/?target=http%3A//files.cnblogs.com/files/bajdcc/%25E4%25BD%25BF%25E7%2594%25A8%25E8%25AF%25B4%25E6%2598%258E.pdf\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">files.cnblogs.com/files</span><span class=\"invisible\">/bajdcc/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p>先前几篇Parser系列只是简单做了一个Lexer来解析C语言，奈何做一个Parser没有几个月是做不出来的，造个轮子太昂贵了。索性就翻出以前造的一个大轮子吧。</p><p>jMiniLang是我做编译原理的课设，本来是一个Parser，后来我给它添加了功能让它变成了解释器，再后来写写脚本仿个Shell出来。从第一个项目开始到现在的版本，陆陆续续，也经过了两年的时间。</p><p>jMiniLang的Lexer、Parser部分及报错处理是参考自轮子哥的<b>vfs</b>，实现了一个<b>Parser Combinator</b>，不过是字符串版的。</p><p>项目的结构：</p><ul><li><b>LALR1</b>，LR分析的实现</li><ul><li><b>grammer</b>，语法树</li><li><b>interpret</b>，解释器</li><li><b>semantic</b>，语义</li><li><b>syntax</b>，语法规则</li><li><b>ui</b>，可视化界面</li></ul><li><b>LL1</b>，LL分析的实现</li><li><b>OP</b>，算符优先文法的实现</li><li><b>util</b>，正则表达式的实现</li></ul><h2>介绍</h2><p><b><u>一、正则表达式部分</u></b></p><p>正则表达式：根据式子，构造中规中矩的FSM状态机，并进行去Epsilon边、确定化、简单的最小化。</p><p>参考：<a href=\"http://link.zhihu.com/?target=http%3A//www.cppblog.com/vczh/archive/2008/05/22/50763.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《构造正则表达式引擎》新鲜出炉啦！ - λ-calculus（惊愕到手了欧耶，GetBlogPostIds.aspx） - C++博客<i class=\"icon-external\"></i></a></p><p>稍微改进的是：实现了filter。我们知道，在识别字符串的时候，如遇到转义，\" \\\" \"，这样会导致识别过前结束，虽然现在我在<a href=\"https://zhuanlan.zhihu.com/p/26193530\" class=\"internal\">【Parser系列】Lexer II - 知乎专栏</a>中解决了这一问题，但是当时没有思路，就做了filter。它的功能是：识别字符串时采用filter，当遇到转义时，返回转义后的字符，这样，在regex表达式中就可以不用再写转义相关的规则。</p><br><p><b><u>二、算符优先文法</u></b></p><p>由于借鉴了visitor模式，只要写好visitor，那么就可以自动遍历整个树，得到firstVT和lastVT，最后生成一个算符优先关系矩阵。运行实例在OP.grammar.test.TestGrammar.java中。</p><p>这里也增加了我的一个想法：当找到最左素短语时，就要进行规约，那么此时这个短语就是由0和1组成的串，其中0是操作数，1为操作符。如加法的模式串就是“010”。</p><p>下面截取片段：</p><p><u><i>OP.grammar.test.TestGrammar.java</i></u><br></p><div class=\"highlight\"><pre><code class=\"language-java\"><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">TestGrammar</span> <span class=\"o\">{</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">try</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"c1\">// Scanner scanner = new Scanner(System.in);</span>\n\t\t\t<span class=\"n\">Grammar</span> <span class=\"n\">grammar</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Grammar</span><span class=\"o\">(</span><span class=\"s\">\"3 - (28 / (4 * 7)) * (2 + 4) + 5\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"i\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">INTEGER</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"PLUS\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">PLUS</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"MINUS\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">MINUS</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"TIMES\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">TIMES</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"DIVIDE\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span>\n\t\t\t\t\t<span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">DIVIDE</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"LPA\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LPARAN</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"RPA\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">RPARAN</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">nons</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"o\">{</span> <span class=\"s\">\"E\"</span><span class=\"o\">,</span> <span class=\"s\">\"T\"</span><span class=\"o\">,</span> <span class=\"s\">\"F\"</span> <span class=\"o\">};</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">non</span> <span class=\"o\">:</span> <span class=\"n\">nons</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addNonTerminal</span><span class=\"o\">(</span><span class=\"n\">non</span><span class=\"o\">);</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addPatternHandler</span><span class=\"o\">(</span><span class=\"s\">\"1\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">IPatternHandler</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"nd\">@Override</span>\n\t\t\t\t<span class=\"kd\">public</span> <span class=\"n\">Object</span> <span class=\"nf\">handle</span><span class=\"o\">(</span><span class=\"n\">List</span><span class=\"o\">&amp;lt;</span><span class=\"n\">Token</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">tokens</span><span class=\"o\">,</span> <span class=\"n\">List</span><span class=\"o\">&amp;lt;</span><span class=\"n\">Object</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">symbols</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t<span class=\"k\">return</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">tokens</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">).</span><span class=\"na\">object</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n\t\t\t\t<span class=\"o\">}</span>\n\n\t\t\t\t<span class=\"nd\">@Override</span>\n\t\t\t\t<span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getPatternName</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"操作数转换\"</span><span class=\"o\">;</span>\n\t\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"o\">});</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addPatternHandler</span><span class=\"o\">(</span><span class=\"s\">\"010\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">IPatternHandler</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"nd\">@Override</span>\n\t\t\t\t<span class=\"kd\">public</span> <span class=\"n\">Object</span> <span class=\"nf\">handle</span><span class=\"o\">(</span><span class=\"n\">List</span><span class=\"o\">&amp;lt;</span><span class=\"n\">Token</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">tokens</span><span class=\"o\">,</span> <span class=\"n\">List</span><span class=\"o\">&amp;lt;</span><span class=\"n\">Object</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">symbols</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t<span class=\"kt\">int</span> <span class=\"n\">lop</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"n\">symbols</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n\t\t\t\t\t<span class=\"kt\">int</span> <span class=\"n\">rop</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"n\">symbols</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n\t\t\t\t\t<span class=\"n\">Token</span> <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">tokens</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n\t\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"na\">kToken</span> <span class=\"o\">==</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t\t<span class=\"n\">OperatorType</span> <span class=\"n\">kop</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">OperatorType</span><span class=\"o\">)</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"na\">object</span><span class=\"o\">;</span>\n\t\t\t\t\t\t<span class=\"k\">switch</span> <span class=\"o\">(</span><span class=\"n\">kop</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t\t<span class=\"k\">case</span> <span class=\"n\">PLUS</span><span class=\"o\">:</span>\n\t\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"n\">lop</span> <span class=\"o\">+</span> <span class=\"n\">rop</span><span class=\"o\">;</span>\n\t\t\t\t\t\t<span class=\"k\">case</span> <span class=\"n\">MINUS</span><span class=\"o\">:</span>\n\t\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"n\">lop</span> <span class=\"o\">-</span> <span class=\"n\">rop</span><span class=\"o\">;</span>\n\t\t\t\t\t\t<span class=\"k\">case</span> <span class=\"n\">TIMES</span><span class=\"o\">:</span>\n\t\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"n\">lop</span> <span class=\"o\">*</span> <span class=\"n\">rop</span><span class=\"o\">;</span>\n\t\t\t\t\t\t<span class=\"k\">case</span> <span class=\"n\">DIVIDE</span><span class=\"o\">:</span>\n\t\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">rop</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"n\">lop</span><span class=\"o\">;</span>\n\t\t\t\t\t\t\t<span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n\t\t\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"n\">lop</span> <span class=\"o\">/</span> <span class=\"n\">rop</span><span class=\"o\">;</span>\n\t\t\t\t\t\t\t<span class=\"o\">}</span>\n\t\t\t\t\t\t<span class=\"k\">default</span><span class=\"o\">:</span>\n\t\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n\t\t\t\t\t\t<span class=\"o\">}</span>\n\t\t\t\t\t<span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n\t\t\t\t\t<span class=\"o\">}</span>\n\t\t\t\t<span class=\"o\">}</span>\n\n\t\t\t\t<span class=\"nd\">@Override</span>\n\t\t\t\t<span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getPatternName</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"二元运算\"</span><span class=\"o\">;</span>\n\t\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"o\">});</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addPatternHandler</span><span class=\"o\">(</span><span class=\"s\">\"101\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">IPatternHandler</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"nd\">@Override</span>\n\t\t\t\t<span class=\"kd\">public</span> <span class=\"n\">Object</span> <span class=\"nf\">handle</span><span class=\"o\">(</span><span class=\"n\">List</span><span class=\"o\">&amp;lt;</span><span class=\"n\">Token</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">tokens</span><span class=\"o\">,</span> <span class=\"n\">List</span><span class=\"o\">&amp;lt;</span><span class=\"n\">Object</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">symbols</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t<span class=\"n\">Token</span> <span class=\"n\">ltok</span> <span class=\"o\">=</span> <span class=\"n\">tokens</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n\t\t\t\t\t<span class=\"n\">Token</span> <span class=\"n\">rtok</span> <span class=\"o\">=</span> <span class=\"n\">tokens</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n\t\t\t\t\t<span class=\"n\">Object</span> <span class=\"n\">exp</span> <span class=\"o\">=</span> <span class=\"n\">symbols</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n\t\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ltok</span><span class=\"o\">.</span><span class=\"na\">object</span> <span class=\"o\">==</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LPARAN</span>\n\t\t\t\t\t\t\t<span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">rtok</span><span class=\"o\">.</span><span class=\"na\">object</span> <span class=\"o\">==</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">RPARAN</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"c1\">// 判断括号</span>\n\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"n\">exp</span><span class=\"o\">;</span>\n\t\t\t\t\t<span class=\"o\">}</span>\n\t\t\t\t\t<span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n\t\t\t\t<span class=\"o\">}</span>\n\n\t\t\t\t<span class=\"nd\">@Override</span>\n\t\t\t\t<span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getPatternName</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"括号运算\"</span><span class=\"o\">;</span>\n\t\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"o\">});</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">infer</span><span class=\"o\">(</span><span class=\"s\">\"E -&amp;gt; E @PLUS T | E @MINUS T | T\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">infer</span><span class=\"o\">(</span><span class=\"s\">\"T -&amp;gt; T @TIMES F | T @DIVIDE F | F\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">infer</span><span class=\"o\">(</span><span class=\"s\">\"F -&amp;gt; @LPA E @RPA | @i\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">initialize</span><span class=\"o\">(</span><span class=\"s\">\"E\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">getPrecedenceString</span><span class=\"o\">());</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">run</span><span class=\"o\">();</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">getTokenString</span><span class=\"o\">());</span>\n\t\t\t<span class=\"c1\">// scanner.close();</span>\n\t\t<span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">RegexException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">err</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getPosition</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\",\"</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">());</span>\n\t\t\t<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n\t\t<span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">SyntaxException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">err</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getPosition</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\",\"</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\" \"</span>\n\t\t\t\t\t<span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getInfo</span><span class=\"o\">());</span>\n\t\t\t<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n\t\t<span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">GrammarException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">err</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getPosition</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\",\"</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\" \"</span>\n\t\t\t\t\t<span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getInfo</span><span class=\"o\">());</span>\n\t\t\t<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><p><u>结果</u></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>#### 算符优先关系矩阵 ####\n\t0\t1\t2\t3\t4\t5\t6\t\n0\t-\t&amp;gt;\t&amp;gt;\t&amp;gt;\t&amp;gt;\t-\t&amp;gt;\t\n1\t&amp;lt;\t&amp;gt;\t&amp;gt;\t&amp;lt;\t&amp;lt;\t&amp;lt;\t&amp;gt;\t\n2\t&amp;lt;\t&amp;gt;\t&amp;gt;\t&amp;lt;\t&amp;lt;\t&amp;lt;\t&amp;gt;\t\n3\t&amp;lt;\t&amp;gt;\t&amp;gt;\t&amp;gt;\t&amp;gt;\t&amp;lt;\t&amp;gt;\t\n4\t&amp;lt;\t&amp;gt;\t&amp;gt;\t&amp;gt;\t&amp;gt;\t&amp;lt;\t&amp;gt;\t\n5\t&amp;lt;\t&amp;lt;\t&amp;lt;\t&amp;lt;\t&amp;lt;\t&amp;lt;\t=\t\n6\t-\t&amp;gt;\t&amp;gt;\t&amp;gt;\t&amp;gt;\t-\t&amp;gt;\t\n\n#### 起始符号 ####\nE\n#### 终结符 ####\n0: `i`，整数，(null)\n1: `PLUS`，操作符，PLUS\n2: `MINUS`，操作符，MINUS\n3: `TIMES`，操作符，TIMES\n4: `DIVIDE`，操作符，DIVIDE\n5: `LPA`，操作符，LPARAN\n6: `RPA`，操作符，RPARAN\n#### 非终结符 ####\n0： E\n1： T\n2： F\n#### 文法产生式 ####\nE -&amp;gt;  ( E  `PLUS`  T | E  `MINUS`  T | T ) \n\t--== FirstVT ==--\n\t\t0: `i`，整数，(null)\n\t\t1: `PLUS`，操作符，PLUS\n\t\t2: `MINUS`，操作符，MINUS\n\t\t3: `TIMES`，操作符，TIMES\n\t\t4: `DIVIDE`，操作符，DIVIDE\n\t\t5: `LPA`，操作符，LPARAN\n\t--== LastVT ==--\n\t\t0: `i`，整数，(null)\n\t\t1: `PLUS`，操作符，PLUS\n\t\t2: `MINUS`，操作符，MINUS\n\t\t3: `TIMES`，操作符，TIMES\n\t\t4: `DIVIDE`，操作符，DIVIDE\n\t\t6: `RPA`，操作符，RPARAN\nT -&amp;gt;  ( T  `TIMES`  F | T  `DIVIDE`  F | F ) \n\t--== FirstVT ==--\n\t\t0: `i`，整数，(null)\n\t\t3: `TIMES`，操作符，TIMES\n\t\t4: `DIVIDE`，操作符，DIVIDE\n\t\t5: `LPA`，操作符，LPARAN\n\t--== LastVT ==--\n\t\t0: `i`，整数，(null)\n\t\t3: `TIMES`，操作符，TIMES\n\t\t4: `DIVIDE`，操作符，DIVIDE\n\t\t6: `RPA`，操作符，RPARAN\nF -&amp;gt;  ( `LPA`  E  `RPA` | `i` ) \n\t--== FirstVT ==--\n\t\t0: `i`，整数，(null)\n\t\t5: `LPA`，操作符，LPARAN\n\t--== LastVT ==--\n\t\t0: `i`，整数，(null)\n\t\t6: `RPA`，操作符，RPARAN\n\n步骤[1]\n\t----------------\n\t输入：[0000,000:\t整数\t3 ]\n\t移进：[0000,000:\t整数\t3 ]\n\t----==== 指令堆栈 ====----\n\t1: [0: `i`，整数，(null)]\n\t0: [结束符]\n\t----==== 数据堆栈 ====----\n\t1: [0000,000:\t整数\t3 ]\n\t0: [(null)]\n\n步骤[2]\n\t----------------\n\t输入：[0000,002:\t操作符\tMINUS -]\n\t----==== 最左素短语模式 ====----\n\t1: [tok]\n\t----==== 最左素短语 ====----\n\t0000,000:\t整数\t3 \n\t----==== 处理模式名称 ====----\n\t操作数转换\n\t----==== 处理结果 ====----\n\t3\n\t----==== 指令堆栈 ====----\n\t1: [数据]\n\t0: [结束符]\n\t----==== 数据堆栈 ====----\n\t1: [3]\n\t0: [(null)]\n\n步骤[3]\n\t----------------\n\t输入：[0000,002:\t操作符\tMINUS -]\n\t移进：[0000,002:\t操作符\tMINUS -]\n\t----==== 指令堆栈 ====----\n\t2: [2: `MINUS`，操作符，MINUS]\n\t1: [数据]\n\t0: [结束符]\n\t----==== 数据堆栈 ====----\n\t2: [0000,002:\t操作符\tMINUS -]\n\t1: [3]\n\t0: [(null)]\n\n步骤[4]\n\t----------------\n\t输入：[0000,004:\t操作符\tLPARAN (]\n\t移进：[0000,004:\t操作符\tLPARAN (]\n\t----==== 指令堆栈 ====----\n\t3: [5: `LPA`，操作符，LPARAN]\n\t2: [2: `MINUS`，操作符，MINUS]\n\t1: [数据]\n\t0: [结束符]\n\t----==== 数据堆栈 ====----\n\t3: [0000,004:\t操作符\tLPARAN (]\n\t2: [0000,002:\t操作符\tMINUS -]\n\t1: [3]\n\t0: [(null)]\n\n步骤[5]\n\t----------------\n\t输入：[0000,005:\t整数\t28 ]\n\t移进：[0000,005:\t整数\t28 ]\n\t----==== 指令堆栈 ====----\n\t4: [0: `i`，整数，(null)]\n\t3: [5: `LPA`，操作符，LPARAN]\n\t2: [2: `MINUS`，操作符，MINUS]\n\t1: [数据]\n\t0: [结束符]\n\t----==== 数据堆栈 ====----\n\t4: [0000,005:\t整数\t28 ]\n\t3: [0000,004:\t操作符\tLPARAN (]\n\t2: [0000,002:\t操作符\tMINUS -]\n\t1: [3]\n\t0: [(null)]\n\n步骤[6]\n\t----------------\n\t输入：[0000,008:\t操作符\tDIVIDE /]\n\t----==== 最左素短语模式 ====----\n\t1: [tok]\n\t----==== 最左素短语 ====----\n\t0000,005:\t整数\t28 \n\t----==== 处理模式名称 ====----\n\t操作数转换\n\t----==== 处理结果 ====----\n\t28\n\t----==== 指令堆栈 ====----\n\t4: [数据]\n\t3: [5: `LPA`，操作符，LPARAN]\n\t2: [2: `MINUS`，操作符，MINUS]\n\t1: [数据]\n\t0: [结束符]\n\t----==== 数据堆栈 ====----\n\t4: [28]\n\t3: [0000,004:\t操作符\tLPARAN (]\n\t2: [0000,002:\t操作符\tMINUS -]\n\t1: [3]\n\t0: [(null)]\n</code></pre></div><p><b><u>三、LL1文法</u></b></p><p>这没啥好说的，经典方法，visitor求first、follow、select集，产生预测分析表。</p><p><i><u>LL1.grammar.test.TestGrammar.java</u></i><br></p><div class=\"highlight\"><pre><code class=\"language-java\"><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">TestGrammar</span> <span class=\"o\">{</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">try</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"c1\">//Grammar grammar = new Grammar(\"(i * i) * (i + i) - i\");</span>\n\t\t\t<span class=\"n\">Grammar</span> <span class=\"n\">grammar</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Grammar</span><span class=\"o\">(</span><span class=\"s\">\"i + i * i\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"SYMBOL\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">ID</span><span class=\"o\">,</span> <span class=\"s\">\"i\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"PLUS\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">PLUS</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"MINUS\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">MINUS</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"TIMES\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">TIMES</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"DIVIDE\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span>\n\t\t\t\t\t<span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">DIVIDE</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"LPA\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LPARAN</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"RPA\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">RPARAN</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">setEpsilonName</span><span class=\"o\">(</span><span class=\"s\">\"epsilon\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">nons</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"o\">{</span>\n\t\t\t\t\t<span class=\"s\">\"E\"</span><span class=\"o\">,</span> <span class=\"s\">\"E1\"</span><span class=\"o\">,</span> <span class=\"s\">\"T\"</span><span class=\"o\">,</span> <span class=\"s\">\"T1\"</span><span class=\"o\">,</span> <span class=\"s\">\"F\"</span><span class=\"o\">,</span> <span class=\"s\">\"A\"</span><span class=\"o\">,</span> <span class=\"s\">\"M\"</span>\n\t\t\t<span class=\"o\">};</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">non</span> <span class=\"o\">:</span> <span class=\"n\">nons</span><span class=\"o\">){</span>\n\t\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addNonTerminal</span><span class=\"o\">(</span><span class=\"n\">non</span><span class=\"o\">);</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">infer</span><span class=\"o\">(</span><span class=\"s\">\"E -&amp;gt; T E1\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">infer</span><span class=\"o\">(</span><span class=\"s\">\"E1 -&amp;gt; A T E1 | @epsilon\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">infer</span><span class=\"o\">(</span><span class=\"s\">\"T -&amp;gt; F T1\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">infer</span><span class=\"o\">(</span><span class=\"s\">\"T1 -&amp;gt; M F T1 | @epsilon\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">infer</span><span class=\"o\">(</span><span class=\"s\">\"F -&amp;gt; @LPA E @RPA | @SYMBOL\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">infer</span><span class=\"o\">(</span><span class=\"s\">\"A -&amp;gt; @PLUS | @MINUS\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">infer</span><span class=\"o\">(</span><span class=\"s\">\"M -&amp;gt; @TIMES | @DIVIDE\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">initialize</span><span class=\"o\">(</span><span class=\"s\">\"E\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">getPredictionString</span><span class=\"o\">());</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">run</span><span class=\"o\">();</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">getTokenString</span><span class=\"o\">());</span>\n\t\t\t<span class=\"c1\">// scanner.close();</span>\n\t\t<span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">RegexException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">err</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getPosition</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\",\"</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">());</span>\n\t\t\t<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n\t\t<span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">SyntaxException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">err</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getPosition</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\",\"</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\" \"</span>\n\t\t\t\t\t<span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getInfo</span><span class=\"o\">());</span>\n\t\t\t<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n\t\t<span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">GrammarException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">err</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getPosition</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\",\"</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\" \"</span>\n\t\t\t\t\t<span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getInfo</span><span class=\"o\">());</span>\n\t\t\t<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><p><u>结果</u></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>#### 起始符号 ####\nE\n#### 终结符 ####\n0: `SYMBOL`，标识符，i\n1: `PLUS`，操作符，PLUS\n2: `MINUS`，操作符，MINUS\n3: `TIMES`，操作符，TIMES\n4: `DIVIDE`，操作符，DIVIDE\n5: `LPA`，操作符，LPARAN\n6: `RPA`，操作符，RPARAN\n7: `epsilon`，结束符，(null)\n#### 非终结符 ####\n0： E\n1： E1\n2： T\n3： T1\n4： F\n5： A\n6： M\n#### 文法产生式 ####\nE -&amp;gt;  T  E1 \n\t--== First ==--\n\t\t0: `SYMBOL`，标识符，i\n\t\t5: `LPA`，操作符，LPARAN\n\t--== Follow ==--\n\t\t6: `RPA`，操作符，RPARAN\n\t\t7: `epsilon`，结束符，(null)\nE1 -&amp;gt;  ( A  T  E1 | `epsilon` ) \n\t--== First ==--\n\t\t1: `PLUS`，操作符，PLUS\n\t\t2: `MINUS`，操作符，MINUS\n\t\t7: `epsilon`，结束符，(null)\n\t--== Follow ==--\n\t\t6: `RPA`，操作符，RPARAN\n\t\t7: `epsilon`，结束符，(null)\nT -&amp;gt;  F  T1 \n\t--== First ==--\n\t\t0: `SYMBOL`，标识符，i\n\t\t5: `LPA`，操作符，LPARAN\n\t--== Follow ==--\n\t\t1: `PLUS`，操作符，PLUS\n\t\t2: `MINUS`，操作符，MINUS\n\t\t6: `RPA`，操作符，RPARAN\n\t\t7: `epsilon`，结束符，(null)\nT1 -&amp;gt;  ( M  F  T1 | `epsilon` ) \n\t--== First ==--\n\t\t3: `TIMES`，操作符，TIMES\n\t\t4: `DIVIDE`，操作符，DIVIDE\n\t\t7: `epsilon`，结束符，(null)\n\t--== Follow ==--\n\t\t1: `PLUS`，操作符，PLUS\n\t\t2: `MINUS`，操作符，MINUS\n\t\t6: `RPA`，操作符，RPARAN\n\t\t7: `epsilon`，结束符，(null)\nF -&amp;gt;  ( `LPA`  E  `RPA` | `SYMBOL` ) \n\t--== First ==--\n\t\t0: `SYMBOL`，标识符，i\n\t\t5: `LPA`，操作符，LPARAN\n\t--== Follow ==--\n\t\t1: `PLUS`，操作符，PLUS\n\t\t2: `MINUS`，操作符，MINUS\n\t\t3: `TIMES`，操作符，TIMES\n\t\t4: `DIVIDE`，操作符，DIVIDE\n\t\t6: `RPA`，操作符，RPARAN\n\t\t7: `epsilon`，结束符，(null)\nA -&amp;gt;  ( `PLUS` | `MINUS` ) \n\t--== First ==--\n\t\t1: `PLUS`，操作符，PLUS\n\t\t2: `MINUS`，操作符，MINUS\n\t--== Follow ==--\n\t\t0: `SYMBOL`，标识符，i\n\t\t5: `LPA`，操作符，LPARAN\nM -&amp;gt;  ( `TIMES` | `DIVIDE` ) \n\t--== First ==--\n\t\t3: `TIMES`，操作符，TIMES\n\t\t4: `DIVIDE`，操作符，DIVIDE\n\t--== Follow ==--\n\t\t0: `SYMBOL`，标识符，i\n\t\t5: `LPA`，操作符，LPARAN\n\n#### 预测分析表 ####\n状态[0]： \n\t非终结符 -&amp;gt; E\n\t\t----------------\n\t\t接受 -&amp;gt; 0: `SYMBOL`，标识符，i\n\t\t入栈 -&amp;gt; [1： E1][2： T]\n\t\t----------------\n\t\t接受 -&amp;gt; 5: `LPA`，操作符，LPARAN\n\t\t入栈 -&amp;gt; [1： E1][2： T]\n状态[1]： \n\t非终结符 -&amp;gt; E1\n\t\t----------------\n\t\t接受 -&amp;gt; 1: `PLUS`，操作符，PLUS\n\t\t入栈 -&amp;gt; [1： E1][2： T][5： A]\n\t\t----------------\n\t\t接受 -&amp;gt; 2: `MINUS`，操作符，MINUS\n\t\t入栈 -&amp;gt; [1： E1][2： T][5： A]\n\t\t----------------\n\t\t接受 -&amp;gt; 6: `RPA`，操作符，RPARAN\n\t\t入栈 -&amp;gt; \n\t\t----------------\n\t\t接受 -&amp;gt; 7: `epsilon`，结束符，(null)\n\t\t入栈 -&amp;gt; \n状态[2]： \n\t非终结符 -&amp;gt; T\n\t\t----------------\n\t\t接受 -&amp;gt; 0: `SYMBOL`，标识符，i\n\t\t入栈 -&amp;gt; [3： T1][4： F]\n\t\t----------------\n\t\t接受 -&amp;gt; 5: `LPA`，操作符，LPARAN\n\t\t入栈 -&amp;gt; [3： T1][4： F]\n状态[3]： \n\t非终结符 -&amp;gt; T1\n\t\t----------------\n\t\t接受 -&amp;gt; 1: `PLUS`，操作符，PLUS\n\t\t入栈 -&amp;gt; \n\t\t----------------\n\t\t接受 -&amp;gt; 2: `MINUS`，操作符，MINUS\n\t\t入栈 -&amp;gt; \n\t\t----------------\n\t\t接受 -&amp;gt; 3: `TIMES`，操作符，TIMES\n\t\t入栈 -&amp;gt; [3： T1][4： F][6： M]\n\t\t----------------\n\t\t接受 -&amp;gt; 4: `DIVIDE`，操作符，DIVIDE\n\t\t入栈 -&amp;gt; [3： T1][4： F][6： M]\n\t\t----------------\n\t\t接受 -&amp;gt; 6: `RPA`，操作符，RPARAN\n\t\t入栈 -&amp;gt; \n\t\t----------------\n\t\t接受 -&amp;gt; 7: `epsilon`，结束符，(null)\n\t\t入栈 -&amp;gt; \n状态[4]： \n\t非终结符 -&amp;gt; F\n\t\t----------------\n\t\t接受 -&amp;gt; 0: `SYMBOL`，标识符，i\n\t\t入栈 -&amp;gt; [0: `SYMBOL`，标识符，i]\n\t\t----------------\n\t\t接受 -&amp;gt; 5: `LPA`，操作符，LPARAN\n\t\t入栈 -&amp;gt; [6: `RPA`，操作符，RPARAN][0： E][5: `LPA`，操作符，LPARAN]\n状态[5]： \n\t非终结符 -&amp;gt; A\n\t\t----------------\n\t\t接受 -&amp;gt; 1: `PLUS`，操作符，PLUS\n\t\t入栈 -&amp;gt; [1: `PLUS`，操作符，PLUS]\n\t\t----------------\n\t\t接受 -&amp;gt; 2: `MINUS`，操作符，MINUS\n\t\t入栈 -&amp;gt; [2: `MINUS`，操作符，MINUS]\n状态[6]： \n\t非终结符 -&amp;gt; M\n\t\t----------------\n\t\t接受 -&amp;gt; 3: `TIMES`，操作符，TIMES\n\t\t入栈 -&amp;gt; [3: `TIMES`，操作符，TIMES]\n\t\t----------------\n\t\t接受 -&amp;gt; 4: `DIVIDE`，操作符，DIVIDE\n\t\t入栈 -&amp;gt; [4: `DIVIDE`，操作符，DIVIDE]\n#### 指令包 ####\n0: [1： E1][2： T]\n1: [1： E1][2： T][5： A]\n2: \n3: [3： T1][4： F]\n4: [3： T1][4： F][6： M]\n5: \n6: [6: `RPA`，操作符，RPARAN][0： E][5: `LPA`，操作符，LPARAN]\n7: [0: `SYMBOL`，标识符，i]\n8: [1: `PLUS`，操作符，PLUS]\n9: [2: `MINUS`，操作符，MINUS]\n10: [3: `TIMES`，操作符，TIMES]\n11: [4: `DIVIDE`，操作符，DIVIDE]\n#### 预测分析矩阵 ####\n0\t-\t-\t-\t-\t0\t-\t-\t\n-\t1\t1\t-\t-\t-\t2\t2\t\n3\t-\t-\t-\t-\t3\t-\t-\t\n-\t5\t5\t4\t4\t-\t5\t5\t\n7\t-\t-\t-\t-\t6\t-\t-\t\n-\t8\t9\t-\t-\t-\t-\t-\t\n-\t-\t-\t10\t11\t-\t-\t-\t\n\n步骤[1]\n\t----------------\n\t输入：[0: `SYMBOL`，标识符，i]\n\t栈顶：[0： E]\n\t入栈：[1： E1][2： T]\n\t----------------\n\t2: [2： T]\n\t1: [1： E1]\n\t0: [7: `epsilon`，结束符，(null)]\n\n步骤[2]\n\t----------------\n\t输入：[0: `SYMBOL`，标识符，i]\n\t栈顶：[2： T]\n\t入栈：[3： T1][4： F]\n\t----------------\n\t3: [4： F]\n\t2: [3： T1]\n\t1: [1： E1]\n\t0: [7: `epsilon`，结束符，(null)]\n\n步骤[3]\n\t----------------\n\t输入：[0: `SYMBOL`，标识符，i]\n\t栈顶：[4： F]\n\t入栈：[0: `SYMBOL`，标识符，i]\n\t----------------\n\t3: [0: `SYMBOL`，标识符，i]\n\t2: [3： T1]\n\t1: [1： E1]\n\t0: [7: `epsilon`，结束符，(null)]\n\n步骤[4]\n\t----------------\n\t输入：[0: `SYMBOL`，标识符，i]\n\t栈顶：[0: `SYMBOL`，标识符，i]\n\t匹配：0: `SYMBOL`，标识符，i\n\t----------------\n\t2: [3： T1]\n\t1: [1： E1]\n\t0: [7: `epsilon`，结束符，(null)]\n</code></pre></div><p><u><b>四、LALR1文法</b></u></p><p>这是最复杂的部分，涉及一个完整的编译过程。</p><p>用Parser Combinator去构造下推自动机，实现语法分析。</p><p><u><i>优雅的实现：</i></u></p><div class=\"highlight\"><pre><code class=\"language-java\"><span></span><span class=\"cm\">/**</span>\n<span class=\"cm\">\t * 声明终结符</span>\n<span class=\"cm\">\t * </span>\n<span class=\"cm\">\t * @throws SyntaxException 词法错误</span>\n<span class=\"cm\">\t */</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">declareTerminal</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"n\">SyntaxException</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"ID\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">ID</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"BOOLEAN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">BOOL</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"LITERAL\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">STRING</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"CHARACTER\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">CHARACTER</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"INTEGER\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">INTEGER</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"DECIMAL\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">DECIMAL</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">KeywordType</span> <span class=\"n\">keywordType</span> <span class=\"o\">:</span> <span class=\"n\">KeywordType</span><span class=\"o\">.</span><span class=\"na\">values</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"n\">keywordType</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">(),</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">KEYWORD</span><span class=\"o\">,</span> <span class=\"n\">keywordType</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"ELLIPSIS\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">ELLIPSIS</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"PTR_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">POINTER</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"INC_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">PLUS_PLUS</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"DEC_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">MINUS_MINUS</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"LEFT_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LEFT_SHIFT</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"RIGHT_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">RIGHT_SHIFT</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"LE_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LESS_THAN_OR_EQUAL</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"GE_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">GREATER_THAN_OR_EQUAL</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"EQ_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">EQUAL</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"NE_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">NOT_EQUAL</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"AND_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LOGICAL_AND</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"OR_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LOGICAL_OR</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"MUL_ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">TIMES_ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"DIV_ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">DIV_ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"MOD_ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">MOD_ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"ADD_ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">PLUS_ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"SUB_ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">MINUS_ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"LEFT_ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LEFT_SHIFT_ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"RIGHT_ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">RIGHT_SHIFT_ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"AND_ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">AND_ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"XOR_ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">XOR_ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"OR_ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">OR_ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"ADD\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">PLUS</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"SUB\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">MINUS</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"MUL\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">TIMES</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"DIV\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">DIVIDE</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"MOD\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">MOD</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"AND\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">BIT_AND</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"OR\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">BIT_OR</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"XOR\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">BIT_XOR</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"NOT\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">BIT_NOT</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"NOT_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LOGICAL_NOT</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"LT\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LESS_THAN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"GT\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">GREATER_THAN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"QUERY\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">QUERY</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"COMMA\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">COMMA</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"SEMI\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">SEMI</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"DOT\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">DOT</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"COLON\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">COLON</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"LPA\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LPARAN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"RPA\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">RPARAN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"LSQ\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LSQUARE</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"RSQ\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">RSQUARE</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"LBR\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LBRACE</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"RBR\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">RBRACE</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"cm\">/**</span>\n<span class=\"cm\">\t * 声明非终结符</span>\n<span class=\"cm\">\t * </span>\n<span class=\"cm\">\t * @throws SyntaxException 词法错误</span>\n<span class=\"cm\">\t */</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">declareNonTerminal</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"n\">SyntaxException</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">nonTerminals</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"o\">{</span> <span class=\"s\">\"program\"</span><span class=\"o\">,</span> <span class=\"s\">\"stmt_list\"</span><span class=\"o\">,</span> <span class=\"s\">\"stmt\"</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"stmt_stmt\"</span><span class=\"o\">,</span> <span class=\"s\">\"stmt_ctrl\"</span><span class=\"o\">,</span> <span class=\"s\">\"stmt_exp\"</span><span class=\"o\">,</span> <span class=\"s\">\"func\"</span><span class=\"o\">,</span> <span class=\"s\">\"var\"</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"var_list\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp_list\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp0\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp1\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp2\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp3\"</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"exp4\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp5\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp6\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp7\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp8\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp9\"</span><span class=\"o\">,</span> <span class=\"s\">\"type\"</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"block\"</span><span class=\"o\">,</span> <span class=\"s\">\"call_exp\"</span><span class=\"o\">,</span> <span class=\"s\">\"call\"</span><span class=\"o\">,</span> <span class=\"s\">\"ret\"</span><span class=\"o\">,</span> <span class=\"s\">\"doc_list\"</span><span class=\"o\">,</span> <span class=\"s\">\"port\"</span><span class=\"o\">,</span> <span class=\"s\">\"if\"</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"for\"</span><span class=\"o\">,</span> <span class=\"s\">\"while\"</span><span class=\"o\">,</span> <span class=\"s\">\"foreach\"</span><span class=\"o\">,</span> <span class=\"s\">\"cycle_ctrl\"</span><span class=\"o\">,</span> <span class=\"s\">\"block_stmt\"</span><span class=\"o\">,</span> <span class=\"s\">\"array\"</span><span class=\"o\">,</span> <span class=\"s\">\"map\"</span> <span class=\"o\">};</span>\n\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">string</span> <span class=\"o\">:</span> <span class=\"n\">nonTerminals</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">addNonTerminal</span><span class=\"o\">(</span><span class=\"n\">string</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"cm\">/**</span>\n<span class=\"cm\">\t * 进行推导</span>\n<span class=\"cm\">\t * </span>\n<span class=\"cm\">\t * @throws SyntaxException 词法错误</span>\n<span class=\"cm\">\t */</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">infer</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"n\">SyntaxException</span> <span class=\"o\">{</span>\n\t\t<span class=\"cm\">/* 起始符号就是main函数 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"main\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"program -&amp;gt; stmt_list[0]{lost_stmt}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* Block语句 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"block\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"block -&amp;gt; @LBR#do_enter_scope# [stmt_list[0]] @RBR#do_leave_scope#{lost_rbr}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"block_stmt\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"block_stmt -&amp;gt; block[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 当前块（Block）全部由语句组成 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"stmt_list\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"stmt_list -&amp;gt; stmt[0]{lost_stmt} [stmt_list[1]]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 语句分为变量定义（赋值）、调用语句 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"copy\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"stmt_exp -&amp;gt; var[0] | call[0] | cycle_ctrl[0] | exp[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"copy\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"stmt -&amp;gt; stmt_stmt[0] | stmt_ctrl[0] | block_stmt[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"stmt_exp\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"stmt_stmt -&amp;gt; [stmt_exp[0]] @SEMI{lost_semi}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"copy\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"stmt_ctrl -&amp;gt; ret[0] | port[0] | if[0] | for[0] | foreach[0] | while[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 返回语句 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"return\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"ret -&amp;gt; (@YIELD[1] | @RETURN) [exp[0]] @SEMI{lost_semi}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 变量定义（赋值）语句（由于支持Lambda，函数定义皆为Lambda形式） */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"var\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"var -&amp;gt; (@VARIABLE[11] | @LET[12]) @ID[0]#declear_variable#{lost_token} @ASSIGN{lost_assign} (func[1]{lost_func} | exp[2]{lost_exp} | array[2]{lost_array} | map[2]{lost_map})\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 导入与导出语句 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"port\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"port -&amp;gt; (@IMPORT[1] | @EXPORT[2]) @LITERAL[0]{lost_string} @SEMI{lost_semi}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 表达式（算符文法） */</span>\n\t\t<span class=\"n\">ISemanticAnalyzer</span> <span class=\"n\">exp_handler</span> <span class=\"o\">=</span> <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"exp\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span> <span class=\"s\">\"exp -&amp;gt; exp0[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"exp0 -&amp;gt; exp1[0] [@QUERY[4] exp0[6] @COLON[5]{lost_colon} exp0[7]]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span> <span class=\"s\">\"exp1 -&amp;gt; [exp1[1] (@AND_OP[2] | @OR_OP[2])] exp2[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"exp2 -&amp;gt; [exp2[1] (@OR[2] | @XOR[2] | @AND[2])] exp3[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span> <span class=\"s\">\"exp3 -&amp;gt; [exp3[1] (@EQ_OP[2] | @NE_OP[2])] exp4[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"exp4 -&amp;gt; [exp4[1] (@LT[2] | @GT[2] | @LE_OP[2] | @GE_OP[2])] exp5[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"exp5 -&amp;gt; [exp5[1] (@LEFT_OP[2] | @RIGHT_OP[2])] exp6[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span> <span class=\"s\">\"exp6 -&amp;gt; [exp6[1] (@ADD[2] | @SUB[2])] exp7[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"exp7 -&amp;gt; [exp7[1] (@MUL[2] | @DIV[2] | @MOD[2])] exp8[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span> <span class=\"s\">\"exp8 -&amp;gt; (@NOT_OP[3] | @NOT[3]) exp8[1] | exp9[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"exp9 -&amp;gt; (@INC_OP[3] | @DEC_OP[3]) exp9[1] | exp9[1] (@INC_OP[3] | @DEC_OP[3]) | type[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 调用语句 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"call_exp\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"call -&amp;gt; @CALL (@LPA{lost_lpa} func[0]{lost_call} @RPA{lost_rpa} | @ID[1]{lost_call}) @LPA{lost_lpa} [exp_list[2]] @RPA{lost_rpa}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 函数定义 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"token_list\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"var_list -&amp;gt; @ID[0]#declear_param# [@COMMA var_list[1]]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"exp_list\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"exp_list -&amp;gt; exp[0] [@COMMA exp_list[1]]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"token_list\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"doc_list -&amp;gt; @LITERAL[0] [@COMMA exp_list[1]]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"func\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"func -&amp;gt; (@FUNCTION[10]#func_clearargs# | @YIELD#func_clearargs#) [@LSQ doc_list[0]{lost_doc} @RSQ] (@ID[1]#predeclear_funcname#{lost_func_name} | @NOT[1]#predeclear_funcname#{lost_func_name}) @LPA{lost_lpa} [var_list[2]] @RPA{lost_rpa} (@PTR_OP{lost_func_body} exp[3]{lost_exp} | block[4]{lost_func_body})\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 基本数据类型 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"type\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"type -&amp;gt; @ID[0] | @INTEGER[0] | @DECIMAL[0] | @LITERAL[0] | @CHARACTER[0] | @BOOLEAN[0] | @LPA exp[1]{lost_exp} @RPA{lost_rpa} | call[1]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 条件语句 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"if\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"if -&amp;gt; @IF @LPA{lost_lpa} exp[0]{lost_exp} @RPA{lost_rpa} block[1]{lost_block} [@ELSE (block[2]{lost_block} | if[3]{lost_block})]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 循环语句 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"for\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"for -&amp;gt; @FOR#do_enter_cycle# @LPA{lost_lpa} [var[0]] @SEMI{lost_semi} [exp[1]] @SEMI{lost_semi} [exp[2] | var[2]] @RPA{lost_rpa} block[3]{lost_block}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"while\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"while -&amp;gt; @WHILE#do_enter_cycle# @LPA{lost_lpa} exp[0] @RPA{lost_rpa} block[1]{lost_block}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 循环语句 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"foreach\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"foreach -&amp;gt; @FOREACH#do_enter_cycle# @LPA{lost_lpa} @VARIABLE{lost_var} @ID[0]#declear_variable#{lost_token} @COLON{lost_colon} exp[1]{lost_exp} @RPA{lost_rpa} block[2]{lost_block}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 循环控制语句 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"cycle\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"cycle_ctrl -&amp;gt; @BREAK[0] | @CONTINUE[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 数组初始化 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"array\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"array -&amp;gt; @LSQ @RSQ{lost_rsq}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 字典初始化 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"map\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"map -&amp;gt; @LBR @RBR{lost_rbr}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">initialize</span><span class=\"o\">(</span><span class=\"s\">\"program\"</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"cm\">/**</span>\n<span class=\"cm\">\t * 声明错误处理器</span>\n<span class=\"cm\">\t * </span>\n<span class=\"cm\">\t * @throws SyntaxException 词法错误</span>\n<span class=\"cm\">\t */</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">declareErrorHandler</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"n\">SyntaxException</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_exp\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"表达式\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_func\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"函数\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_token\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"标识符\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_func_name\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"函数名\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_func_body\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"函数体\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_block\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"块\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_stmt\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"语句\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_string\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"字符串\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_assign\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"等号'='\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_call\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"调用主体\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_lpa\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"左圆括号'('\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_rpa\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"右圆括号')'\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_lsq\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"左方括号'['\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_rsq\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"右方括号']'\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_lbr\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"左花括号'{'\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_rbr\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"右花括号'}'\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_colon\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"冒号':'\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_semi\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"分号';'\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_doc\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"文档\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_var\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"赋值\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_array\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"数组'[]'\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_map\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"字典'{}'\"</span><span class=\"o\">));</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"cm\">/**</span>\n<span class=\"cm\">\t * 声明动作处理器</span>\n<span class=\"cm\">\t * </span>\n<span class=\"cm\">\t * @throws SyntaxException 词法错误</span>\n<span class=\"cm\">\t */</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">declareActionHandler</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"n\">SyntaxException</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">actionNames</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"o\">{</span> <span class=\"s\">\"do_enter_scope\"</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"do_leave_scope\"</span><span class=\"o\">,</span> <span class=\"s\">\"predeclear_funcname\"</span><span class=\"o\">,</span> <span class=\"s\">\"declear_variable\"</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"declear_param\"</span><span class=\"o\">,</span> <span class=\"s\">\"func_clearargs\"</span><span class=\"o\">,</span> <span class=\"s\">\"do_enter_cycle\"</span> <span class=\"o\">};</span>\n\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">string</span> <span class=\"o\">:</span> <span class=\"n\">actionNames</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">addActionHandler</span><span class=\"o\">(</span><span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getActionHandler</span><span class=\"o\">(</span><span class=\"n\">string</span><span class=\"o\">));</span>\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n</code></pre></div><p><i><u>指令：</u></i></p><div class=\"highlight\"><pre><code class=\"language-java\"><span></span><span class=\"kd\">public</span> <span class=\"kd\">enum</span> <span class=\"n\">RuntimeInst</span> <span class=\"o\">{</span>\n    <span class=\"n\">ihalt</span><span class=\"o\">,</span>            <span class=\"c1\">// 停止</span>\n    <span class=\"n\">inop</span><span class=\"o\">,</span>             <span class=\"c1\">// 空指令</span>\n    <span class=\"n\">ipush</span><span class=\"o\">,</span>            <span class=\"c1\">// [op1]进栈</span>\n    <span class=\"n\">ipop</span><span class=\"o\">,</span>             <span class=\"c1\">// 出栈</span>\n    <span class=\"n\">iopena</span><span class=\"o\">,</span>           <span class=\"c1\">// 过程参数准备进栈</span>\n    <span class=\"n\">ipushx</span><span class=\"o\">,</span>           <span class=\"c1\">// 空进栈</span>\n    <span class=\"n\">ipushz</span><span class=\"o\">,</span>           <span class=\"c1\">// 参数零进栈</span>\n    <span class=\"n\">ipusha</span><span class=\"o\">,</span>           <span class=\"c1\">// 数据栈[top]进调用栈</span>\n    <span class=\"n\">ipushn</span><span class=\"o\">,</span>           <span class=\"c1\">// 非数进栈</span>\n    <span class=\"n\">iloada</span><span class=\"o\">,</span>           <span class=\"c1\">// 调用栈进数据栈[top]</span>\n    <span class=\"n\">icall</span><span class=\"o\">,</span>            <span class=\"c1\">// 过程调用</span>\n    <span class=\"n\">icallx</span><span class=\"o\">,</span>           <span class=\"c1\">// 外部过程调用，数据段</span>\n    <span class=\"n\">ically</span><span class=\"o\">,</span>           <span class=\"c1\">// 外部过程调用，参数栈</span>\n    <span class=\"n\">iret</span><span class=\"o\">,</span>             <span class=\"c1\">// 过程返回</span>\n\n    <span class=\"n\">iyldl</span><span class=\"o\">,</span>            <span class=\"c1\">// 协程返回</span>\n    <span class=\"n\">iyldr</span><span class=\"o\">,</span>            <span class=\"c1\">// 协程进入</span>\n    <span class=\"n\">iyldx</span><span class=\"o\">,</span>            <span class=\"c1\">// 协程销毁</span>\n    <span class=\"n\">iyldy</span><span class=\"o\">,</span>            <span class=\"c1\">// 协程创建</span>\n    <span class=\"n\">iyldi</span><span class=\"o\">,</span>            <span class=\"c1\">// 协程队列数据入队，从栈</span>\n    <span class=\"n\">iyldo</span><span class=\"o\">,</span>            <span class=\"c1\">// 协程队列数据出队，从栈</span>\n\n    <span class=\"n\">iscpi</span><span class=\"o\">,</span>            <span class=\"c1\">// 进入命名空间</span>\n    <span class=\"n\">iscpo</span><span class=\"o\">,</span>            <span class=\"c1\">// 离开命名空间</span>\n\n    <span class=\"n\">iload</span><span class=\"o\">,</span>            <span class=\"c1\">// 数值载入</span>\n    <span class=\"n\">iloadv</span><span class=\"o\">,</span>           <span class=\"c1\">// 变量载入</span>\n    <span class=\"n\">iloadx</span><span class=\"o\">,</span>           <span class=\"c1\">// 外部变量载入</span>\n    <span class=\"n\">ildfun</span><span class=\"o\">,</span>           <span class=\"c1\">// 函数地址载入</span>\n    <span class=\"n\">istore</span><span class=\"o\">,</span>           <span class=\"c1\">// 栈顶[top]数据存入[top-1]索引指向的位置（引用）</span>\n    <span class=\"n\">ialloc</span><span class=\"o\">,</span>           <span class=\"c1\">// 栈顶[top]数据存入[top-1]索引指向的位置（新建）</span>\n\n    <span class=\"n\">iimp</span><span class=\"o\">,</span>             <span class=\"c1\">// 导入[top]</span>\n\n    <span class=\"n\">ijmp</span><span class=\"o\">,</span>             <span class=\"c1\">// 跳转</span>\n    <span class=\"n\">ijz</span><span class=\"o\">,</span>              <span class=\"c1\">// 为零，[top]=0跳转到绝对地址op1</span>\n    <span class=\"n\">ijnz</span><span class=\"o\">,</span>             <span class=\"c1\">// 非零，[top]&amp;lt;&amp;gt;0跳转到绝对地址op1</span>\n    <span class=\"n\">ijt</span><span class=\"o\">,</span>              <span class=\"c1\">// [top]为真跳转到绝对地址op1，弹出数据</span>\n    <span class=\"n\">ijf</span><span class=\"o\">,</span>              <span class=\"c1\">// [top]为假跳转到绝对地址op1，弹出数据</span>\n    <span class=\"n\">ijtx</span><span class=\"o\">,</span>             <span class=\"c1\">// [top]为真跳转到绝对地址op1，不弹出数据</span>\n    <span class=\"n\">ijfx</span><span class=\"o\">,</span>             <span class=\"c1\">// [top]为假跳转到绝对地址op1，不弹出数据</span>\n    <span class=\"n\">ijnan</span><span class=\"o\">,</span>            <span class=\"c1\">// 结果为非数（用户迭代中止）</span>\n    <span class=\"n\">ijyld</span><span class=\"o\">,</span>            <span class=\"c1\">// 已创建协程则跳转</span>\n\n    <span class=\"n\">iinc</span><span class=\"o\">,</span>             <span class=\"c1\">// 自增，[top]++</span>\n    <span class=\"n\">idec</span><span class=\"o\">,</span>             <span class=\"c1\">// 自减，[top]--</span>\n    <span class=\"n\">inot</span><span class=\"o\">,</span>             <span class=\"c1\">// 逻辑非，![top]</span>\n    <span class=\"n\">iinv</span><span class=\"o\">,</span>             <span class=\"c1\">// 算术非，~[top]</span>\n\n    <span class=\"n\">iadd</span><span class=\"o\">,</span>             <span class=\"c1\">// 加，[top]+[top-1]</span>\n    <span class=\"n\">isub</span><span class=\"o\">,</span>             <span class=\"c1\">// 减，[top]-[top-1]</span>\n    <span class=\"n\">imul</span><span class=\"o\">,</span>             <span class=\"c1\">// 乘，[top]*[top-1]</span>\n    <span class=\"n\">idiv</span><span class=\"o\">,</span>             <span class=\"c1\">// 除，[top]/[top-1]</span>\n    <span class=\"n\">imod</span><span class=\"o\">,</span>             <span class=\"c1\">// 余，[top]%[top-1]</span>\n    <span class=\"n\">iand</span><span class=\"o\">,</span>             <span class=\"c1\">// 算术或逻辑与，[top]&amp;amp;[top-1]</span>\n    <span class=\"n\">iandl</span><span class=\"o\">,</span>            <span class=\"c1\">// 逻辑或逻辑与，[top]&amp;amp;&amp;amp;[top-1]</span>\n    <span class=\"n\">ior</span><span class=\"o\">,</span>              <span class=\"c1\">// 算术或逻辑或，[top]|[top-1]</span>\n    <span class=\"n\">iorl</span><span class=\"o\">,</span>             <span class=\"c1\">// 逻辑或逻辑或，[top]||[top-1]</span>\n    <span class=\"n\">ixor</span><span class=\"o\">,</span>             <span class=\"c1\">// 异或，[top]^[top-1]</span>\n    <span class=\"n\">ishl</span><span class=\"o\">,</span>             <span class=\"c1\">// 左移，[top]&amp;lt;&amp;lt;[top-1]</span>\n    <span class=\"n\">ishr</span><span class=\"o\">,</span>             <span class=\"c1\">// 右移，[top]&amp;gt;&amp;gt;[top-1]</span>\n\n    <span class=\"n\">icl</span><span class=\"o\">,</span>              <span class=\"c1\">// 小于，[top]&amp;lt;[top-1]</span>\n    <span class=\"n\">icg</span><span class=\"o\">,</span>              <span class=\"c1\">// 大于，[top]&amp;gt;[top-1]</span>\n    <span class=\"n\">icle</span><span class=\"o\">,</span>             <span class=\"c1\">// 小于等于，[top]&amp;lt;=[top-1]</span>\n    <span class=\"n\">icge</span><span class=\"o\">,</span>             <span class=\"c1\">// 大于等于，[top]&amp;gt;=[top-1]</span>\n    <span class=\"n\">ice</span><span class=\"o\">,</span>              <span class=\"c1\">// 等于，[top]=[top-1]</span>\n    <span class=\"n\">icne</span><span class=\"o\">,</span>             <span class=\"c1\">// 不等于，[top]!=[top-1]</span>\n\n    <span class=\"n\">iarr</span><span class=\"o\">,</span>             <span class=\"c1\">// 生成数组于[top]</span>\n    <span class=\"n\">imap</span>              <span class=\"c1\">// 生成字典于[top]</span>\n<span class=\"o\">}</span>\n</code></pre></div><h2>相关技术一瞥</h2><p>解释器中我实现了部分特性：</p><ol><li>基于栈</li><li>可调用外部方法</li><li>代码页导入</li><li>指令的序列化</li><li><b>匿名函数</b></li><li><b>闭包</b></li><li><b>管道</b></li><li><b>协程</b></li><li><b>多进程切换</b></li><li>同步/异步加载代码</li><li><b>Shell</b></li></ol><p>其中加粗的特性是非常具有实践意义的，最终我把它们全都实现了。例子在<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang/blob/master/README.md\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/jMiniLang<i class=\"icon-external\"></i></a>中。</p><p>基于jMiniLang的有趣的实现：</p><ol><li><a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang/blob/master/src/priv/bajdcc/LALR1/interpret/test/TestInterpret7.java\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bajdcc/jMini</span><span class=\"invisible\">Lang/blob/master/src/priv/bajdcc/LALR1/interpret/test/TestInterpret7.java</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>  | Y Combinator 与 Trampoline。Y Combinator的推导<a href=\"http://link.zhihu.com/?target=http%3A//www.cnblogs.com/bajdcc/p/5757410.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Y Combinator - bajdcc - 博客园<i class=\"icon-external\"></i></a>；Trampoline的出处<a href=\"http://link.zhihu.com/?target=https%3A//github.com/timoxley/functional-javascript-workshop\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">timoxley/functional-javascript-workshop<i class=\"icon-external\"></i></a>。<br></li><li><a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang/blob/master/src/priv/bajdcc/LALR1/interpret/test/TestInterpret9.java\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bajdcc/jMini</span><span class=\"invisible\">Lang/blob/master/src/priv/bajdcc/LALR1/interpret/test/TestInterpret9.java</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> | 生产者消费者模式<br></li><li><a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang/blob/master/src/priv/bajdcc/LALR1/interpret/test/TestInterpret10.java\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bajdcc/jMini</span><span class=\"invisible\">Lang/blob/master/src/priv/bajdcc/LALR1/interpret/test/TestInterpret10.java</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> | 网络仿真<br></li></ol><br><p>后面我会介绍这些有趣的内容。</p><h2>感悟</h2><p>单打独斗做一个硕大的项目不容易，尤其里面充满了各种算法，两年时间（没轮子哥的代码就不止2年了），3W行代码，还写了些注释，听着就恐怖。解释器部分算它1.5W行，只是实现了个Shell。。真是一把辛酸泪……</p><p>这个项目终结了编译原理这门课，看看，把三大文法给干掉了，有完美的输出，唯一的缺陷就是它是java8的，也没有做一些编译优化，只是个简单的前后端。</p><p>我想我是再没有精力重新造个五脏俱全的interpret轮子了，人生难得几回认真。</p>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":26356924,"publishedTime":"2017-04-14T11:20:54+08:00","url":"/p/26356924","title":"【jMiniLang】开篇","summary":"写在前面Release： <a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang/releases/tag/v2.2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/jMiniLang<i class=\"icon-external\"></i></a> 运行：<i>java -jar jMiniLang.jar</i> 课设说明PDF：<a href=\"http://link.zhihu.com/?target=http%3A//files.cnblogs.com/files/bajdcc/%25E4%25BD%25BF%25E7%2594%25A8%25E8%25AF%25B4%25E6%2598%258E.pdf\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">files.cnblogs.com/files</span><span class=\"invisible\">/bajdcc/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>先前几篇Parser系列只是简单做了一个Lexer来解析C语言，奈何做一个Parser没有几个月是做不出来的，造个轮子太昂贵了。索性就翻出以前造的一个大轮子吧…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0}},"commentsCount":0,"likesCount":7,"FULLINFO":true}},"User":{"bajdcc":{"isFollowed":false,"name":"陈安","headline":"专业研究野生技术 https://github.com/bajdcc","avatarUrl":"https://pic4.zhimg.com/v2-cd6d61ad9ef94c41b9e77f8e0f727893_s.jpg","isFollowing":false,"type":"people","slug":"bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","profileUrl":"https://www.zhihu.com/people/bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false,"badge":{"identity":null,"bestAnswerer":null}}},"Comment":{},"favlists":{}},"me":{},"global":{},"columns":{"learncpp":{"following":false,"canManage":false,"href":"/api/columns/learncpp","name":"从零开始构建标准库","creator":{"slug":"bajdcc"},"url":"/learncpp","slug":"learncpp","avatar":{"id":"v2-bf63794c542fc73b11e17014b7e0d01d","template":"https://pic2.zhimg.com/{id}_{size}.jpg"}}},"columnPosts":{},"postComments":{},"postReviewComments":{"comments":[],"newComments":[],"hasMore":true},"favlistsByUser":{},"favlistRelations":{},"promotions":{}}</textarea>

    <script src="//static.zhihu.com/hemingway/common.269c40e8655bf81740fd.js"></script>
<script src="//static.zhihu.com/hemingway/app.3e4cffb648892455be81.js"></script>
<script src="//static.zhihu.com/hemingway/raven.e2158dde2067fd0d67db.js" async defer></script>
  </body>
</html>
