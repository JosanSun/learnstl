<!doctype html>
<html lang="zh-CN">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>【Parser系列】Lexer II - 知乎专栏</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link rel="shortcut icon" href="https://static.zhihu.com/static/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="//static.zhihu.com/hemingway/app.3a8fc183ec8185fd25d3ec69cf0225ed.css" />
    <script>document.documentElement.className += ('ontouchstart' in window) ? ' touch' : ' no-touch'</script>
  </head>
  <body>

    <div id="react-root"></div>
    <textarea id="clientConfig" hidden>{"debug":false,"apiRoot":"","paySDK":"https://pay.zhihu.com/api/js","name":"production","instance":"column","tokens":{"X-XSRF-TOKEN":null,"X-UDID":null,"Authorization":"oauth c3cef7c66a1843f8b3a9e6a1e3160e20"}}</textarea>
    <textarea id="preloadedState" hidden>{"database":{"Post":{"26193530":{"title":"【Parser系列】Lexer II","author":"bajdcc","content":"<h2>写在前面</h2><p><a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/CParser\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/CParser<i class=\"icon-external\"></i></a><br></p><p>这是Lexer部分第二章，比上一章更新了识别数字/字符/字符串的功能。</p><p>总体而言，这部分的思路是非常清晰的。如题图所示，我们制作的Lexer已将原代码完整解析了出来。由于Lexer缺乏解析关键字和操作符的功能，因此要在下一章中才能解析真正的C文件。</p><p>整个扫描算法是一趟扫描，无回溯，复杂度O(n)。</p><h2>正则表达式</h2><p>目前使用的正则表达式：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">using</span> <span class=\"n\">regex_t</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span><span class=\"p\">;</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_string</span><span class=\"p\">{</span> <span class=\"s\">R\"(([^\\\\])|(?:\\\\(?:([bfnrtv'\"\\\\])|(?:0(\\d{1,2}))|(\\d)|(?:x([:xdigit:]{1,2})))))\"</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_char</span><span class=\"p\">{</span> <span class=\"s\">R\"('(?:([^'\"\\\\])|(?:\\\\(?:([bfnrtv'\"\\\\])|(?:0(\\d{1,2}))|(\\d)|(?:x([:xdigit:]{1,2})))))')\"</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_digit</span><span class=\"p\">{</span> <span class=\"s\">R\"(((?:\\d*(\\.)?\\d+|\\d+(\\.)?\\d*)(?:[eE][+-]?\\d+)?)([uU])?([fFdDiIlL])?)\"</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_alpha</span><span class=\"p\">{</span> <span class=\"s\">R\"([[:alpha:]_]\\w*)\"</span> <span class=\"p\">};</span>\n<span class=\"n\">regex_t</span> <span class=\"n\">r_space</span><span class=\"p\">{</span> <span class=\"s\">R\"(([ ]+)|((?:\\r\\n)+)|(\\n+))\"</span> <span class=\"p\">};</span>\n</code></pre></div><p>用图来展现：</p><p><b><u>字符串<noscript><img src=\"https://pic2.zhimg.com/v2-36aa8d17c10b2bc98a88d8ee1cdff631_b.png\" data-rawwidth=\"732\" data-rawheight=\"602\" class=\"origin_image zh-lightbox-thumb\" width=\"732\" data-original=\"https://pic2.zhimg.com/v2-36aa8d17c10b2bc98a88d8ee1cdff631_r.png\"></noscript><img src=\"//zhstatic.zhihu.com/assets/zhihu/ztext/whitedot.jpg\" data-rawwidth=\"732\" data-rawheight=\"602\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"732\" data-original=\"https://pic2.zhimg.com/v2-36aa8d17c10b2bc98a88d8ee1cdff631_r.png\" data-actualsrc=\"https://pic2.zhimg.com/v2-36aa8d17c10b2bc98a88d8ee1cdff631_b.png\"></u></b></p><p><b><u>字符<noscript><img src=\"https://pic3.zhimg.com/v2-2669550901ea0c49c5eb5b2163f5cc06_b.png\" data-rawwidth=\"806\" data-rawheight=\"587\" class=\"origin_image zh-lightbox-thumb\" width=\"806\" data-original=\"https://pic3.zhimg.com/v2-2669550901ea0c49c5eb5b2163f5cc06_r.png\"></noscript><img src=\"//zhstatic.zhihu.com/assets/zhihu/ztext/whitedot.jpg\" data-rawwidth=\"806\" data-rawheight=\"587\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"806\" data-original=\"https://pic3.zhimg.com/v2-2669550901ea0c49c5eb5b2163f5cc06_r.png\" data-actualsrc=\"https://pic3.zhimg.com/v2-2669550901ea0c49c5eb5b2163f5cc06_b.png\"></u></b></p><p><b><u>数字<noscript><img src=\"https://pic2.zhimg.com/v2-de3ee893e1bdc979bdca4cd5c3a13c89_b.png\" data-rawwidth=\"1134\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"1134\" data-original=\"https://pic2.zhimg.com/v2-de3ee893e1bdc979bdca4cd5c3a13c89_r.png\"></noscript><img src=\"//zhstatic.zhihu.com/assets/zhihu/ztext/whitedot.jpg\" data-rawwidth=\"1134\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1134\" data-original=\"https://pic2.zhimg.com/v2-de3ee893e1bdc979bdca4cd5c3a13c89_r.png\" data-actualsrc=\"https://pic2.zhimg.com/v2-de3ee893e1bdc979bdca4cd5c3a13c89_b.png\"></u></b></p><p><b><u>变量名<noscript><img src=\"https://pic3.zhimg.com/v2-f821228cc6d8ab05a529c95c1fb35a52_b.png\" data-rawwidth=\"366\" data-rawheight=\"126\" class=\"content_image\" width=\"366\"></noscript><img src=\"//zhstatic.zhihu.com/assets/zhihu/ztext/whitedot.jpg\" data-rawwidth=\"366\" data-rawheight=\"126\" class=\"content_image lazy\" width=\"366\" data-actualsrc=\"https://pic3.zhimg.com/v2-f821228cc6d8ab05a529c95c1fb35a52_b.png\"></u></b></p><p><b><u>空白字符<noscript><img src=\"https://pic4.zhimg.com/v2-319d58133ec5ac58a1350aaa038f4f2b_b.png\" data-rawwidth=\"332\" data-rawheight=\"409\" class=\"content_image\" width=\"332\"></noscript><img src=\"//zhstatic.zhihu.com/assets/zhihu/ztext/whitedot.jpg\" data-rawwidth=\"332\" data-rawheight=\"409\" class=\"content_image lazy\" width=\"332\" data-actualsrc=\"https://pic4.zhimg.com/v2-319d58133ec5ac58a1350aaa038f4f2b_b.png\"></u></b></p><p>通过上述可视化效果图，大家可以对正则表达式所能匹配的字串有一个直观的认识。</p><p>写好主逻辑：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">lexer_t</span> <span class=\"n\">CLexer</span><span class=\"o\">::</span><span class=\"n\">next</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">local</span><span class=\"p\">();</span>\n    <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isalpha</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"sc\">'_'</span><span class=\"p\">)</span> <span class=\"c1\">// 变量名或关键字</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">next_alpha</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isdigit</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"sc\">'.'</span><span class=\"p\">)</span> <span class=\"c1\">// 数字</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">next_digit</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isspace</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span> <span class=\"c1\">// 空白字符</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">next_space</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"sc\">'\\''</span><span class=\"p\">)</span> <span class=\"c1\">// 字符</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">next_char</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"sc\">'\\\"'</span><span class=\"p\">)</span> <span class=\"c1\">// 字符串</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">next_string</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">type</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>然后就可以开始新的解析任务了！</p><h2>识别数字</h2><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">lexer_t</span> <span class=\"n\">CLexer</span><span class=\"o\">::</span><span class=\"n\">next_digit</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex_search</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cbegin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cend</span><span class=\"p\">(),</span> <span class=\"n\">sm</span><span class=\"p\">,</span> <span class=\"n\">r_digit</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">auto</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">();</span>\n        <span class=\"k\">auto</span> <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"p\">{</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'F'</span><span class=\"o\">:</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'f'</span><span class=\"o\">:</span>\n                    <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_float</span><span class=\"p\">;</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_float</span> <span class=\"o\">=</span> <span class=\"n\">LEX_T</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">)(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atof</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">()));</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'D'</span><span class=\"o\">:</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'d'</span><span class=\"o\">:</span>\n                    <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_double</span><span class=\"p\">;</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_double</span> <span class=\"o\">=</span> <span class=\"n\">LEX_T</span><span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"p\">)(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atof</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">()));</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'I'</span><span class=\"o\">:</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'i'</span><span class=\"o\">:</span>\n                    <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_int</span><span class=\"p\">;</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_int</span> <span class=\"o\">=</span> <span class=\"n\">LEX_T</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atoi</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">()));</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'L'</span><span class=\"o\">:</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'l'</span><span class=\"o\">:</span>\n                    <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_long</span><span class=\"p\">;</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_long</span> <span class=\"o\">=</span> <span class=\"n\">LEX_T</span><span class=\"p\">(</span><span class=\"kt\">long</span><span class=\"p\">)(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atol</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">()));</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">default</span><span class=\"o\">:</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">else</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"p\">{</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'I'</span><span class=\"o\">:</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'i'</span><span class=\"o\">:</span>\n                    <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_uint</span><span class=\"p\">;</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_uint</span> <span class=\"o\">=</span> <span class=\"n\">LEX_T</span><span class=\"p\">(</span><span class=\"n\">uint</span><span class=\"p\">)(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atof</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">()));</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'L'</span><span class=\"o\">:</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'l'</span><span class=\"o\">:</span>\n                    <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_ulong</span><span class=\"p\">;</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_ulong</span> <span class=\"o\">=</span> <span class=\"n\">LEX_T</span><span class=\"p\">(</span><span class=\"n\">ulong</span><span class=\"p\">)(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atof</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">()));</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">default</span><span class=\"o\">:</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">matched</span> <span class=\"o\">||</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_double</span><span class=\"p\">;</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_double</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atof</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">else</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_int</span><span class=\"p\">;</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_int</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atoi</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">length</span><span class=\"p\">());</span>\n        <span class=\"k\">return</span> <span class=\"n\">type</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"digit not match\"</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>sm[N]表示取group #N，这个group在上面的正则表达式可视化效果图中有。group有时会匹配到，而有时匹配不到，这时需要用sm[N].matched去查看是否匹配。</p><p>主要逻辑：</p><ol><li>结尾带有“uU”、“fFdDiIlL”其中之一字样，如1234i代表int类型的1234，5678UL代表unsigned long类型的5678</li><li>默认是int类型，如有小数点则是double类型</li><li>为了防止类似3e8这样的数识别错误（atoi不识别3e8，会识别成3），使用先atof再强转成int的方法</li></ol><br><h2>识别单个字符</h2><p>单个字符的识别说起来简单，像'a'这样只要char c = 'a'就可以了，但是考虑到转义，问题就复杂了。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">lexer_t</span> <span class=\"n\">CLexer</span><span class=\"o\">::</span><span class=\"n\">next_char</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex_search</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cbegin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cend</span><span class=\"p\">(),</span> <span class=\"n\">sm</span><span class=\"p\">,</span> <span class=\"n\">r_char</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">length</span><span class=\"p\">());</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">isprint</span><span class=\"p\">(</span><span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span><span class=\"p\">))</span>\n                <span class=\"k\">return</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span> <span class=\"n\">l_char</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_char</span><span class=\"p\">;</span>\n            <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"p\">{</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'b'</span><span class=\"o\">:</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"sc\">'\\b'</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'f'</span><span class=\"o\">:</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"sc\">'\\f'</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'n'</span><span class=\"o\">:</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'r'</span><span class=\"o\">:</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"sc\">'\\r'</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'t'</span><span class=\"o\">:</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"sc\">'\\t'</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'v'</span><span class=\"o\">:</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"sc\">'\\v'</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'\\''</span><span class=\"o\">:</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"sc\">'\\''</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'\\\"'</span><span class=\"o\">:</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"sc\">'\\\"'</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'\\\\'</span><span class=\"o\">:</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"sc\">'\\\\'</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"k\">default</span><span class=\"o\">:</span>\n                <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">length</span><span class=\"p\">());</span>\n            <span class=\"k\">return</span> <span class=\"n\">type</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"n\">oct</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">strtol</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">().</span><span class=\"n\">c_str</span><span class=\"p\">(),</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">);</span>\n            <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"kt\">char</span><span class=\"p\">(</span><span class=\"n\">oct</span><span class=\"p\">);</span>\n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">length</span><span class=\"p\">());</span>\n            <span class=\"k\">return</span> <span class=\"n\">l_char</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atoi</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">().</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n            <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"kt\">char</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">length</span><span class=\"p\">());</span>\n            <span class=\"k\">return</span> <span class=\"n\">l_char</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"n\">hex</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">strtol</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">().</span><span class=\"n\">c_str</span><span class=\"p\">(),</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">);</span>\n            <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_char</span> <span class=\"o\">=</span> <span class=\"kt\">char</span><span class=\"p\">(</span><span class=\"n\">hex</span><span class=\"p\">);</span>\n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">length</span><span class=\"p\">());</span>\n            <span class=\"k\">return</span> <span class=\"n\">l_char</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"char not match\"</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>主要逻辑：</p><ol><li>类似【'a'】这种的，直接存入char中</li><li>转义【'\\r'】,【 '\\n'】等等，直接判断r、n，返回\\r、\\n</li><li>遇到转义【'\\0'】,【 '\\1'】，直接返回0、1</li><li>遇到八进制转义【'\\0xx'】或十六进制转义【'\\xFF'】，返回strtol转码后的结果</li></ol><h2>识别字符串</h2><p>字符串的识别比字符识别更麻烦，因为正则表达式匹配出的group是有限的，所以只能一个个字符进行匹配。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">lexer_t</span> <span class=\"n\">CLexer</span><span class=\"o\">::</span><span class=\"n\">next_string</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span><span class=\"p\">.</span><span class=\"n\">clear</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;;)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex_search</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cbegin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cend</span><span class=\"p\">(),</span> <span class=\"n\">sm</span><span class=\"p\">,</span> <span class=\"n\">r_string</span><span class=\"p\">))</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">idx</span> <span class=\"o\">+=</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">length</span><span class=\"p\">();</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">auto</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"sc\">'\\\"'</span><span class=\"p\">)</span>\n                <span class=\"p\">{</span>\n                    <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">idx</span> <span class=\"o\">-</span> <span class=\"n\">index</span><span class=\"p\">);</span>\n                    <span class=\"k\">return</span> <span class=\"n\">l_string</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">isprint</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span>\n                    <span class=\"k\">return</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">auto</span> <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_char</span><span class=\"p\">;</span>\n                <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"p\">{</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'b'</span><span class=\"o\">:</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"sc\">'\\b'</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'f'</span><span class=\"o\">:</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"sc\">'\\f'</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'n'</span><span class=\"o\">:</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'r'</span><span class=\"o\">:</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"sc\">'\\r'</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'t'</span><span class=\"o\">:</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"sc\">'\\t'</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'v'</span><span class=\"o\">:</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"sc\">'\\v'</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'\\''</span><span class=\"o\">:</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"sc\">'\\''</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'\\\"'</span><span class=\"o\">:</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"sc\">'\\\"'</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"sc\">'\\\\'</span><span class=\"o\">:</span>\n                    <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"sc\">'\\\\'</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">default</span><span class=\"o\">:</span>\n                    <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">auto</span> <span class=\"n\">oct</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">strtol</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">().</span><span class=\"n\">c_str</span><span class=\"p\">(),</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">);</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"kt\">char</span><span class=\"p\">(</span><span class=\"n\">oct</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">auto</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atoi</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">().</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"kt\">char</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">].</span><span class=\"n\">matched</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">auto</span> <span class=\"n\">hex</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">strtol</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">().</span><span class=\"n\">c_str</span><span class=\"p\">(),</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">);</span>\n                <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_string</span> <span class=\"o\">+=</span> <span class=\"kt\">char</span><span class=\"p\">(</span><span class=\"n\">hex</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">else</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"string not match\"</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>主要逻辑：</p><ol><li>如果遇到双引号【 \" 】，则中止，返回结果</li><li>类似【'a'】这种的，直接添加</li><li>转义【'\\r'】,【 '\\n'】等等，直接判断r、n，添加\\r、\\n</li><li>遇到转义【'\\0'】,【 '\\1'】，直接添加0、1</li><li>遇到八进制转义【'\\0xx'】或十六进制转义【'\\xFF'】，添加strtol转码后的结果</li><li>继续匹配下一个</li></ol><h2>测试</h2><h2><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"cp\">#define OUTPUT(l, t) printf(\"[%03d:%03d] %-12s - %s\\n\", \\</span>\n<span class=\"cp\">    l.get_last_line(), \\</span>\n<span class=\"cp\">    l.get_last_column(), \\</span>\n<span class=\"cp\">    LEX_STRING(l.get_type()).c_str(), \\</span>\n<span class=\"cp\">    l.current().c_str());</span>\n\n<span class=\"cp\">#define TEST(l, t, v) \\</span>\n<span class=\"cp\">    assert(l.next() == l_##t); \\</span>\n<span class=\"cp\">    assert(l.get_##t() == v); \\</span>\n<span class=\"cp\">    OUTPUT(l, t);</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"s\">\"ABC </span><span class=\"se\">\\r\\n\\n\\n</span><span class=\"s\">.2e8 6e5ul3f1234  a_ _b '</span><span class=\"se\">\\\\</span><span class=\"s\">0''a' '</span><span class=\"se\">\\\\</span><span class=\"s\">'''</span><span class=\"se\">\\\\</span><span class=\"s\">n''</span><span class=\"se\">\\x41</span><span class=\"s\">' </span><span class=\"se\">\\\"\\\"\\\"</span><span class=\"s\">abc</span><span class=\"se\">\\\"</span><span class=\"s\"> </span><span class=\"se\">\\\"\\\\\\\"\\\"</span><span class=\"s\"> </span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"# 输入 </span><span class=\"se\">\\n</span><span class=\"s\">----[[[</span><span class=\"se\">\\n</span><span class=\"s\">%s</span><span class=\"se\">\\n</span><span class=\"s\">----]]]</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">);</span>\n\n    <span class=\"n\">CLexer</span> <span class=\"n\">lexer</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">);</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\"># 解析 </span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">identifier</span><span class=\"p\">,</span> <span class=\"s\">\"ABC\"</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">newline</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">newline</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"p\">,</span> <span class=\"mf\">.2e8</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">ulong</span><span class=\"p\">,</span> <span class=\"mf\">6e5</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"p\">,</span> <span class=\"mf\">3.0f</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"mi\">1234</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">identifier</span><span class=\"p\">,</span> <span class=\"s\">\"a_\"</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">identifier</span><span class=\"p\">,</span> <span class=\"s\">\"_b\"</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"p\">,</span> <span class=\"sc\">'\\0'</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"p\">,</span> <span class=\"sc\">'a'</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"p\">,</span> <span class=\"sc\">'\\''</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"p\">,</span> <span class=\"sc\">'\\n'</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"p\">,</span> <span class=\"sc\">'A'</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"s\">\"\"</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"s\">\"abc\"</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"s\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">newline</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></h2><p>偷懒只写了部分测试代码，理由是完善Lexer后随便找一篇C代码扔进去测试即可，不用费心。不是说自己产生TEST语句，只是根据Log与源码比对一下。。</p><h2>阶段性总结</h2><p>词法分析这一阶段做得还算平滑，用了regex之后，节省了大部分的时间。那么后面的任务就是继续完善Lexer，除了解析关键词/操作符外，还要把解析错误放入record中，后面需要根据语义来反推这个错误的Lexer应该是什么类型（这个实现有点难喔~）。</p><p>总结一下Lexer：</p><ol><li>识别正确，返回类型，存储结果</li><li>识别失败，保存入record，跳过（skip多少位还需要斟酌）</li><li>识别失败的，给出一个关于这个token的类型的猜测</li><li>对于识别失败的，用AST反推类型，并将其塞入AST</li><li>如果有个token被遗漏了，导致AST没法成功生成，如何让parser无视这样一些小的词法错误？这需要parser能基于当前上下文给出一个关于token类型的合理猜测</li><li>怎样给出合理猜测是非常值得思考的，也是parser的核心之一啊，花会编译报个错别人都看不懂，这样的parser有个屁用</li></ol><p>后面的任务会越来越有挑战性，写代码前也需要打打草稿了 :)</p>","updated":"2017-04-05T15:37:10.000Z","canComment":false,"commentPermission":"anyone","commentCount":0,"collapsedCount":0,"likeCount":6,"state":"published","isLiked":false,"slug":"26193530","isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic4.zhimg.com/v2-12fcbe73a8340d20a9488ae0228ff11f_r.png","links":{"comments":"/api/posts/26193530/comments"},"reviewers":[],"topics":[{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"},{"url":"https://www.zhihu.com/topic/20032517","id":"20032517","name":"Parser"},{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"}],"titleImageSize":{"width":714,"height":665},"href":"/api/posts/26193530","excerptTitle":"","column":{"slug":"learncpp","name":"从零开始构建标准库"},"tipjarState":"inactivated","sourceUrl":"","pageCommentsCount":0,"snapshotUrl":"","publishedTime":"2017-04-05T23:37:10+08:00","url":"/p/26193530","lastestLikers":[{"profileUrl":"https://www.zhihu.com/people/yangrq-15","bio":null,"hash":"5c3dd7b14181accdb1edaf6ba4e71158","uid":620000990422896600,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"yangrq-15","avatar":{"id":"03b42d62450ffcb05428b958512bea22","template":"https://pic3.zhimg.com/{id}_{size}.jpg"},"name":"yangrq"},{"profileUrl":"https://www.zhihu.com/people/ych1987","bio":null,"hash":"a8942a2ba657ada40c9edc06386bd183","uid":48394898767872,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"ych1987","avatar":{"id":"da8e974dc","template":"https://pic1.zhimg.com/{id}_{size}.jpg"},"name":"ychlm"},{"profileUrl":"https://www.zhihu.com/people/ykp-41","bio":null,"hash":"ca266b6ff1281e8cb97cdd0599186d11","uid":663703750858903600,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"ykp-41","avatar":{"id":"a14493b5ac5914cb687ab374cd2a6ae8","template":"https://pic1.zhimg.com/{id}_{size}.jpg"},"name":"ykp"},{"profileUrl":"https://www.zhihu.com/people/hu-zhi-16-31","bio":"Null","hash":"37427378ee707ad6023b5f716a98e494","uid":59796296302592,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"hu-zhi-16-31","avatar":{"id":"da8e974dc","template":"https://pic1.zhimg.com/{id}_{size}.jpg"},"name":"乎治"},{"profileUrl":"https://www.zhihu.com/people/Himself65","bio":"爱好 计算机/数学","hash":"c5f581c2e6cac28fe4ee1cacf9f82c44","uid":629294960994947100,"isOrg":false,"description":"努力提高知识水平。\n理想是有三屏电脑的编程猿。","isOrgWhiteList":false,"slug":"Himself65","avatar":{"id":"v2-4575a7e943a5b191f174516eb3597f3e","template":"https://pic3.zhimg.com/{id}_{size}.jpg"},"name":"扩散性百万甜面包"}],"summary":"写在前面<a href=\"https://github.com/bajdcc/CParser\" data-editable=\"true\" data-title=\"bajdcc/CParser\">bajdcc/CParser</a> 这是Lexer部分第二章，比上一章更新了识别数字/字符/字符串的功能。总体而言，这部分的思路是非常清晰的。如题图所示，我们制作的Lexer已将原代码完整解析了出来。由于Lexer缺乏解析关键字和操作符的功能，因此要在下一章中才能解析…","reviewingCommentsCount":0,"meta":{"previous":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic2.zhimg.com/v2-1eeb66213f95fdbe1d27a530c6aaf465_r.png","links":{"comments":"/api/posts/26142441/comments"},"topics":[{"url":"https://www.zhihu.com/topic/20032517","id":"20032517","name":"Parser"},{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"},{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"}],"href":"/api/posts/26142441","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<h2>写在前面</h2><p>代码：<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/CParser\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/CParser<i class=\"icon-external\"></i></a></p><p>本节内容效果图：</p><p><img src=\"http://pic4.zhimg.com/v2-7a31bbe400694f30bc5e2f5cb35ba3db_b.png\" data-rawwidth=\"351\" data-rawheight=\"325\" class=\"content_image\" width=\"351\">任务非常简单——识别空格/回车、变量名、数字。</p><h2>准备工作</h2><p><b><u>思考一：类型</u></b></p><p>要解析C语言，那么肯定得考虑基本数据类型了，如int、char等。然而，我们将把每个识别出的token标记一个类型，这是lexer中的类型（用enum表示），故应有一个对应关系。</p><p>所以要完成的第一个任务，创建映射——  <b>从 lexer_t/enum 到 基本数据类型</b>。</p><p>lexer_t如下：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"k\">enum</span> <span class=\"n\">lexer_t</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">l_none</span><span class=\"p\">,</span>\n    <span class=\"n\">l_error</span><span class=\"p\">,</span>\n    <span class=\"n\">l_char</span><span class=\"p\">,</span>\n    <span class=\"n\">l_uchar</span><span class=\"p\">,</span>\n    <span class=\"n\">l_short</span><span class=\"p\">,</span>\n    <span class=\"n\">l_ushort</span><span class=\"p\">,</span>\n    <span class=\"n\">l_int</span><span class=\"p\">,</span>\n    <span class=\"n\">l_uint</span><span class=\"p\">,</span>\n    <span class=\"n\">l_long</span><span class=\"p\">,</span>\n    <span class=\"n\">l_ulong</span><span class=\"p\">,</span>\n    <span class=\"n\">l_float</span><span class=\"p\">,</span>\n    <span class=\"n\">l_double</span><span class=\"p\">,</span>\n    <span class=\"n\">l_operator</span><span class=\"p\">,</span>\n    <span class=\"n\">l_keyword</span><span class=\"p\">,</span>\n    <span class=\"n\">l_identifier</span><span class=\"p\">,</span>\n    <span class=\"n\">l_string</span><span class=\"p\">,</span>\n    <span class=\"n\">l_comment</span><span class=\"p\">,</span>\n    <span class=\"n\">l_space</span><span class=\"p\">,</span>\n    <span class=\"n\">l_newline</span><span class=\"p\">,</span>\n    <span class=\"n\">l_end</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>其中l_end作为最后一个元素，起判断出界的作用。</p><p><b>如何完成一个从enum/int到type的映射呢？</b></p><p>假设我写一个函数：  type get_type(lexer_t)，那么这个type是不确定的！什么函数的返回值或者参数可以有多个type呢？想想看！如std::make_shared，std::make_pair，它的参数和返回值类型是可变的，所以解决方案是——类模版。</p><p>所以，写好一个基础类：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">template</span><span class=\"o\">&amp;lt;</span><span class=\"n\">lexer_t</span><span class=\"o\">&amp;gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">base_t</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">using</span> <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>base_t作为判断类型的类模版，它的type成员是关键。</p><p>接下来就是将其特化，为了简单起见，我偷懒用了宏 :)    PS：后面这样的宏会很多，因为我不想写同样的代码。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"cp\">#define DEFINE_BASE_TYPE(t, obj) \\</span>\n<span class=\"cp\">template&amp;lt;&amp;gt; \\</span>\n<span class=\"cp\">struct base_t&amp;lt;t&amp;gt; \\</span>\n<span class=\"cp\">{ \\</span>\n<span class=\"cp\">    using type = obj; \\</span>\n<span class=\"cp\">};</span>\n\n<span class=\"n\">DEFINE_BASE_TYPE</span><span class=\"p\">(</span><span class=\"n\">l_char</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"p\">)</span>\n<span class=\"n\">DEFINE_BASE_TYPE</span><span class=\"p\">(</span><span class=\"n\">l_uchar</span><span class=\"p\">,</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">char</span><span class=\"p\">)</span>\n<span class=\"n\">DEFINE_BASE_TYPE</span><span class=\"p\">(</span><span class=\"n\">l_short</span><span class=\"p\">,</span> <span class=\"kt\">short</span><span class=\"p\">)</span>\n<span class=\"n\">DEFINE_BASE_TYPE</span><span class=\"p\">(</span><span class=\"n\">l_ushort</span><span class=\"p\">,</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">short</span><span class=\"p\">)</span>\n<span class=\"n\">DEFINE_BASE_TYPE</span><span class=\"p\">(</span><span class=\"n\">l_int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">)</span>\n<span class=\"n\">DEFINE_BASE_TYPE</span><span class=\"p\">(</span><span class=\"n\">l_uint</span><span class=\"p\">,</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span><span class=\"p\">)</span>\n<span class=\"n\">DEFINE_BASE_TYPE</span><span class=\"p\">(</span><span class=\"n\">l_long</span><span class=\"p\">,</span> <span class=\"kt\">long</span><span class=\"p\">)</span>\n<span class=\"n\">DEFINE_BASE_TYPE</span><span class=\"p\">(</span><span class=\"n\">l_ulong</span><span class=\"p\">,</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">long</span><span class=\"p\">)</span>\n<span class=\"n\">DEFINE_BASE_TYPE</span><span class=\"p\">(</span><span class=\"n\">l_float</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"p\">)</span>\n<span class=\"n\">DEFINE_BASE_TYPE</span><span class=\"p\">(</span><span class=\"n\">l_double</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"p\">)</span>\n<span class=\"n\">DEFINE_BASE_TYPE</span><span class=\"p\">(</span><span class=\"n\">l_operator</span><span class=\"p\">,</span> <span class=\"n\">operator_t</span><span class=\"p\">)</span>\n<span class=\"n\">DEFINE_BASE_TYPE</span><span class=\"p\">(</span><span class=\"n\">l_keyword</span><span class=\"p\">,</span> <span class=\"n\">keyword_t</span><span class=\"p\">)</span>\n<span class=\"n\">DEFINE_BASE_TYPE</span><span class=\"p\">(</span><span class=\"n\">l_identifier</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">)</span>\n<span class=\"n\">DEFINE_BASE_TYPE</span><span class=\"p\">(</span><span class=\"n\">l_string</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">)</span>\n<span class=\"n\">DEFINE_BASE_TYPE</span><span class=\"p\">(</span><span class=\"n\">l_comment</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">)</span>\n<span class=\"n\">DEFINE_BASE_TYPE</span><span class=\"p\">(</span><span class=\"n\">l_space</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">)</span>\n<span class=\"n\">DEFINE_BASE_TYPE</span><span class=\"p\">(</span><span class=\"n\">l_newline</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">)</span>\n\n<span class=\"cp\">#define LEX_T(t) base_t&amp;lt;l_##t&amp;gt;::type</span>\n</code></pre></div><p>现在，我想得到字符串的类型，只要使用base_t&amp;lt;l_string&amp;gt;::type即可，或是宏LEX_T(string)。</p><p><u><b>思考二：识别</b></u></p><p>如何识别空格、变量名、数字呢？这里用到正则表达式——std::regex。关于正则表达式的资料很丰富，这个工具非常有用。</p><p>好了，这里贴出识别的regex：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span>    <span class=\"n\">regex_t</span> <span class=\"n\">r_digit</span><span class=\"p\">{</span> <span class=\"s\">R\"((\\d*\\.?\\d+|\\d+\\.?\\d*)([e][+-]?\\d+)?)\"</span> <span class=\"p\">};</span>\n    <span class=\"n\">regex_t</span> <span class=\"n\">r_alpha</span><span class=\"p\">{</span> <span class=\"s\">R\"([[:alpha:]_]\\w*)\"</span> <span class=\"p\">};</span>\n    <span class=\"n\">regex_t</span> <span class=\"n\">r_space</span><span class=\"p\">{</span> <span class=\"s\">R\"(([ ]+)|((\\r\\n)+)|(\\n+))\"</span> <span class=\"p\">};</span>\n</code></pre></div><ul><li>数字的识别图参考<a href=\"https://zhuanlan.zhihu.com/p/25879478\" class=\"internal\">【LeetCode】065-验证数字 - 知乎专栏</a> ，匹配后用atof转成数字即可<br></li><li>变量名的识别主要是第一位不能是数字</li><li>空格/回车需要精确识别是哪一种，因为是回车的话行数会加一，以便为后期报错提供信息（某行某列出错）</li></ul><br><h2>动手写Lexer</h2><p><b><u>Lexer.h</u></b></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"c1\">// 词法分析</span>\n<span class=\"k\">class</span> <span class=\"nc\">CLexer</span>\n<span class=\"p\">{</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"k\">explicit</span> <span class=\"n\">CLexer</span><span class=\"p\">(</span><span class=\"n\">string_t</span> <span class=\"n\">str</span><span class=\"p\">);</span>\n    <span class=\"o\">~</span><span class=\"n\">CLexer</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// 外部接口</span>\n<span class=\"cp\">#define DEFINE_LEXER_GETTER(t) LEX_T(t) get_##t();</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"n\">uchar</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"kt\">short</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"n\">ushort</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"n\">uint</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"kt\">long</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"n\">ulong</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"k\">operator</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"n\">keyword</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"n\">identifier</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"n\">comment</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"n\">space</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"n\">newline</span><span class=\"p\">)</span>\n<span class=\"cp\">#undef DEFINE_LEXER_GETTER</span>\n\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"n\">lexer_t</span> <span class=\"n\">next</span><span class=\"p\">();</span>\n\n    <span class=\"n\">lexer_t</span> <span class=\"nf\">get_type</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"nf\">get_line</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"nf\">get_column</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"nf\">get_last_line</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"nf\">get_last_column</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n    <span class=\"n\">string_t</span> <span class=\"nf\">current</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n\n<span class=\"k\">private</span><span class=\"o\">:</span>\n\n    <span class=\"kt\">void</span> <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">inc</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"n\">newline</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 内部解析</span>\n    <span class=\"n\">lexer_t</span> <span class=\"nf\">next_digit</span><span class=\"p\">();</span>\n    <span class=\"n\">lexer_t</span> <span class=\"nf\">next_alpha</span><span class=\"p\">();</span>\n    <span class=\"n\">lexer_t</span> <span class=\"nf\">next_space</span><span class=\"p\">();</span>\n\n    <span class=\"kt\">int</span> <span class=\"nf\">local</span><span class=\"p\">();</span>\n\n<span class=\"k\">private</span><span class=\"o\">:</span>\n    <span class=\"n\">string_t</span> <span class=\"n\">str</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"p\">{</span> <span class=\"mi\">0</span> <span class=\"p\">};</span>\n    <span class=\"kt\">int</span> <span class=\"n\">last_index</span><span class=\"p\">{</span> <span class=\"mi\">0</span> <span class=\"p\">};</span>\n    <span class=\"kt\">int</span> <span class=\"n\">length</span><span class=\"p\">{</span> <span class=\"mi\">0</span> <span class=\"p\">};</span>\n\n    <span class=\"n\">lexer_t</span> <span class=\"n\">type</span> <span class=\"p\">{</span> <span class=\"n\">l_none</span> <span class=\"p\">};</span>\n    <span class=\"kt\">int</span> <span class=\"n\">line</span><span class=\"p\">{</span> <span class=\"mi\">1</span> <span class=\"p\">};</span>\n    <span class=\"kt\">int</span> <span class=\"n\">column</span><span class=\"p\">{</span> <span class=\"mi\">1</span> <span class=\"p\">};</span>\n    <span class=\"kt\">int</span> <span class=\"n\">last_line</span><span class=\"p\">{</span> <span class=\"mi\">1</span> <span class=\"p\">};</span>\n    <span class=\"kt\">int</span> <span class=\"n\">last_column</span><span class=\"p\">{</span> <span class=\"mi\">1</span> <span class=\"p\">};</span>\n\n    <span class=\"k\">struct</span>\n    <span class=\"p\">{</span>\n<span class=\"cp\">#define DEFINE_LEXER_GETTER(t) LEX_T(t) _##t;</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"n\">uchar</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"kt\">short</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"n\">ushort</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"n\">uint</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"kt\">long</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"n\">ulong</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"k\">operator</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"n\">keyword</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"n\">identifier</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"n\">comment</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"n\">space</span><span class=\"p\">)</span>\n        <span class=\"n\">DEFINE_LEXER_GETTER</span><span class=\"p\">(</span><span class=\"n\">newline</span><span class=\"p\">)</span>\n<span class=\"cp\">#undef DEFINE_LEXER_GETTER</span>\n    <span class=\"p\">}</span> <span class=\"n\">bags</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// 正则表达式</span>\n    <span class=\"n\">smatch_t</span> <span class=\"n\">sm</span><span class=\"p\">;</span>\n    <span class=\"n\">regex_t</span> <span class=\"n\">r_digit</span><span class=\"p\">{</span> <span class=\"s\">R\"((\\d*\\.?\\d+|\\d+\\.?\\d*)([e][+-]?\\d+)?)\"</span> <span class=\"p\">};</span>\n    <span class=\"n\">regex_t</span> <span class=\"n\">r_alpha</span><span class=\"p\">{</span> <span class=\"s\">R\"([[:alpha:]_]\\w*)\"</span> <span class=\"p\">};</span>\n    <span class=\"n\">regex_t</span> <span class=\"n\">r_space</span><span class=\"p\">{</span> <span class=\"s\">R\"(([ ]+)|((?:\\r\\n)+)|(\\n+))\"</span> <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>它的构造函数需要一个字符串，那就是所要解析的文本。几处宏是方便实现set_XXX/get_XXX。</p><p>数据成员：</p><ul><li>index / last_index：当前遍历/前次遍历的str的指针</li><li>type：前次识别的类型</li><li>line / last_line：当前/前次 行数</li><li>column / last_column：当前/前次 列数</li></ul><p>方法：</p><ul><li>get_XXX：略</li><li>next：解析下一个token，这是核心功能</li><li>move：识别token后，刷新当前所在位置（某行某列）</li><li>local：返回当前指针指向处的字符，返回int类型是方便兼容ANSI/UNICODE</li><li>next_XXX：识别数字、空格、变量名</li></ul><br><p><b><u>Lexer.cpp</u></b></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">lexer_t</span> <span class=\"n\">CLexer</span><span class=\"o\">::</span><span class=\"n\">next</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">local</span><span class=\"p\">();</span>\n    <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isalpha</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"sc\">'_'</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">next_alpha</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isdigit</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">next_digit</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isspace</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">next_space</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">type</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">string_t</span> <span class=\"n\">CLexer</span><span class=\"o\">::</span><span class=\"n\">current</span><span class=\"p\">()</span> <span class=\"k\">const</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">type</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"nl\">l_space</span><span class=\"p\">:</span>\n    <span class=\"k\">case</span> <span class=\"nl\">l_newline</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s\">\"... [\"</span> <span class=\"o\">+</span> <span class=\"n\">LEX_STRING</span><span class=\"p\">(</span><span class=\"n\">type</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">\"]\"</span><span class=\"p\">;</span>\n    <span class=\"k\">default</span><span class=\"o\">:</span>\n        <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"n\">last_index</span><span class=\"p\">,</span> <span class=\"n\">index</span> <span class=\"o\">-</span> <span class=\"n\">last_index</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"n\">CLexer</span><span class=\"o\">::</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">inc</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"n\">newline</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">last_index</span> <span class=\"o\">=</span> <span class=\"n\">index</span><span class=\"p\">;</span>\n    <span class=\"n\">last_line</span> <span class=\"o\">=</span> <span class=\"n\">line</span><span class=\"p\">;</span>\n    <span class=\"n\">last_column</span> <span class=\"o\">=</span> <span class=\"n\">column</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">newline</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">column</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">line</span> <span class=\"o\">+=</span> <span class=\"n\">inc</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">inc</span> <span class=\"o\">&amp;lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">column</span> <span class=\"o\">+=</span> <span class=\"n\">idx</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">column</span> <span class=\"o\">+=</span> <span class=\"n\">inc</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">index</span> <span class=\"o\">+=</span> <span class=\"n\">idx</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">lexer_t</span> <span class=\"n\">CLexer</span><span class=\"o\">::</span><span class=\"n\">next_digit</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex_search</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cbegin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cend</span><span class=\"p\">(),</span> <span class=\"n\">sm</span><span class=\"p\">,</span> <span class=\"n\">r_digit</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">auto</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">();</span>\n        <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_double</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atof</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n        <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">());</span>\n        <span class=\"k\">return</span> <span class=\"n\">l_double</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"digit not match\"</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">lexer_t</span> <span class=\"n\">CLexer</span><span class=\"o\">::</span><span class=\"n\">next_alpha</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex_search</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cbegin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cend</span><span class=\"p\">(),</span> <span class=\"n\">sm</span><span class=\"p\">,</span> <span class=\"n\">r_alpha</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">auto</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">();</span>\n        <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_identifier</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">();</span>\n        <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">());</span>\n        <span class=\"k\">return</span> <span class=\"n\">l_identifier</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"alpha not match\"</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">lexer_t</span> <span class=\"n\">CLexer</span><span class=\"o\">::</span><span class=\"n\">next_space</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex_search</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cbegin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">cend</span><span class=\"p\">(),</span> <span class=\"n\">sm</span><span class=\"p\">,</span> <span class=\"n\">r_space</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">auto</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">find_if</span><span class=\"p\">(</span><span class=\"n\">sm</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">sm</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"p\">[](</span><span class=\"k\">auto</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span> <span class=\"p\">});</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">==</span> <span class=\"n\">sm</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">())</span> <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"space not match\"</span><span class=\"p\">);</span>\n        <span class=\"k\">auto</span> <span class=\"n\">ms</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">str</span><span class=\"p\">();</span>\n        <span class=\"k\">auto</span> <span class=\"n\">ml</span> <span class=\"o\">=</span> <span class=\"n\">ms</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ms</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">' '</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_space</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"p\">;</span>\n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">ml</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"n\">l_space</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ms</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">'\\r'</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_newline</span> <span class=\"o\">=</span> <span class=\"n\">ml</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">ml</span><span class=\"p\">,</span> <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_newline</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"n\">l_newline</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ms</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">'\\n'</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_newline</span> <span class=\"o\">=</span> <span class=\"n\">ml</span><span class=\"p\">;</span>\n            <span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">ml</span><span class=\"p\">,</span> <span class=\"n\">bags</span><span class=\"p\">.</span><span class=\"n\">_newline</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"n\">l_newline</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"space not match\"</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"space not match\"</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">l_error</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">CLexer</span><span class=\"o\">::</span><span class=\"n\">local</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">index</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">length</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">];</span>\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>方法解释：</p><ul><li>next：判别当前字符是数字/空格/字符，是的话跳到相应的识别函数中，这是LL1识别方法<br></li><li>next_digit：正则匹配时，返回l_double类型，这里为了方便，就先不识别int</li><li>next_alpha：正则匹配时，返回l_identifier类型<br></li><li>next_space：稍微复杂点，匹配时，需要在捕获组capture中找，找到后，存到字符串s中，然后只要判断s[0]是什么就可以了</li></ul><br><h2>测试！</h2><p>看看这段代码功能如何、正确与否，上测试吧~</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"cp\">#define OUTPUT(l, t) printf(\"[%03d:%03d] %-12s - %s\\n\", \\</span>\n<span class=\"cp\">    l.get_last_line(), \\</span>\n<span class=\"cp\">    l.get_last_column(), \\</span>\n<span class=\"cp\">    LEX_STRING(l.get_type()).c_str(), \\</span>\n<span class=\"cp\">    l.current().c_str());</span>\n\n<span class=\"cp\">#define TEST(l, t, v) \\</span>\n<span class=\"cp\">    assert(l.next() == l_##t); \\</span>\n<span class=\"cp\">    assert(l.get_##t() == v); \\</span>\n<span class=\"cp\">    OUTPUT(l, t);</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"s\">\"ABC </span><span class=\"se\">\\r\\n\\n\\n</span><span class=\"s\">0.2e8  a_ _b</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"# 输入 </span><span class=\"se\">\\n</span><span class=\"s\">----[[[</span><span class=\"se\">\\n</span><span class=\"s\">%s</span><span class=\"se\">\\n</span><span class=\"s\">----]]]</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">);</span>\n\n    <span class=\"n\">CLexer</span> <span class=\"n\">lexer</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">);</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\"># 解析 </span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">identifier</span><span class=\"p\">,</span> <span class=\"s\">\"ABC\"</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">newline</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">newline</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"p\">,</span> <span class=\"mf\">0.2e8</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">identifier</span><span class=\"p\">,</span> <span class=\"s\">\"a_\"</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">identifier</span><span class=\"p\">,</span> <span class=\"s\">\"_b\"</span><span class=\"p\">);</span>\n    <span class=\"n\">TEST</span><span class=\"p\">(</span><span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">newline</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>阶段性总结</h2><p>总体的代码看着很清爽~功能单一、结构精简，那么为了能够更快、更好地看到本系列的效果呢，我打算先完成目标、再完善功能！也就是说，先搞定下面的代码</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>int main() {\n    int i;\n    i = 1+2/3*4-5+6*(7-8);\n    printf(\"%d\", i);\n}\n</code></pre></div><p>其他的for/if等都不实现，这样就不会写着写着云里雾里去了。不过上面的代码看起来简单，实际上包含了四则运算优先级的问题，如果就用LL去做呢会有问题，像<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/SimpleConsole\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/SimpleConsole<i class=\"icon-external\"></i></a> 里面我就用了坑爹的GetMostLeftCombineAtom（破坏了美感），但用LL做代码非常清晰，也不需要了解LR等其他知识。</p><p><a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/SimpleConsole\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/SimpleConsole<i class=\"icon-external\"></i></a> 代码不多，但是感觉非常awesome，贴几处代码<br></p><div class=\"highlight\"><pre><code class=\"language-common-lisp\"><span></span><span class=\"nv\">empty</span> <span class=\"nb\">=</span> <span class=\"nv\">builtin</span> <span class=\"nv\">empty</span>\n<span class=\"nv\">fnx</span> <span class=\"nv\">head</span> <span class=\"nv\">x</span> <span class=\"nv\">xs</span> <span class=\"nv\">=&amp;gt;</span> <span class=\"nv\">x</span>    <span class=\"nb\">-</span><span class=\"err\">\\</span>\n<span class=\"nv\">fnx</span> <span class=\"nv\">tail</span> <span class=\"nv\">x</span> <span class=\"nv\">xs</span> <span class=\"nv\">=&amp;gt;</span> <span class=\"nv\">xs</span>   <span class=\"nv\">--------</span> <span class=\"err\">这几处才是关键！</span>\n<span class=\"nv\">fnx</span> <span class=\"nb\">list</span> <span class=\"nv\">x</span> <span class=\"nv\">=&amp;gt;</span> <span class=\"nv\">x</span>       <span class=\"nv\">-/</span>\n<span class=\"nv\">fn</span> <span class=\"nv\">bool</span> <span class=\"nv\">x</span> <span class=\"nv\">=&amp;gt;</span> <span class=\"nv\">builtin</span> <span class=\"nv\">bool</span> <span class=\"nv\">x</span>\n<span class=\"nv\">fn</span> <span class=\"nb\">not</span> <span class=\"nv\">x</span> <span class=\"nv\">=&amp;gt;</span> <span class=\"nv\">builtin</span> <span class=\"nb\">not</span> <span class=\"nv\">x</span>\n<span class=\"nv\">fnx</span> <span class=\"nv\">is_empty</span> <span class=\"nv\">x</span> <span class=\"nv\">=&amp;gt;</span> <span class=\"nv\">builtin</span> <span class=\"nv\">is_empty</span> <span class=\"nv\">x</span>\n<span class=\"nv\">fnx</span> <span class=\"nv\">is_single</span> <span class=\"nv\">x</span> <span class=\"nv\">=&amp;gt;</span> <span class=\"nv\">builtin</span> <span class=\"nv\">is_single</span> <span class=\"nv\">x</span>\n<span class=\"nv\">fnx</span> <span class=\"nv\">is_many</span> <span class=\"nv\">x</span> <span class=\"nv\">=&amp;gt;</span> <span class=\"nv\">builtin</span> <span class=\"nv\">is_many</span> <span class=\"nv\">x</span>\n<span class=\"nv\">fn</span> <span class=\"nv\">match</span> <span class=\"nb\">cond</span> <span class=\"no\">t</span> <span class=\"nv\">f</span> <span class=\"nv\">=&amp;gt;</span> <span class=\"nv\">builtin</span> <span class=\"nv\">match</span> <span class=\"nb\">cond</span> <span class=\"no\">t</span> <span class=\"nv\">f</span>\n<span class=\"nv\">fn</span> <span class=\"k\">if</span> <span class=\"nb\">cond</span> <span class=\"no\">t</span> <span class=\"nv\">=&amp;gt;</span> <span class=\"nv\">builtin</span> <span class=\"k\">if</span> <span class=\"nb\">cond</span> <span class=\"no\">t</span>\n<span class=\"nv\">fn</span> <span class=\"nv\">exec</span> <span class=\"nb\">exp</span> <span class=\"nv\">=&amp;gt;</span> <span class=\"nv\">builtin</span> <span class=\"nv\">exec</span> <span class=\"nb\">exp</span>\n<span class=\"nv\">fn</span> <span class=\"nb\">equal</span> <span class=\"nv\">x</span> <span class=\"nv\">y</span> <span class=\"nv\">=&amp;gt;</span> <span class=\"nv\">builtin</span> <span class=\"nb\">equal</span> <span class=\"nv\">x</span> <span class=\"nv\">y</span>\n<span class=\"nv\">fn</span> <span class=\"nv\">not_equal</span> <span class=\"nv\">x</span> <span class=\"nv\">y</span> <span class=\"nv\">=&amp;gt;</span> <span class=\"nv\">builtin</span> <span class=\"nv\">not_equal</span> <span class=\"nv\">x</span> <span class=\"nv\">y</span>\n<span class=\"nv\">fn</span> <span class=\"nv\">lt</span> <span class=\"nv\">x</span> <span class=\"nv\">y</span> <span class=\"nv\">=&amp;gt;</span> <span class=\"nv\">builtin</span> <span class=\"nv\">lt</span> <span class=\"nv\">x</span> <span class=\"nv\">y</span>\n<span class=\"nv\">fn</span> <span class=\"nv\">gt</span> <span class=\"nv\">x</span> <span class=\"nv\">y</span> <span class=\"nv\">=&amp;gt;</span> <span class=\"nv\">builtin</span> <span class=\"nv\">gt</span> <span class=\"nv\">x</span> <span class=\"nv\">y</span>\n<span class=\"nv\">fn</span> <span class=\"nv\">lte</span> <span class=\"nv\">x</span> <span class=\"nv\">y</span> <span class=\"nv\">=&amp;gt;</span> <span class=\"nv\">builtin</span> <span class=\"nv\">lte</span> <span class=\"nv\">x</span> <span class=\"nv\">y</span>\n<span class=\"nv\">fn</span> <span class=\"nv\">gte</span> <span class=\"nv\">x</span> <span class=\"nv\">y</span> <span class=\"nv\">=&amp;gt;</span> <span class=\"nv\">builtin</span> <span class=\"nv\">gte</span> <span class=\"nv\">x</span> <span class=\"nv\">y</span>\n<span class=\"nv\">fn</span> <span class=\"nv\">range</span> <span class=\"nv\">x</span> <span class=\"nv\">y</span> <span class=\"nv\">=&amp;gt;</span> <span class=\"nv\">builtin</span> <span class=\"nv\">range</span> <span class=\"nv\">x</span> <span class=\"nv\">y</span>\n</code></pre></div><p>然后求个pi值（用Web去实现console <a href=\"http://link.zhihu.com/?target=https%3A//github.com/chrisdone/jquery-console\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">chrisdone/jquery-console<i class=\"icon-external\"></i></a> 再加点signalr）：</p><p><img src=\"http://pic2.zhimg.com/v2-ed10f787021422ec7bf5273c138276ad_b.png\" data-rawwidth=\"414\" data-rawheight=\"356\" class=\"content_image\" width=\"414\">这样的书写是非常爽的，哈哈。</p><p>那下一节将完善功能，使其能识别操作符、关键字。</p>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":26142441,"publishedTime":"2017-04-02T07:52:36+08:00","url":"/p/26142441","title":"【Parser系列】Lexer I","summary":"写在前面代码：<a href=\"https://github.com/bajdcc/CParser\" data-editable=\"true\" data-title=\"bajdcc/CParser\">bajdcc/CParser</a>本节内容效果图：任务非常简单——识别空格/回车、变量名、数字。准备工作<b><u>思考一：类型</u></b>要解析C语言，那么肯定得考虑基本数据类型了，如int、char等。然而，我们将把每个识别出的token标记一个类型，这是lexer中的类型（用enum…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0},"next":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic2.zhimg.com/v2-b38ba479213e649fffa96eb1a5983145_r.png","links":{"comments":"/api/posts/26202018/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"},{"url":"https://www.zhihu.com/topic/19824417","id":"19824417","name":"小说阅读"},{"url":"https://www.zhihu.com/topic/19550901","id":"19550901","name":"前端开发"}],"href":"/api/posts/26202018","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<h2>写在前面</h2><p><a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/OnlineReader\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bajdcc/Onlin</span><span class=\"invisible\">eReader</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br></p><p>时常有读小说的烦恼，下了几MB的txt电子书，然而在电脑端上看真是惨不忍睹，所以做了个网站来解析小说。</p><p>要求的小说格式是：</p><ol><li>第一行是小说的标题，即书名</li><li>空一行</li><li>第三行是章节名，如“引子”或“第XXX章”</li><li>空一行</li><li>正文</li><li>下一章节名</li><li>……</li></ol><h2>渣效果图</h2><p>根据正文生成的目录：</p><p><img src=\"http://pic4.zhimg.com/v2-3a5316aad42ad790b90174e24ab94b33_b.png\" data-rawwidth=\"863\" data-rawheight=\"484\" class=\"origin_image zh-lightbox-thumb\" width=\"863\" data-original=\"http://pic4.zhimg.com/v2-3a5316aad42ad790b90174e24ab94b33_r.png\">网站主体如题图所示。</p><h2>设计思路</h2><p>搭一个网站可以用很多工具，这里后端采用PHP，前端用Vue.js。</p><p>自动加载触发机制：localhost/getmenu.php?id=书名，如1000.txt，书名是1000，不包括后缀名，因此请求是localhost/getmenu.php?id=1000，请求后系统自动导入小说。</p><p>当加载一个小说如“1000.txt”的时候，系统做：</p><ol><li>如果没有db.sqlite，新建一个，返回失败</li><li>再次请求时，系统找到1000.txt，读文件（in getmenu.php）</li><li>按“引子”、“第XXX章”将文章进行分割，记录分割后各个片段的起始位置和终点位置（in getmenu.php），并保存入db.sqlite中，序列化方式是json和base64</li><li>之后请求时，从db.sqlite取出位置，然后从1000.txt中根据位置找出相应小说片段，并返回给前端</li></ol><h2>分页规则</h2><p>在utils.php中的_filterRegexp方法中，目前是</p><br><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"sr\">/^(引子|第.{1,15}章)/</span>\n</code></pre></div><h2>使用方法</h2><p>php开扩展sqlite3，然后serve即可。</p><p>如我下了本新小说，将它命名成2000.txt，在主页上输入2000，点加载，然后即可开始阅读。</p><h2>其他特性</h2><ul><li>系统按IP保存当前阅读进度<br></li><li>触屏滑动支持</li><li>快捷键翻页支持</li><li>查询章节名</li></ul><br><h2>总结</h2><p>建个小网站，造个小轮子，不亦乐乎啊。</p>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":26202018,"publishedTime":"2017-04-06T12:41:56+08:00","url":"/p/26202018","title":"【Web系列】小说在线阅读","summary":"写在前面<a href=\"https://github.com/bajdcc/OnlineReader\">https://github.com/bajdcc/OnlineReader</a> 时常有读小说的烦恼，下了几MB的txt电子书，然而在电脑端上看真是惨不忍睹，所以做了个网站来解析小说。要求的小说格式是：第一行是小说的标题，即书名空一行第三行是章节名，如“引子”或“第XXX章”空一行正文下一章节名……","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0}},"commentsCount":0,"likesCount":6,"FULLINFO":true}},"User":{"bajdcc":{"isFollowed":false,"name":"陈安","headline":"专业研究野生技术 https://github.com/bajdcc","avatarUrl":"https://pic4.zhimg.com/v2-cd6d61ad9ef94c41b9e77f8e0f727893_s.jpg","isFollowing":false,"type":"people","slug":"bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","profileUrl":"https://www.zhihu.com/people/bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false,"badge":{"identity":null,"bestAnswerer":null}}},"Comment":{},"favlists":{}},"me":{},"global":{},"columns":{"learncpp":{"following":false,"canManage":false,"href":"/api/columns/learncpp","name":"从零开始构建标准库","creator":{"slug":"bajdcc"},"url":"/learncpp","slug":"learncpp","avatar":{"id":"v2-bf63794c542fc73b11e17014b7e0d01d","template":"https://pic2.zhimg.com/{id}_{size}.jpg"}}},"columnPosts":{},"postComments":{},"postReviewComments":{"comments":[],"newComments":[],"hasMore":true},"favlistsByUser":{},"favlistRelations":{},"promotions":{}}</textarea>

    <script src="//static.zhihu.com/hemingway/common.269c40e8655bf81740fd.js"></script>
<script src="//static.zhihu.com/hemingway/app.3e4cffb648892455be81.js"></script>
<script src="//static.zhihu.com/hemingway/raven.e2158dde2067fd0d67db.js" async defer></script>
  </body>
</html>
