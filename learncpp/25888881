<!doctype html>
<html lang="zh-CN">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>【LeetCode】005-最长回文子串 - 知乎专栏</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link rel="shortcut icon" href="https://static.zhihu.com/static/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="//static.zhihu.com/hemingway/app.79ee58592781f37f89cf23e10f1f9ff0.css" />
    <script>document.documentElement.className += ('ontouchstart' in window) ? ' touch' : ' no-touch'</script>
  </head>
  <body>

    <div id="react-root"></div>
    <textarea id="clientConfig" hidden>{"debug":false,"apiRoot":"","paySDK":"https://pay.zhihu.com/api/js","name":"production","instance":"column","tokens":{"X-XSRF-TOKEN":null,"X-UDID":null,"Authorization":"oauth c3cef7c66a1843f8b3a9e6a1e3160e20"}}</textarea>
    <textarea id="preloadedState" hidden>{"database":{"Post":{"25888881":{"title":"【LeetCode】005-最长回文子串","author":"bajdcc","content":"<h2>题目</h2><p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.</p><p>Example:</p><blockquote>Input: \"babad\"<br>Output: \"bab\"<br>Note: \"aba\" is also a valid answer.</blockquote><p>Example:</p><blockquote>Input: \"cbbd\"<br>Output: \"bb\"</blockquote><h2>目前的解法</h2><p>如<a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000003914228\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">最长回文子串--Manacher 算法<i class=\"icon-external\"></i></a>及<a href=\"https://link.zhihu.com/?target=http%3A//www.cnblogs.com/leoin2012/p/3984997.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[转]最长回文子串--4种解法 - 立航 - 博客园<i class=\"icon-external\"></i></a>中所说，有：<br></p><ol><li>BF 暴力破解法<br></li><li>DP 动态规划法</li><li>中心拓展法</li><li>Manacher法</li></ol><p>那么Manacher法应该是复杂度最低的，为O(N)。<br></p><p>然而，，我就是要另寻出（si）路，有没有其他的办法呢？</p><h2>大开脑洞</h2><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/githubwoniu/learnprogram/blob/master/leetcode/05/note_bajdcc.md\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">githubwoniu/learnprogram<i class=\"icon-external\"></i></a><br></p><p><a href=\"https://www.zhihu.com/question/40965749/answer/152514917\" class=\"internal\">最简便的找字符串中最长回文子串的方法是什么？ - 知乎</a><br></p><p><b>下面是优化思路：</b></p><p>首先，一个回文串的字符频度应该是：中点频度最低为1，其他字符频度最低为2。</p><p>那么，<b>如果串中有频度是1的字符，它肯定位于回文串的中心，不然就不属于任何回文串。</b></p><p>因此，按频度可以筛选掉一定量的多余字符，将母串进行<b>分割</b>。分割的好处是<b>子串有界</b>。</p><p>最懒方法：遍历整串，从中心向两侧扩张（中心扩散法）并做比较，取得长度，最后返回最大长度所在的串。</p><p>优化：</p><ul><li>在遍历整串过程中，最大长度maxlen会<b>时刻增加</b>，那么，当分割后的<b>有界子串</b>长度小于最大长度maxlen时，就不需要再去判断了。</li><li>如果串的某个连续子串(len&amp;gt;=2)它们的频度都是1，那么它们就<b>不属于任何回文串</b>，可以快速剔除，节省时间。这是关键。</li><li>其他方法还没想到，欢迎补充。</li></ul><p>所以大体的思路是：</p><ol><li>统计字符频度，用数组表示频数</li><li>找出频度为1的字符a，看以a为单核中心向外扩散，求最长回文；如果没有回文，就将它从串中断开，进行分治；如果回文长度超过记录，就保存它</li><li>然后从左到右查回文，只有长度超过记录，才保存</li><li>第一次串分割完毕后，进行分治，重新统计频度，回到1步骤</li></ol><h2>新方法评价</h2><p>目测新方法的复杂度是高于O(N)的，不过，将分治法运用于本题也算是另辟蹊径了。奇葩方法就是将几种方法揉合在一起，那么本方法结合了：</p><ol><li>递归分治，将频度为1的字符作为<b>可能的分割点</b></li><li>中心扩散，目前最优值N，那么从当前点(P)的P-N和P+N进行比较，先N递减，然后递增<br></li><li>缓存最优解，当前解N，那么小于N的情况就忽略了</li></ol><p>无论如何，本方法就是不修改原始字符串哈哈~</p><h2>上代码</h2><p>用时6ms <a href=\"https://link.zhihu.com/?target=https%3A//leetcode.com/submissions/detail/97501094/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">leetcode.com/submission</span><span class=\"invisible\">s/detail/97501094/</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"mi\">256</span><span class=\"p\">];</span>\n\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"n\">string</span> <span class=\"n\">longestPalindrome</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">str</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">longestPalindrome</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">(),</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"o\">&amp;gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"c1\">//这里改了下</span>\n            <span class=\"k\">return</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">start</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">longestPalindromePartition</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;amp;</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;amp;</span><span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">maxLen</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">maxLen</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">maxStart</span><span class=\"p\">,</span> <span class=\"n\">maxEnd</span><span class=\"p\">,</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">maxLen</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">reserve</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">maxLen</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">reserveEnd</span> <span class=\"o\">=</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">reserve</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"n\">reserve</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">reserveEnd</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">k</span> <span class=\"o\">&amp;gt;=</span> <span class=\"n\">start</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">k</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">k</span><span class=\"p\">])</span>\n                        <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"n\">k</span><span class=\"o\">--</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n                    <span class=\"n\">reserve</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">len</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n                    <span class=\"n\">reserveEnd</span> <span class=\"o\">=</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">reserve</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                    <span class=\"n\">maxStart</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">k</span><span class=\"p\">;</span>\n                    <span class=\"n\">maxEnd</span> <span class=\"o\">=</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">k</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">reserve</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&amp;gt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">])</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">reserve</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">j</span> <span class=\"o\">&amp;gt;=</span> <span class=\"n\">start</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">])</span>\n                        <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"n\">reserve</span> <span class=\"o\">=</span> <span class=\"o\">--</span><span class=\"n\">j</span><span class=\"p\">;</span>\n                <span class=\"n\">reserveEnd</span> <span class=\"o\">=</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">reserve</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">j</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                    <span class=\"n\">maxStart</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">j</span><span class=\"p\">;</span>\n                    <span class=\"n\">maxEnd</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">maxLen</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">maxStart</span><span class=\"p\">;</span>\n            <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">maxEnd</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span> <span class=\"n\">len</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">longestPalindrome</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;amp;</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;amp;</span><span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"o\">==</span> <span class=\"n\">end</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;=</span> <span class=\"mi\">26</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"sc\">'a'</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">auto</span> <span class=\"n\">dups</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"p\">[</span><span class=\"n\">len</span><span class=\"p\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">dupCount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">dups</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">&amp;gt;</span> <span class=\"mi\">1</span> <span class=\"o\">?</span> <span class=\"p\">(</span><span class=\"n\">dupCount</span><span class=\"o\">++</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dups</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">len</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">len</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">tmpStart</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">tmpEnd</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">maxStart</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">maxEnd</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">tmpLen</span><span class=\"p\">,</span> <span class=\"n\">maxLen</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dups</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                <span class=\"n\">tmpStart</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n                <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">dups</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                        <span class=\"n\">tmpEnd</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                        <span class=\"k\">break</span><span class=\"p\">;</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">--</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">tmpEnd</span> <span class=\"o\">=</span> <span class=\"n\">end</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">tmpLen</span> <span class=\"o\">=</span> <span class=\"n\">longestPalindromePartition</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"n\">tmpStart</span><span class=\"p\">,</span> <span class=\"n\">tmpEnd</span><span class=\"p\">,</span> <span class=\"n\">maxLen</span><span class=\"p\">))</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">maxLen</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">maxLen</span> <span class=\"o\">=</span> <span class=\"n\">tmpLen</span><span class=\"p\">;</span>\n                    <span class=\"n\">maxStart</span> <span class=\"o\">=</span> <span class=\"n\">tmpStart</span><span class=\"p\">;</span>\n                    <span class=\"n\">maxEnd</span> <span class=\"o\">=</span> <span class=\"n\">tmpEnd</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">tmpStart</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n                <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dups</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                        <span class=\"n\">tmpEnd</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                        <span class=\"k\">break</span><span class=\"p\">;</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">--</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">tmpEnd</span> <span class=\"o\">=</span> <span class=\"n\">end</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tmpStart</span> <span class=\"o\">==</span> <span class=\"n\">tmpEnd</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">tmpStart</span> <span class=\"o\">&amp;gt;=</span> <span class=\"n\">start</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">tmpEnd</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"o\">--</span><span class=\"n\">tmpStart</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"o\">++</span><span class=\"n\">tmpEnd</span><span class=\"p\">]);</span>\n                    <span class=\"n\">tmpLen</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">tmpEnd</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"o\">++</span><span class=\"n\">tmpStart</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tmpLen</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">maxLen</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"n\">maxLen</span> <span class=\"o\">=</span> <span class=\"n\">tmpLen</span><span class=\"p\">;</span>\n                        <span class=\"n\">maxStart</span> <span class=\"o\">=</span> <span class=\"n\">tmpStart</span><span class=\"p\">;</span>\n                        <span class=\"n\">maxEnd</span> <span class=\"o\">=</span> <span class=\"n\">tmpEnd</span><span class=\"p\">;</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">maxStart</span><span class=\"p\">;</span>\n        <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">maxEnd</span><span class=\"p\">;</span>\n        <span class=\"k\">delete</span><span class=\"p\">[]</span><span class=\"n\">dups</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">maxLen</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div><h2>阶段性总结</h2><p>奇葩方法花了两天时间去实现，不追求啥，就是好玩。。不去照着实现现有的算法，也是一种乐趣啊，为什么一直要走别人的路呢？当自己设计算法、设计架构、设计界面的时候，才真正是一种创作/创造的过程，才是真正的乐趣所在呢。不过，在这之前，你得首先入门吧~记得好声音中的一句话，一开始你被音乐玩，后来你才能玩音乐，编程何尝不是如此呢？</p><p><b>人生三大境界：</b></p><ol><li><b><u>搬砖的境界。</u></b>机械地、条件反射地、枯燥地、重复地劳动，做一件事，为的是把一件小事做熟练、做通透。虽然境界很low，但是有10000小时理论啊，这是不可避免的过程。但是，熟能生巧，在这一境界做出成就后，才能跃升至下一境界。[多维空间某一点]<br></li><li><b><u>统筹的境界。</u></b>能够把许多件小事安排好，规划好优先级，就像知道造一座房子所需的一系列步骤，把它按部就班去完成。懂得取舍，抓住要点，目光不再短浅。许多知识融会贯通，信手拈来。[局部最优点]</li><li><b><u>设计的境界。</u></b>同时也是创造的境界。不再拘泥于一扇窗户、一个房间、一幢房子，全心全意处理的是整体的细节，树立大局观，自顶向下处理一件件事。知晓事物的本质，丰富的联想/举一反三能力，可以找到两件不同事之间的相同点，想出独特的方法。[全局最优点]</li></ol>","updated":"2017-03-20T12:49:53.000Z","canComment":false,"commentPermission":"anyone","commentCount":6,"collapsedCount":0,"likeCount":3,"state":"published","isLiked":false,"slug":"25888881","isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic2.zhimg.com/v2-9d40f235fbbe291b86dbd526dc213361_r.png","links":{"comments":"/api/posts/25888881/comments"},"reviewers":[],"topics":[{"url":"https://www.zhihu.com/topic/19925162","id":"19925162","name":"Leetcode"},{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"},{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"}],"titleImageSize":{"width":526,"height":128},"href":"/api/posts/25888881","excerptTitle":"","column":{"slug":"learncpp","name":"从零开始构建标准库"},"tipjarState":"inactivated","sourceUrl":"","pageCommentsCount":6,"snapshotUrl":"","publishedTime":"2017-03-20T20:49:53+08:00","url":"/p/25888881","lastestLikers":[{"profileUrl":"https://www.zhihu.com/people/bo-li-ling-meng-82-77","bio":null,"hash":"2f76c918ff4baeff28cc946f96dbf64a","uid":57377277607936,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"bo-li-ling-meng-82-77","avatar":{"id":"563b7cd63","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"博丽灵梦"},{"profileUrl":"https://www.zhihu.com/people/li-zi-70-32-22","bio":"编程员","hash":"21fcf3e021fc099fb7e5b864f8dddba0","uid":623438149871865900,"isOrg":false,"description":"The Beginning C","isOrgWhiteList":false,"slug":"li-zi-70-32-22","avatar":{"id":"v2-57fa8393f6c9375d9842d71731a2baba","template":"https://pic3.zhimg.com/{id}_{size}.jpg"},"name":"李子7"},{"profileUrl":"https://www.zhihu.com/people/liu-ai-ai-87","bio":"php/java","hash":"ce74bd880ebf50561660c0d66c7c0852","uid":51589880479744,"isOrg":false,"description":"单身狗","isOrgWhiteList":false,"slug":"liu-ai-ai-87","avatar":{"id":"f640729690912e5d69cda4c76b9c6aa6","template":"https://pic3.zhimg.com/{id}_{size}.jpg"},"name":"刘呆呆"}],"summary":"题目Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.Example:Input: \"babad\" Output: \"bab\" Note: \"aba\" is also a valid answer.Example:Input: \"cbbd\" Output: \"bb\"目前的解法如<a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000003914228\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">…<i class=\"icon-external\"></i></a>","reviewingCommentsCount":0,"meta":{"previous":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic1.zhimg.com/v2-cff4e31091fe0b54552a443b85a78df0_r.png","links":{"comments":"/api/posts/25879478/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19577832","id":"19577832","name":"正则表达式"},{"url":"https://www.zhihu.com/topic/19925162","id":"19925162","name":"Leetcode"},{"url":"https://www.zhihu.com/topic/19945414","id":"19945414","name":"状态机"}],"href":"/api/posts/25879478","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<h2>写在前面</h2><p>前面研究OS的经历实在是令人心力憔悴。。所以换个新鲜的，把自己的刷题感悟整理一番。刷了有些题了，就先拿最近几天hard题打头阵吧。首先说的是(065)Valid Number这个题，其实一眼看起来很简单，不就是for/while/if/else吗？那么你可能不知道这道题其实有一个更加简(bian)洁(tai)的方法，听我慢慢道来。</p><h2>题目要求</h2><blockquote><p>Validate if a given string is numeric.</p><p>Some examples: \"0\" =&amp;gt; true \" 0.1 \" =&amp;gt; true \"abc\" =&amp;gt; false \"1 a\" =&amp;gt; false \"2e10\" =&amp;gt; true</p><p>Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.</p></blockquote><h2>常规解法</h2><p><a href=\"http://link.zhihu.com/?target=http%3A//www.cnblogs.com/tonyluis/p/4507515.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Java for LeetCode 065 Valid Number<i class=\"icon-external\"></i></a>：<br></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">public</span> <span class=\"n\">boolean</span> <span class=\"nf\">isNumber</span><span class=\"p\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">trim</span><span class=\"p\">();</span>\n    <span class=\"n\">String</span><span class=\"p\">[]</span> <span class=\"n\">splitArr</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">\"e\"</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">charAt</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"sc\">'e'</span>\n            <span class=\"o\">||</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">charAt</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"sc\">'e'</span> <span class=\"o\">||</span> <span class=\"n\">splitArr</span><span class=\"p\">.</span><span class=\"n\">length</span> <span class=\"o\">&amp;gt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">k</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">splitArr</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">;</span> <span class=\"n\">k</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">String</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"n\">splitArr</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n        <span class=\"n\">boolean</span> <span class=\"n\">isDecimal</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">charAt</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"sc\">'-'</span> <span class=\"o\">||</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">charAt</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"sc\">'+'</span><span class=\"p\">)</span>\n            <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">substring</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"sc\">'0'</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">charAt</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">charAt</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">&amp;lt;=</span> <span class=\"sc\">'9'</span><span class=\"p\">)</span>\n                <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">charAt</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"sc\">'.'</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"o\">!</span><span class=\"n\">isDecimal</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">&amp;gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                    <span class=\"n\">isDecimal</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n                <span class=\"k\">else</span>\n                    <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span>\n                <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>对常规解法的评价</h2><p>只要会点C++，那么常规解法就不在话下，其实就是手动实现一遍itoa而已。</p><p><b>常规解法的优点是：门槛低/常人写得出/容易修改，也就是定制性好/扩展性差。</b></p><p>同时，<b>它的缺点是：一旦验证逻辑变复杂，那就gg了。</b>比如我想把复数也算进去啊，那又得改那堆杂七杂八的代码，令人感觉不会再爱了。</p><h2>正则表达式</h2><p><a href=\"http://link.zhihu.com/?target=http%3A//deerchao.net/tutorials/regex/regex.htm\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">正则表达式30分钟入门教程<i class=\"icon-external\"></i></a>总结得比较好。简单来说，正则表达式（regex）可以表示一个特定的词法（<a href=\"http://link.zhihu.com/?target=http%3A//blog.csdn.net/nic_r/article/details/7835908\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">编译原理之词法分析、语法分析、语义分析 - nic_r的专栏 - 博客频道 - CSDN.NET<i class=\"icon-external\"></i></a>），如整数、实数、复数、邮箱地址、电话号码等。regex除了有匹配的功能之外，它还带有替换/解析功能，这样，能够满足涉及字符串操作的大多数需求。</p><p>比如，匹配方面，涉及用户名匹配、邮箱地址的匹配等，如果这时你用常规解法就太臃肿、太麻烦了。替换/解析方面，如解析HTML/XML/JSON等，比如便捷。</p><p>那么正则表达式与常规解法有什么不同呢？</p><p>刚才提到，常规解法虽然容易修改，但它的扩展性不足，我想更改一点需求，就要大刀阔斧改代码，令人不会再爱。那么如何解决这个扩展性的问题呢？那就需要将算法给抽象出来。</p><p>如果单用if/else/while/for做一个邮箱匹配，这时又需要做一个数字匹配功能，那么这两种代码是八竿子打不着的，根本没法子复用代码啊，怎么办呢？</p><p>其实稍微用脑子想一想——你写的爬虫程序和他写的游戏程序也是风马牛不相及吧？但是编译器将它们翻译成汇编语言后，是不是又有共同点了？比如都有Jump跳转啊，有mov啊，相似度瞬间提高。这里面的原理是什么呢？原来杂七杂八的代码间，通过编译器的翻译，竟然变成了两份差不多的汇编代码（指用的指令大体相似）。那么方法是翻译吗？</p><p>也就是说，原始的两种内容不同的代码，可能甲有着C++的高级特性，乙又是C写的，它们翻译成汇编后，用到的指令有99%都是相同的。反过来，如果我以汇编语言为标准，来表示甲和乙，那么这时候两者的代码有99%是相似的。<b>这时，我们发现了可重用性！</b></p><p>回过头来，想一想，假如有一种语言a可以表达数字、邮箱地址，那我们就不需要再写不同的C/C++代码了，即：<b>有一种机制将你的语言a的表达式翻译成对应的代码，运行这个代码，可以完成匹配工作。</b>这不就是编译器干的事么？</p><p>啰嗦了那么多，其实意思就是：<b><u>想要增加两种功能不同的代码之间的相似程度，必须从代码中的相同点/不同点抽象出一种崭新的语言，用这种崭新的语言可以以统一的语法形式来表达这两份代码。</u></b><br></p><p><u>而正则表达式，正是一种崭新的语言。</u>涉及正则表达式的语法、使用、解析，及NFA、DFA等知识这里不再赘述，请参阅专业书籍或是一些博客。</p><p>大致步骤是：</p><ol><li>输入正则表达式串pat</li><li>根据手写的LL1解析pat，生成AST</li><li>根据AST构建NFA，添加Epsilon边</li><li>从NFA转换为DFA，合并状态，确定终态</li><li>DFA最小化，生成状态转移矩阵</li><li>根据状态转移矩阵进行匹配</li></ol><br><h2>轮子的用武之地</h2><p>还好自己的<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMinilang\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bajdcc/jMini</span><span class=\"invisible\">lang</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>中有生成DFA的代码。</p><p>正则匹配部分在<b>priv.bajdcc.util.lexer.test.TestRegex</b>，直接运行它，然后输入上述正则表达式，那么具体信息就出来了。</p><p>详细信息（程序自动生成）：</p><br><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>#### 正则表达式语法树 ####\n序列 {\n\t循环{0,-1} {\n\t\t字符\t[\\u0020,' ']\n\t}\n\t循环{0,1} {\n\t\t字符\t[\\u002b,'+'],[\\u002d,'-']\n\t}\n\t分支 {\n\t\t序列 {\n\t\t\t循环{0,-1} {\n\t\t\t\t字符\t[\\u0030,'0']-[\\u0039,'9']\n\t\t\t}\n\t\t\t循环{0,1} {\n\t\t\t\t字符\t[\\u002e,'.']\n\t\t\t}\n\t\t\t循环{1,-1} {\n\t\t\t\t字符\t[\\u0030,'0']-[\\u0039,'9']\n\t\t\t}\n\t\t}\n\t\t序列 {\n\t\t\t循环{1,-1} {\n\t\t\t\t字符\t[\\u0030,'0']-[\\u0039,'9']\n\t\t\t}\n\t\t\t循环{0,1} {\n\t\t\t\t字符\t[\\u002e,'.']\n\t\t\t}\n\t\t\t循环{0,-1} {\n\t\t\t\t字符\t[\\u0030,'0']-[\\u0039,'9']\n\t\t\t}\n\t\t}\n\t}\n\t循环{0,1} {\n\t\t序列 {\n\t\t\t字符\t[\\u0065,'e']\n\t\t\t循环{0,1} {\n\t\t\t\t字符\t[\\u002b,'+'],[\\u002d,'-']\n\t\t\t}\n\t\t\t循环{1,-1} {\n\t\t\t\t字符\t[\\u0030,'0']-[\\u0039,'9']\n\t\t\t}\n\t\t}\n\t}\n\t循环{0,-1} {\n\t\t字符\t[\\u0020,' ']\n\t}\n}\n\n#### 状态集合 ####\n[\\u0020,' ']\n[\\u002b,'+']\n[\\u002d,'-']\n[\\u002e,'.']\n[\\u0030,'0']-[\\u0039,'9']\n[\\u0065,'e']\n#### 最小化 ####\n状态[0] =&amp;gt; 0,\n\t边 =&amp;gt; [1]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0030,'0']-[\\u0039,'9']\n\t边 =&amp;gt; [0]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0020,' ']\n\t边 =&amp;gt; [2]\n\t\t类型 =&amp;gt; 字符区间\t[\\u002e,'.']\n\t边 =&amp;gt; [3]\n\t\t类型 =&amp;gt; 字符区间\t[\\u002b,'+']\n\t边 =&amp;gt; [3]\n\t\t类型 =&amp;gt; 字符区间\t[\\u002d,'-']\n状态[1][结束] =&amp;gt; 3,4,6,\n\t边 =&amp;gt; [4]\n\t\t类型 =&amp;gt; 字符区间\t[\\u002e,'.']\n\t边 =&amp;gt; [5]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0065,'e']\n\t边 =&amp;gt; [6]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0020,' ']\n\t边 =&amp;gt; [1]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0030,'0']-[\\u0039,'9']\n状态[2] =&amp;gt; 5,\n\t边 =&amp;gt; [7]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0030,'0']-[\\u0039,'9']\n状态[3] =&amp;gt; 2,\n\t边 =&amp;gt; [2]\n\t\t类型 =&amp;gt; 字符区间\t[\\u002e,'.']\n\t边 =&amp;gt; [1]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0030,'0']-[\\u0039,'9']\n状态[4][结束] =&amp;gt; 5,8,\n\t边 =&amp;gt; [5]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0065,'e']\n\t边 =&amp;gt; [6]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0020,' ']\n\t边 =&amp;gt; [4]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0030,'0']-[\\u0039,'9']\n状态[5] =&amp;gt; 10,\n\t边 =&amp;gt; [8]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0030,'0']-[\\u0039,'9']\n\t边 =&amp;gt; [9]\n\t\t类型 =&amp;gt; 字符区间\t[\\u002b,'+']\n\t边 =&amp;gt; [9]\n\t\t类型 =&amp;gt; 字符区间\t[\\u002d,'-']\n状态[6][结束] =&amp;gt; 11,\n\t边 =&amp;gt; [6]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0020,' ']\n状态[7][结束] =&amp;gt; 6,\n\t边 =&amp;gt; [5]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0065,'e']\n\t边 =&amp;gt; [7]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0030,'0']-[\\u0039,'9']\n\t边 =&amp;gt; [6]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0020,' ']\n状态[8][结束] =&amp;gt; 14,\n\t边 =&amp;gt; [6]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0020,' ']\n\t边 =&amp;gt; [8]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0030,'0']-[\\u0039,'9']\n状态[9] =&amp;gt; 13,\n\t边 =&amp;gt; [8]\n\t\t类型 =&amp;gt; 字符区间\t[\\u0030,'0']-[\\u0039,'9']\n\n#### 状态转移矩阵 ####\n\t0\t3\t3\t2\t1\t-1\n\t6\t-1\t-1\t4\t1\t5\n\t-1\t-1\t-1\t-1\t7\t-1\n\t-1\t-1\t-1\t2\t1\t-1\n\t6\t-1\t-1\t-1\t4\t5\n\t-1\t9\t9\t-1\t8\t-1\n\t6\t-1\t-1\t-1\t-1\t-1\n\t6\t-1\t-1\t-1\t7\t5\n\t6\t-1\t-1\t-1\t8\t-1\n\t-1\t-1\t-1\t-1\t8\t-1\n</code></pre></div><h2>解决方案</h2><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n    <span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"n\">getCharMap</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">&amp;amp;</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">case</span> <span class=\"sc\">' '</span><span class=\"o\">:</span>\n                <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'+'</span><span class=\"o\">:</span>\n                <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'-'</span><span class=\"o\">:</span>\n                <span class=\"k\">return</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'.'</span><span class=\"o\">:</span>\n                <span class=\"k\">return</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'0'</span><span class=\"o\">:</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'1'</span><span class=\"o\">:</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'2'</span><span class=\"o\">:</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'3'</span><span class=\"o\">:</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'4'</span><span class=\"o\">:</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'5'</span><span class=\"o\">:</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'6'</span><span class=\"o\">:</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'7'</span><span class=\"o\">:</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'8'</span><span class=\"o\">:</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'9'</span><span class=\"o\">:</span>\n                <span class=\"k\">return</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n            <span class=\"k\">case</span> <span class=\"sc\">'e'</span><span class=\"o\">:</span>\n                <span class=\"k\">return</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">isNumber</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">using</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"kt\">int</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)[</span><span class=\"mi\">6</span><span class=\"p\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mm</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"mi\">0</span>\t<span class=\"p\">,</span><span class=\"mi\">3</span>\t<span class=\"p\">,</span><span class=\"mi\">3</span>\t<span class=\"p\">,</span><span class=\"mi\">2</span>\t<span class=\"p\">,</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"mi\">6</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"mi\">4</span>\t<span class=\"p\">,</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                <span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"mi\">7</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"mi\">2</span>\t<span class=\"p\">,</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"mi\">6</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"mi\">4</span>\t<span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                <span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"mi\">9</span>\t<span class=\"p\">,</span><span class=\"mi\">9</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"mi\">8</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"mi\">6</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"mi\">6</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"mi\">7</span>\t<span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                <span class=\"mi\">6</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"mi\">8</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span>\t<span class=\"p\">,</span><span class=\"mi\">8</span>\t<span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"p\">};</span>\n        <span class=\"k\">auto</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"n\">mm</span><span class=\"p\">;</span>\n        <span class=\"kt\">bool</span> <span class=\"k\">final</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">};</span>\n        <span class=\"kt\">int</span> <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">auto</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">();</span>\n        <span class=\"k\">for</span> <span class=\"p\">(;;)</span> <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"n\">local</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">c</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"kt\">int</span> <span class=\"n\">charClass</span> <span class=\"o\">=</span> <span class=\"n\">getCharMap</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">);</span>\n            <span class=\"kt\">int</span> <span class=\"n\">refer</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">charClass</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">refer</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"n\">status</span><span class=\"p\">][</span><span class=\"n\">charClass</span><span class=\"p\">];</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">refer</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">local</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"k\">final</span><span class=\"p\">[</span><span class=\"n\">status</span><span class=\"p\">];</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">refer</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":25879478,"publishedTime":"2017-03-20T16:54:35+08:00","url":"/p/25879478","title":"【LeetCode】065-验证数字","summary":"写在前面前面研究OS的经历实在是令人心力憔悴。。所以换个新鲜的，把自己的刷题感悟整理一番。刷了有些题了，就先拿最近几天hard题打头阵吧。首先说的是(065)Valid Number这个题，其实一眼看起来很简单，不就是for/while/if/else吗？那么你可能不知道这道题…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0},"next":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic4.zhimg.com/v2-0c048b7c7d57d5b273556725ef082eeb_r.png","links":{"comments":"/api/posts/26010547/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19627055","id":"19627055","name":"操作系统内核"},{"url":"https://www.zhihu.com/topic/19561633","id":"19561633","name":"C（编程语言）"},{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"}],"href":"/api/posts/26010547","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<h2>写在前面</h2><p>项目地址：<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/MiniOS\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/MiniOS<i class=\"icon-external\"></i></a></p><p>Release：<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/MiniOS/releases/tag/0.2.5\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/MiniOS<i class=\"icon-external\"></i></a></p><p>效果如题图。</p><h2>简要介绍</h2><p><b>制作一个最小化内核，实现中断处理、异常处理、虚页管理、系统调用、进程切换！</b></p><p>前后花了两个星期，每天不断想其中的bug要怎么解决，一点点添加代码，没有全部复制，目前有足够把握手写内核代码。</p><p>bug的出现非常神奇，最多的是页面错误和段错误，原因就是访问了不允许的内存，或是给段寄存器设了没在GDT中的值。</p><p>大部分问题来源于esp，即当前的堆栈，由于用汇编写，偏移写多少只能瞎掰，还好qemu有源码级调试工具，大爱！</p><p>最后一个魔幻bug的原因我想是系统调用的频率太高，比时间片切换还快了，加了个延时就神奇地解决了，晕。。</p><p>既然程序目前运行没有问题，说明代码还是够健壮的！接下来几篇文章我会介绍多进程的具体实现。</p><h2>项目结构</h2><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>.\n├── boot\n│   ├── bootsect.asm\n│   ├── floppy.asm\n│   └── gdt.asm\n├── include\n│   ├── asm.h\n│   ├── debug.h\n│   ├── fault.h\n│   ├── gdt.h\n│   ├── idt.h\n│   ├── irq.h\n│   ├── isr.h\n│   ├── pmm.h\n│   ├── print.h\n│   ├── proc.h\n│   ├── string.h\n│   ├── syscall.h\n│   ├── sysproc.h\n│   ├── type.h\n│   ├── uvm.h\n│   ├── vga.h\n│   └── vmm.h\n├── Makefile\n├── README.md\n├── script\n│   ├── gdbinit\n│   ├── link.ld\n│   └── ulink.ld\n├── src\n│   └── kernel\n│       ├── asm.c\n│       ├── debug.c\n│       ├── fault.c\n│       ├── gdt.c\n│       ├── idt.c\n│       ├── init.asm\n│       ├── irq.c\n│       ├── isr.c\n│       ├── loader.asm\n│       ├── main.c\n│       ├── pmm.c\n│       ├── print.c\n│       ├── proc.c\n│       ├── string.c\n│       ├── syscall.c\n│       ├── sysproc.c\n│       ├── uvm.c\n│       ├── vga.c\n│       └── vmm.c\n└── usr\n    └── logo.txt\n</code></pre></div><h2>运行代码</h2><div class=\"highlight\"><pre><code class=\"language-nasm\"><span></span><span class=\"nl\">.fork:</span>\n    <span class=\"nf\">mov</span> <span class=\"nb\">eax</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"c1\">; fork</span>\n    <span class=\"nf\">int</span> <span class=\"mh\">0x80</span> <span class=\"c1\">; syscall</span>\n    <span class=\"nf\">cmp</span> <span class=\"nb\">eax</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n    <span class=\"nf\">jz</span> <span class=\"nb\">ch</span><span class=\"nv\">ild</span>\n    <span class=\"nf\">call</span> <span class=\"nv\">delay</span>\n    <span class=\"nf\">mov</span> <span class=\"nb\">eax</span><span class=\"p\">,</span> <span class=\"mi\">5</span> <span class=\"c1\">; wait</span>\n    <span class=\"nf\">int</span> <span class=\"mh\">0x80</span> <span class=\"c1\">; syscall</span>\n    <span class=\"nf\">call</span> <span class=\"nv\">delay</span>\n    <span class=\"nf\">loop</span> <span class=\"nv\">.fork</span>\n\n<span class=\"nl\">child:</span>\n    <span class=\"nf\">mov</span> <span class=\"nb\">eax</span><span class=\"p\">,</span> <span class=\"mi\">3</span> <span class=\"c1\">; exec</span>\n    <span class=\"nf\">int</span> <span class=\"mh\">0x80</span> <span class=\"c1\">; syscall</span>\n    <span class=\"nf\">mov</span> <span class=\"nb\">eax</span><span class=\"p\">,</span> <span class=\"mi\">2</span> <span class=\"c1\">; exit</span>\n    <span class=\"nf\">int</span> <span class=\"mh\">0x80</span> <span class=\"c1\">; syscall</span>\n    <span class=\"nf\">jmp</span> <span class=\"kc\">$</span>\n\n<span class=\"nl\">delay:</span>\n    <span class=\"nf\">push</span> <span class=\"nb\">ecx</span>\n    <span class=\"nf\">mov</span> <span class=\"nb\">ecx</span><span class=\"p\">,</span> <span class=\"mh\">0x100000</span>\n    <span class=\"nf\">loop</span> <span class=\"kc\">$</span>\n    <span class=\"nf\">pop</span> <span class=\"nb\">ecx</span>\n    <span class=\"nf\">ret</span>\n</code></pre></div><h2>参考</h2><ol><li><a href=\"http://link.zhihu.com/?target=https%3A//github.com/SilverRainZ/OS67\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SilverRainZ/OS67<i class=\"icon-external\"></i></a><br></li><li><a href=\"http://link.zhihu.com/?target=http%3A//wiki.osdev.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Expanded Main Page<i class=\"icon-external\"></i></a><br></li><li><b>* 《Orange'S：一个操作系统的实现 - 于渊》</b>（这是本好书！进程切换代码是参考书里的）<br></li><li>网络上的资料</li></ol>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":26010547,"publishedTime":"2017-03-27T00:37:15+08:00","url":"/p/26010547","title":"【构建操作系统】多进程机制","summary":"写在前面项目地址：<a href=\"https://github.com/bajdcc/MiniOS\" data-editable=\"true\" data-title=\"bajdcc/MiniOS\">bajdcc/MiniOS</a>Release：<a href=\"https://github.com/bajdcc/MiniOS/releases/tag/0.2.5\" data-editable=\"true\" data-title=\"bajdcc/MiniOS\" class=\"\">bajdcc/MiniOS</a>效果如题图。简要介绍<b>制作一个最小化内核，实现中断处理、异常处理、虚页管理、系统调用、进程切换！</b>前后花了两个星期，每天不断想其中的bug要怎么解决，一点点添加代码，没有全部复制，目前有足够把…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0}},"commentsCount":6,"likesCount":3,"FULLINFO":true}},"User":{"bajdcc":{"isFollowed":false,"name":"陈安","headline":"专业研究野生技术 https://github.com/bajdcc","avatarUrl":"https://pic4.zhimg.com/v2-cd6d61ad9ef94c41b9e77f8e0f727893_s.jpg","isFollowing":false,"type":"people","slug":"bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","profileUrl":"https://www.zhihu.com/people/bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false,"badge":{"identity":null,"bestAnswerer":null}}},"Comment":{},"favlists":{}},"me":{},"global":{},"columns":{"learncpp":{"following":false,"canManage":false,"href":"/api/columns/learncpp","name":"从零开始构建标准库","creator":{"slug":"bajdcc"},"url":"/learncpp","slug":"learncpp","avatar":{"id":"v2-bf63794c542fc73b11e17014b7e0d01d","template":"https://pic2.zhimg.com/{id}_{size}.jpg"}}},"columnPosts":{},"postComments":{},"postReviewComments":{"comments":[],"newComments":[],"hasMore":true},"favlistsByUser":{},"favlistRelations":{}}</textarea>

    <script src="//static.zhihu.com/hemingway/common.09e6a1984c735e134505.js"></script>
<script src="//static.zhihu.com/hemingway/app.89ecf4e073987c60567b.js"></script>
<script src="//static.zhihu.com/hemingway/raven.4f017398aa850e39fe3c.js" async defer></script>
  </body>
</html>
