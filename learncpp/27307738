<!doctype html>
<html lang="zh-CN" class="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>【Vlpp源码阅读】集合篇（一） - 知乎专栏</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link rel="shortcut icon" href="https://static.zhihu.com/static/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="//static.zhihu.com/hemingway/app.697838bb2e80a05fbcead68b45e858df.css" />
    <style></style>
    <script>document.documentElement.className += ('ontouchstart' in window) ? ' touch' : ' no-touch'</script>
  </head>
  <body>

    <div id="react-root"></div>
    <textarea id="clientConfig" hidden>{"debug":false,"apiRoot":"","paySDK":"https://pay.zhihu.com/api/js","wechatConfigAPI":"/api/wechat/jssdkconfig","name":"production","instance":"column","tokens":{"X-XSRF-TOKEN":"2|7e2cdcae|400c405ff5249dc25ea05c25714fb4f5|1502542350","X-UDID":null,"Authorization":"oauth c3cef7c66a1843f8b3a9e6a1e3160e20"}}</textarea>
    <textarea id="preloadedState" hidden>{"database":{"Post":{"27307738":{"title":"【Vlpp源码阅读】集合篇（一）","author":"bajdcc","content":"<h2>前言</h2><p>重新拜读轮大写的C++库，提升自身水平，如有错误请提出。另：代码在<a href=\"http://link.zhihu.com/?target=https%3A//github.com/vczh-libraries/Vlpp\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">vczh-libraries/Vlpp<i class=\"icon-external\"></i></a>。</p><p>自己写的库毕竟疏漏很多，在前面的文章中，除开第一次提交，就目前为止我起码发现了5个错误，所以跟理想还是差得远。想实现perfect的库就必须再花很多时间，对代码不断打磨，但是做到能用就不错了，达到perfect是异想天开。因此，暂时开启源码阅读系列，没错，本专栏第一篇的标准库目录我是参照了Gaclib的(有野心没能力哈哈)，现在想想<b><u>还是要读大佬的代码</u></b>！</p><h2>简要介绍Vlpp</h2><p>打开<a href=\"http://link.zhihu.com/?target=https%3A//github.com/vczh-libraries/Vlpp/tree/master/Source\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">vczh-libraries/Vlpp<i class=\"icon-external\"></i></a>，分析目录列表，我们发现了几个模块：</p><ul><li>Collections，泛型集合及枚举器</li><li>Parsing，LR文法分析</li><li>Reflection，反射</li><li>Regex，正则表达式</li><li>Stream，流</li></ul><p>那后面的文章大致就从上面这几部分来介绍。介绍完后，再接着阅读<a href=\"http://link.zhihu.com/?target=https%3A//github.com/vczh-libraries/GacUI\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">vczh-libraries/GacUI<i class=\"icon-external\"></i></a>的源码。</p><h2>集合的实现</h2><p>我自己写的vector库只是一个简单的内存管理类而已，太精简，木有其他功能，所以为了节省时间，就以Vlpp这个库为例，大家要用就用大佬写的代码。</p><p>先查看<a href=\"http://link.zhihu.com/?target=https%3A//github.com/vczh-libraries/Vlpp/blob/master/Source/Collections/List.h\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/vczh-librari</span><span class=\"invisible\">es/Vlpp/blob/master/Source/Collections/List.h</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>：</p><ul><li>ListStore&amp;lt;T,PODType&amp;gt;\t\t\t\t：列表存储复制算法，PODType这个参数是亮点<br></li><li>\tListBase&amp;lt;T,K&amp;gt;\t\t\t\t\t\t：列表基类</li><li>\tArray&amp;lt;T,K&amp;gt;\t\t\t\t\t\t\t：数组</li><li>\tList&amp;lt;T,K&amp;gt;\t\t\t\t\t\t\t：列表</li><li>\tSortedList&amp;lt;T,K&amp;gt;\t\t\t\t\t\t：有序列表</li></ul><p>平常写的list或是vector，都只有一个模版参数，可是这里有两个，这是为什么？</p><p>K究竟是何方神圣？</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>template&amp;lt;typename T, bool PODType&amp;gt;\nclass ListStore abstract : public Object\n{\n};\n</code></pre></div><p>问题接踵而至：PODType是什么？</p><p>我们进去<a href=\"http://link.zhihu.com/?target=https%3A//github.com/vczh-libraries/Vlpp/blob/master/Source/Basic.h\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/vczh-librari</span><span class=\"invisible\">es/Vlpp/blob/master/Source/Basic.h</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>看：</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>/// &amp;lt;summary&amp;gt;Test is a type a Plain-Old-Data type for containers.&amp;lt;/summary&amp;gt;\n/// &amp;lt;typeparam name=\"T\"&amp;gt;The type to test.&amp;lt;/typeparam&amp;gt;\ntemplate&amp;lt;typename T&amp;gt;\nstruct POD\n{\n\t/// &amp;lt;summary&amp;gt;Returns true if the type is a Plain-Old-Data type.&amp;lt;/summary&amp;gt;\n\tstatic const bool Result=false;\n};\n\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;bool&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;vint8_t&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;vuint8_t&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;vint16_t&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;vuint16_t&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;vint32_t&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;vuint32_t&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;vint64_t&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;vuint64_t&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;char&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;wchar_t&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;typename T&amp;gt;struct POD&amp;lt;T*&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;typename T&amp;gt;struct POD&amp;lt;T&amp;amp;&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;typename T, typename C&amp;gt;struct POD&amp;lt;T C::*&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;typename T, vint _Size&amp;gt;struct POD&amp;lt;T[_Size]&amp;gt;{static const bool Result=POD&amp;lt;T&amp;gt;::Result;};\ntemplate&amp;lt;typename T&amp;gt;struct POD&amp;lt;const T&amp;gt;{static const bool Result=POD&amp;lt;T&amp;gt;::Result;};\ntemplate&amp;lt;typename T&amp;gt;struct POD&amp;lt;volatile T&amp;gt;{static const bool Result=POD&amp;lt;T&amp;gt;::Result;};\ntemplate&amp;lt;typename T&amp;gt;struct POD&amp;lt;const volatile T&amp;gt;{static const bool Result=POD&amp;lt;T&amp;gt;::Result;};\n</code></pre></div><p>一脸蒙，POD里面有个Result，然而POD有许多特化，上面这些全是true，我的理解是对于像基本类型这样的POD，POD中的Result为true，其他为false。</p><p>这里明白了，ListStore多了个模版参数是为了鉴别POD的。</p><h2>列表存储复制算法（区分POD）</h2><p><i><u>06/09更新</u></i></p><p>ListStore将<u>分别管理</u>struct(POD)和class(非POD，有this指针)。<br></p><p>也就是ListStore&amp;lt;T,<b>false</b>&amp;gt;，ListStore第二个参数K<b>特化</b>，<u>为了专门管理对象而非结构体</u>，这个方法很好：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">template</span><span class=\"o\">&amp;lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&amp;gt;</span>\n<span class=\"k\">class</span> <span class=\"nc\">ListStore</span><span class=\"o\">&amp;lt;</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"nb\">false</span><span class=\"o\">&amp;gt;</span> <span class=\"nl\">abstract</span> <span class=\"p\">:</span> <span class=\"k\">public</span> <span class=\"n\">Object</span>\n<span class=\"p\">{</span>\n<span class=\"k\">protected</span><span class=\"o\">:</span>\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">InitializeItemsByDefault</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">vint</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">dst</span><span class=\"p\">;</span>\n\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">vint</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">count</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"k\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;amp;</span><span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span><span class=\"n\">T</span><span class=\"p\">();</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">InitializeItemsByMove</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">vint</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">dst</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">ss</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">src</span><span class=\"p\">;</span>\n\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">vint</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">count</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"k\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;amp;</span><span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span><span class=\"n\">T</span><span class=\"p\">(</span><span class=\"n\">MoveValue</span><span class=\"p\">(</span><span class=\"n\">ss</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]));</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">InitializeItemsByCopy</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">vint</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">dst</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">ss</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">src</span><span class=\"p\">;</span>\n\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">vint</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">count</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"k\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;amp;</span><span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span><span class=\"n\">T</span><span class=\"p\">(</span><span class=\"n\">ss</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">MoveItemsInTheSameBuffer</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">vint</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">dst</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">ss</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">src</span><span class=\"p\">;</span>\n\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ds</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">ss</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">vint</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">count</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t\t<span class=\"p\">{</span>\n\t\t\t\t<span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">MoveValue</span><span class=\"p\">(</span><span class=\"n\">ss</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ds</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">ss</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">vint</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">)</span>\n\t\t\t<span class=\"p\">{</span>\n\t\t\t\t<span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">MoveValue</span><span class=\"p\">(</span><span class=\"n\">ss</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">ReleaseItems</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">vint</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">dst</span><span class=\"p\">;</span>\n\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">vint</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">count</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">();</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">AllocateBuffer</span><span class=\"p\">(</span><span class=\"n\">vint</span> <span class=\"n\">size</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">size</span> <span class=\"o\">&amp;lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">size</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">DeallocateBuffer</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">buffer</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">buffer</span> <span class=\"o\">==</span> <span class=\"k\">nullptr</span><span class=\"p\">)</span><span class=\"k\">return</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>上面的代码涉及了一些内容：new(&amp;amp;ds[i])T(ss[i])、MoveValue(ss[i])、ds[i].~T()这些都好陌生啊！</p><p>一个个来，第一个，placement new，涉及<a href=\"http://link.zhihu.com/?target=http%3A//blog.csdn.net/zhangxinrun/article/details/5940019\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">C++中placement new操作符（经典）<i class=\"icon-external\"></i></a>，我先前的vector是只管内存的，不管对象的析构，那么现在对象的创建我已经完成了，这是内存地址ptr，我要在ptr上创建对象，而不是重新new块内存，那就可以用这个特性，new(ptr) T。</p><p>第二个，涉及右值引用，老实说这里我也很晕，还有引用折叠等概念，反正好处是不用一次次拷贝同一个的对象了。</p><p>第三个，就是主动调用析构。</p><p>================================</p><p>管理POD，即简单的内存管理：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">template</span><span class=\"o\">&amp;lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&amp;gt;</span>\n<span class=\"k\">class</span> <span class=\"nc\">ListStore</span><span class=\"o\">&amp;lt;</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"o\">&amp;gt;</span> <span class=\"nl\">abstract</span> <span class=\"p\">:</span> <span class=\"k\">public</span> <span class=\"n\">Object</span>\n<span class=\"p\">{</span>\n<span class=\"k\">protected</span><span class=\"o\">:</span>\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">InitializeItemsByDefault</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">vint</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">InitializeItemsByMove</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">vint</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">&amp;gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">count</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">InitializeItemsByCopy</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">vint</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">&amp;gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">count</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">MoveItemsInTheSameBuffer</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">vint</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">&amp;gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"n\">memmove</span><span class=\"p\">(</span><span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">count</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">ReleaseItems</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">vint</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">AllocateBuffer</span><span class=\"p\">(</span><span class=\"n\">vint</span> <span class=\"n\">size</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">size</span> <span class=\"o\">&amp;lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">size</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">DeallocateBuffer</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">buffer</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">buffer</span> <span class=\"o\">==</span> <span class=\"k\">nullptr</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n<span class=\"p\">};</span>\n</code></pre></div><br><h2>其他几个类</h2><p>ArrayBase比较常规，对于越界错误直接报错，不过里面多了个枚举器Enumerator 。</p><p>Array：继承了最上面的内存管理类。</p><p>ListBase：这里面主要是动态扩容，即内存不够了要增加空间，这里的算法是result = result * 5 / 4 + 1。还设置了lessMemoryMode模式，启用时当list的size减少，会自动释放先前申请的多余空间。</p><p>List：最终的list，实现CURD。<br></p><p>SortedList：与list不同，用于二分查找，插入时会保证数组有序。<br></p><p>我的vector实现差不多是按照上面做的，最多是内存扩容方法不一样，然而还是有人不看代码就说效率低、说实现渣，我也不想辩解。</p>","updated":"2017-06-08T08:42:29.000Z","canComment":false,"commentPermission":"anyone","commentCount":0,"collapsedCount":0,"likeCount":22,"state":"published","isLiked":false,"slug":"27307738","isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic2.zhimg.com/v2-65d6c08963ef17fcf6c2c4f38cefa2a9_r.png","links":{"comments":"/api/posts/27307738/comments"},"reviewers":[],"topics":[{"url":"https://www.zhihu.com/topic/19593602","id":"19593602","name":"源码阅读"},{"url":"https://www.zhihu.com/topic/20007986","id":"20007986","name":"GacLib"},{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"}],"adminClosedComment":false,"titleImageSize":{"width":1280,"height":720},"href":"/api/posts/27307738","excerptTitle":"","column":{"slug":"learncpp","name":"学习C++"},"tipjarState":"inactivated","annotationAction":[],"sourceUrl":"","pageCommentsCount":0,"hasPublishingDraft":false,"snapshotUrl":"","publishedTime":"2017-06-08T16:42:29+08:00","url":"/p/27307738","lastestLikers":[{"bio":"计算机系本科生","isFollowing":false,"hash":"67a7856f873877501933488fde059212","uid":739449942736662500,"isOrg":false,"slug":"xie-luo-hua-kai-shui-zi-liu","isFollowed":false,"description":"","name":"叶落花开水自流","profileUrl":"https://www.zhihu.com/people/xie-luo-hua-kai-shui-zi-liu","avatar":{"id":"da8e974dc","template":"https://pic1.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false},{"bio":null,"isFollowing":false,"hash":"4bf467cc360c4d7933e87337c3bef752","uid":679999386956861400,"isOrg":false,"slug":"scienceasdf","isFollowed":false,"description":"","name":"scienceasdf","profileUrl":"https://www.zhihu.com/people/scienceasdf","avatar":{"id":"da8e974dc","template":"https://pic1.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false},{"bio":"码农","isFollowing":false,"hash":"039c97d1d18419afda8822e49177626c","uid":26730496524288,"isOrg":false,"slug":"suchasplus","isFollowed":false,"description":"","name":"skykid","profileUrl":"https://www.zhihu.com/people/suchasplus","avatar":{"id":"da8e974dc","template":"https://pic1.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false},{"bio":"学生","isFollowing":false,"hash":"e05bfa266fea22a1f8e2ff04991f3601","uid":571086160483508200,"isOrg":false,"slug":"yin-xian-sheng-30","isFollowed":false,"description":"","name":"尹科杰","profileUrl":"https://www.zhihu.com/people/yin-xian-sheng-30","avatar":{"id":"0cb8bacacbabe668ca658f551f114345","template":"https://pic2.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false},{"bio":"程序员","isFollowing":false,"hash":"212d27cb429148b887350cbae0f282f7","uid":805341419991597000,"isOrg":false,"slug":"freeman-16-45-59","isFollowed":false,"description":"","name":"freeman","profileUrl":"https://www.zhihu.com/people/freeman-16-45-59","avatar":{"id":"da8e974dc","template":"https://pic1.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false}],"summary":"前言重新拜读轮大写的C++库，提升自身水平，如有错误请提出。另：代码在<a href=\"https://github.com/vczh-libraries/Vlpp\" data-editable=\"true\" data-title=\"vczh-libraries/Vlpp\">vczh-libraries/Vlpp</a>。自己写的库毕竟疏漏很多，在前面的文章中，除开第一次提交，就目前为止我起码发现了5个错误，所以跟理想还是差得远。想实现perfect的库就必须再花很多时间，对代…","reviewingCommentsCount":0,"meta":{"previous":{"isTitleImageFullScreen":true,"rating":"none","titleImage":"https://pic3.zhimg.com/v2-a773020ee533be5e9ca70ce6ac4eaa1a_r.png","links":{"comments":"/api/posts/27299453/comments"},"topics":[{"url":"https://www.zhihu.com/topic/20076640","id":"20076640","name":"codecombat"},{"url":"https://www.zhihu.com/topic/19595725","id":"19595725","name":"网站搭建"},{"url":"https://www.zhihu.com/topic/19593616","id":"19593616","name":"编程学习"}],"adminClosedComment":false,"href":"/api/posts/27299453","excerptTitle":"","author":{"bio":"专业研究野生技术","isFollowing":false,"hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"slug":"bajdcc","isFollowed":false,"description":"专业研究野生技术 https://github.com/bajdcc","name":"陈安","profileUrl":"https://www.zhihu.com/people/bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false},"column":{"slug":"learncpp","name":"学习C++"},"content":"<h2>前言</h2><p>之前听说了CodeCombat，很不错，适合Python入门。在官网上玩了几十关，发现它开放源码，经过一番折腾，终于搭建成功。</p><p>官网教程：<a href=\"http://link.zhihu.com/?target=https%3A//github.com/codecombat/codecombat/wiki/Dev-Setup%3A-Windows\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">codecombat/codecombat<i class=\"icon-external\"></i></a></p><h2>工具</h2><p><b><u>安装下面指定的版本，就不会出问题，运行不了就是版本问题！！！</u></b></p><ul><li>安装Visual Studio 2015(其他版本我没试)，编译用</li><li><b>Nodejs 4.8.3</b>，如果用5、6、7版本通通出问题，问题出在编译sass-brunch上，安装npm以及bower、nodemon</li><li>Git，版本随意</li><li>Python 2.7</li><li><b>Mongodb 2.6.4</b>，用版本3以上会出问题，在restore时出现index错误</li></ul><br><h2>搭建过程</h2><ol><li>git clone <a href=\"http://link.zhihu.com/?target=https%3A//github.com/%2524GITHUB_USERNAME/codecombat.git\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">https://github.com/<i class=\"icon-external\"></i></a><a href=\"http://link.zhihu.com/?target=https%3A//github.com/%2524GITHUB_USERNAME/codecombat.git\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">codecombat<i class=\"icon-external\"></i></a>/codecombat.git，最好切换到production分支<br></li><li>npm install，这一步会报错，win平台上webworker出错，不过webworker是optional的，出错无所谓，通常情况下npm install不会有问题</li><li>下载Mongodb数据库<a href=\"http://link.zhihu.com/?target=http%3A//analytics.codecombat.com%3A8080/dump.tar.gz\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">analytics.codecombat.com:8080</span><span class=\"invisible\">/dump.tar.gz</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>，这个数据库经常更新，包括官网所有关卡数据，嘿嘿<br></li><li>编译优化，npm run postinstall，通常是自动的</li><li>运行，npm run dev或npm start，网站在127.0.0.1:3000</li></ol><h2>数据库</h2><p>数据库查看软件用robomongo，先熟悉下。</p><ol><li>注册独立用户，将其设为管理员：在coco数据库下User表中添加permissions:[\"godmode\",\"admin\"]</li><li>关卡加载失败：这是因为levels表中关卡缺失，可以将url切换到官网进行下载，将下载后的json导入到levels中，当前我写了个脚本自动下载</li></ol><h2>运行截图</h2><img src=\"http://pic3.zhimg.com/v2-1e5d3a4c3b219c06ece25395cc3afc96_b.png\" data-rawwidth=\"1366\" data-rawheight=\"768\" class=\"origin_image zh-lightbox-thumb\" width=\"1366\" data-original=\"http://pic3.zhimg.com/v2-1e5d3a4c3b219c06ece25395cc3afc96_r.png\"><img src=\"http://pic3.zhimg.com/v2-fb78199f4bee35f73a26cc4fab4d46fa_b.png\" data-rawwidth=\"1366\" data-rawheight=\"767\" class=\"origin_image zh-lightbox-thumb\" width=\"1366\" data-original=\"http://pic3.zhimg.com/v2-fb78199f4bee35f73a26cc4fab4d46fa_r.png\"><p>==============================</p><p>server代码自动下载脚本。链接：<a href=\"http://link.zhihu.com/?target=http%3A//pan.baidu.com/s/1slK1LM1\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">pan.baidu.com/s/1slK1LM</span><span class=\"invisible\">1</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> 密码：私信</p><p>已经下载完成的官方关卡数据（已下好<a href=\"http://link.zhihu.com/?target=http%3A//analytics.codecombat.com%3A8080/dump.tar.gz\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">analytics.codecombat.com:8080</span><span class=\"invisible\">/dump.tar.gz</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>）：链接：<a href=\"http://link.zhihu.com/?target=http%3A//pan.baidu.com/s/1i4PlDxN\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">pan.baidu.com/s/1i4PlDx</span><span class=\"invisible\">N</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> 密码：私信</p><blockquote><b>PS：官方关卡数据就是用自动下载脚本去下载的，若是只要体验下关卡那就只要下载关卡数据就可以了。自动下载的机制是查询数据库知不存在时将官方数据下载至本地数据库， 是按需下载，但是因为开源代码的地图和官方网站上的地图有一些不一致，所以某些关卡会下载失败。<br>折腾这个源代码很费力气，由于网上也没有多少教程，所以写了这个教程分享给大家，当然最要感谢的还是做codecombat这个项目的人，太牛了。</b></blockquote>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":27299453,"publishedTime":"2017-06-08T10:06:03+08:00","url":"/p/27299453","title":"【CodeCombat】网站搭建","summary":"前言之前听说了CodeCombat，很不错，适合Python入门。在官网上玩了几十关，发现它开放源码，经过一番折腾，终于搭建成功。官网教程：<a href=\"https://github.com/codecombat/codecombat/wiki/Dev-Setup:-Windows\" data-editable=\"true\" data-title=\"codecombat/codecombat\">codecombat/codecombat</a>工具<b><u>安装下面指定的版本，就不会出问题，运行不了就是版本问题！！！</u></b>安装Visual Studio 2015(其他版…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":1,"likesCount":12},"next":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic2.zhimg.com/v2-eb2ae043caf58722b88ad084bccda1bd_r.png","links":{"comments":"/api/posts/27350169/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19592366","id":"19592366","name":"MFC"},{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"},{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"}],"adminClosedComment":false,"href":"/api/posts/27350169","excerptTitle":"","author":{"bio":"专业研究野生技术","isFollowing":false,"hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"slug":"bajdcc","isFollowed":false,"description":"专业研究野生技术 https://github.com/bajdcc","name":"陈安","profileUrl":"https://www.zhihu.com/people/bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false},"column":{"slug":"learncpp","name":"学习C++"},"content":"<h2>前言</h2><p>vs2015竟然可以完美打开工程，哈哈可以直接生成类图了。由于内容较多，所以根据内容的重要性会安排详略。</p><a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/GraphEditor/releases/tag/1.0\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bajdcc/Graph</span><span class=\"invisible\">Editor/releases/tag/1.0</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br><p>主要的内容：</p><ol><li>MFC的基本使用介绍</li><li>4种图形的绘制</li><li>图形的事件处理</li><li>撤销与恢复功能的实现</li><li>其他功能</li></ol><h2>介绍</h2><p>MFC好歹是必学课目，其实搞GUI有多种方法，可以用Qt、WPF、SWT、Electron等等，之所以要学MFC是因为C++，还因为vc6.0体积小安装快，不需要安装其他重量级的库。</p><p>那么最基础的部分都不废话了。图形编辑器肯定要有保存功能、同时编辑多个图像、各种工具栏，所以要建立多文档的工程。看类图其实东西也不多，多了一些算法，哈这些算法比较有趣。那么本工程作为MFC的练习项目，需要读者先学习MFC相关的知识。</p><h2>图形</h2><p><b><u>图形的创建</u></b></p><p>这里只有四种图形：直线、矩形、椭圆、曲线(应该为折线)，因为API支持这些多，其他图形太过复杂了。学习完多态就会知道，四种图形是继承自某一类的，这个基类就是CGraphic。</p><p>先来看看基类：</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>class CGraphic : public CObject\n{\n    DECLARE_SERIAL( CGraphic )\npublic:\n    virtual void Serialize( CArchive &amp;amp;ar );\n\npublic:\n\tCGraphic( UINT type = NONE );\n    virtual void UpdateData( GraphicMember* pSrc, BOOL bSave = TRUE );\n\n    virtual void Draw( CDC* pDC );\n    virtual void DrawSelectedEdge( CDC* pDC );\n    virtual void HitTest( CPoint&amp;amp; pt, BOOL&amp;amp; bResult );\n    virtual LPCTSTR HitSizingTest( CPoint&amp;amp; pt, BOOL&amp;amp; bResult, LONG** PtX = NULL, LONG** PtY = NULL );\n    virtual void GetRect( CRect&amp;amp; rt );\n    virtual LPCTSTR GetName() const;\n    virtual int GetPts() const;\n    virtual BOOL EnableBrush() const;\n\npublic:\n    enum _GBS { GBS_PEN = 0x1, GBS_BRUSH };\n\n    static CGraphic* CreateGraphic( GraphicMember* );\n    static void GraphicDrawSelectedEdge( CDC* pDC, CPoint&amp;amp; pt, int&amp;amp; inflate );\n    static int GetIdBySelection( _GBS SelectType, int ID );\n    static int GetSelectionById( _GBS SelectType, int sel );\n    static LPCTSTR GetPenStyleById( int ID, BOOL bConvert = TRUE );\n    static LPCTSTR GetBrushStyleById( int ID, BOOL bConvert = TRUE );\n    static void CreateGdiObjectFromId( _GBS GdiType, int ID, CGdiObject* object, int width, int color );\n    static void GraphicHitSizingTest( LONG&amp;amp; x, LONG&amp;amp; y, int inf, CPoint&amp;amp; pt, BOOL&amp;amp; bResult,\n        LONG** X = NULL, LONG** Y = NULL );\n\nprotected:\n    static LONG DotsLengthSquare( CPoint&amp;amp; p1, CPoint&amp;amp; p2 );\n    static void LineHitTest( CPoint&amp;amp; p1, CPoint&amp;amp; p2, CPoint&amp;amp; p3, BOOL&amp;amp; bResult );\n    BOOL PtInRectTest( CPoint&amp;amp; pt );\n\npublic:\n    UINT    m_DrawType;\n    BOOL    m_bHidden;\n    CString m_lpszName;\n    CPoint  m_pt1, m_pt2;\n    CTime   m_createTime, m_modifiedTime;\n};\n</code></pre></div><p>除去一些MFC相关的方法，基类的内容很多，要实现图形的绘制、选中测试、序列化，以及Get/Set方法等。</p><p>来看看它的数据成员，包括了图形的类别、是否隐藏、自定义名称、起始点和终点、创建时间和修改时间。有人会说那折线是多个点的，两个点不肯存啊，不是的，这两个点是四种图形都会包括的，所以索性放基类中了。</p><p>工厂方法：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"n\">CGraphic</span><span class=\"o\">*</span> <span class=\"n\">CGraphic</span><span class=\"o\">::</span><span class=\"n\">CreateGraphic</span><span class=\"p\">(</span> <span class=\"n\">GraphicMember</span><span class=\"o\">*</span> <span class=\"n\">pSrc</span> <span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ASSERT</span><span class=\"p\">(</span><span class=\"n\">pSrc</span><span class=\"p\">);</span>\n    <span class=\"n\">CGraphic</span><span class=\"o\">*</span> <span class=\"n\">pRet</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">pSrc</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">m_DrawType</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"nl\">LINE</span><span class=\"p\">:</span>          <span class=\"n\">pRet</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">CLine</span><span class=\"p\">;</span>       <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"nl\">RECTANGLE</span><span class=\"p\">:</span>     <span class=\"n\">pRet</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">CRectangle</span><span class=\"p\">;</span>  <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"nl\">ELLIPSE</span><span class=\"p\">:</span>       <span class=\"n\">pRet</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">CEllipse</span><span class=\"p\">;</span>    <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"nl\">CURVE</span><span class=\"p\">:</span>         <span class=\"n\">pRet</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">CCurve</span><span class=\"p\">;</span>      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">default</span><span class=\"o\">:</span> <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">pRet</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">UpdateData</span><span class=\"p\">(</span><span class=\"n\">pSrc</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">pRet</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>其实不复杂，就是根据名称创建相应对象而已。</p><p><u><b>图形的选中</b></u></p><p>鼠标可以选中图形并拖动它，改变它大小时，光标会变成相应的形态，这怎么实现呢？其实很多游戏都有选中图形如3D对象的功能，如MC、看门狗等，当然在2D世界中，问题相应简单的多，我们这里用最笨的方法，就是一个个找。。</p><p>在正式GUI中，控件间有父子和兄弟关系，这样的话，就是在一棵树中查找，效率相对高点，而本项目中所有图形是兄弟关系，所以只能一个个遍历啦~</p><p>那么线段的选中是怎样实现的？直线没有宽度啊。。这个问题也困扰了我，不过这里不要求精确，假设线段的两端点为AB，当然鼠标所在位置为C，只要算AC+BC跟AB很接近就可以了。</p><p>椭圆的选中呢？很简单，因为这里不支持旋转，所以椭圆是方正的，只要根据椭圆的二次解析式方程就可以判断，就点代进去，然后算大于0还是小于0。这里有个注意点：<b>浮点数的大小判断不能用等号，要用不等式区间去判断。</b></p><p>折线的选中就是连着判断所有线段。</p><p><b><u>图形的调整与拖动</u></b><br></p><p>图形的调整大小：首先要选中图形，然后出现选中轮廓提示，再移动到轮廓上等光标改变，就可以改变图形的大小。这部分较简单。</p><p>图形的拖动：监听几个事件，OnLButtonDown/OnLButtonUp/OnMouseMove，如当前选中了哪个图形就要将它记录下来，万一要调整图形的大小了，就可以马上将记录下来的图形进行修改。这部分比较繁琐（代码比较乱），建议自己先建立Win32程序练习或参考更简单的代码。这部分就是个状态机，我也是debug了很久才把代码完善好的，这里也讲不明白。</p><p><b><u>图形的绘制</u></b></p><p>都是调的API：Ellipse/Rectangle/LineTo。</p><p>双缓存：假如直接在屏幕DC上操作，那么每画一次，就得更新一次界面，所以会闪屏。如果在缓冲上操作，然后BitBlt给屏幕，就可以尽量避免闪屏。</p><p><b><u>图形的保存</u></b></p><p>工程的序列化不用多说，CArchive去弄。保存成bmp位图需要了解下bmp的格式，然后用DIB相关的API将DC的图像数据拎出来，存到文件里。</p><br><h2>历史记录的实现</h2><p>这一部分是我认为比较有趣的部分，也是实现较难的部分，大家日常用word它就有撤销的功能，像PS有历史记录可供恢复，那么这一功能实现起来还真不是那么简单。</p><p>看代码：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">class</span> <span class=\"nc\">CGraphicLog</span>\n<span class=\"p\">{</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"n\">CGraphicLog</span><span class=\"p\">(</span> <span class=\"n\">CObArray</span><span class=\"o\">*</span> <span class=\"n\">arr</span> <span class=\"p\">);</span>\n    <span class=\"o\">~</span><span class=\"n\">CGraphicLog</span><span class=\"p\">();</span>\n\n    <span class=\"k\">enum</span> <span class=\"p\">{</span> <span class=\"n\">MAX_SAVE</span> <span class=\"o\">=</span> <span class=\"n\">LOG_MAX_SAVE</span> <span class=\"p\">};</span>\n    <span class=\"k\">enum</span> <span class=\"n\">GOS</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">GOS_NONE</span><span class=\"p\">,</span>\n        <span class=\"n\">GOS_ADD</span><span class=\"p\">,</span>\n        <span class=\"n\">GOS_DELETE</span><span class=\"p\">,</span>\n        <span class=\"n\">GOS_UPDATE</span><span class=\"p\">,</span>\n    <span class=\"p\">};</span>\n\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"kt\">void</span> <span class=\"n\">Clear</span><span class=\"p\">();</span>\n    <span class=\"n\">BOOL</span> <span class=\"nf\">CanUndo</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n    <span class=\"n\">BOOL</span> <span class=\"nf\">CanDo</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">Undo</span><span class=\"p\">();</span> <span class=\"c1\">// 撤消纪录</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">Done</span><span class=\"p\">();</span> <span class=\"c1\">// 恢复纪录</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">Operator</span><span class=\"p\">(</span> <span class=\"n\">GOS</span><span class=\"p\">,</span> <span class=\"n\">CGraphic</span><span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">BOOL</span> <span class=\"n\">bClear</span> <span class=\"o\">=</span> <span class=\"n\">TRUE</span><span class=\"p\">);</span> <span class=\"c1\">// 添加操作纪录</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">DoneOper</span><span class=\"p\">(</span> <span class=\"n\">GOS</span><span class=\"p\">,</span> <span class=\"n\">CGraphic</span><span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"p\">);</span> <span class=\"c1\">// 添加恢复纪录</span>\n\n    <span class=\"n\">BOOL</span> <span class=\"nf\">Add</span><span class=\"p\">(</span> <span class=\"n\">CGraphic</span><span class=\"o\">*</span> <span class=\"n\">pOb</span> <span class=\"p\">);</span> <span class=\"c1\">// 添加数据</span>\n    <span class=\"n\">BOOL</span> <span class=\"nf\">Add</span><span class=\"p\">(</span> <span class=\"n\">CGraphic</span><span class=\"o\">*</span> <span class=\"n\">pOb</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">ID</span> <span class=\"p\">);</span> <span class=\"c1\">// 添加数据</span>\n\n<span class=\"k\">protected</span><span class=\"o\">:</span>\n    <span class=\"kt\">void</span> <span class=\"n\">ClearDone</span><span class=\"p\">();</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">ClearUndo</span><span class=\"p\">();</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">ClearArray</span><span class=\"p\">();</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">Delete</span><span class=\"p\">(</span> <span class=\"n\">CGraphic</span><span class=\"o\">*</span> <span class=\"n\">pOb</span> <span class=\"p\">);</span>\n    <span class=\"n\">BOOL</span> <span class=\"nf\">AddRef</span><span class=\"p\">(</span> <span class=\"n\">CGraphic</span><span class=\"o\">*</span> <span class=\"n\">pOb</span> <span class=\"p\">);</span>\n\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">GraphicOperation</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">GOS</span>         <span class=\"n\">oper</span><span class=\"p\">;</span>\n        <span class=\"n\">CGraphic</span><span class=\"o\">*</span>   <span class=\"n\">pGraphic</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span>         <span class=\"n\">index</span><span class=\"p\">;</span>\n\n        <span class=\"n\">CString</span> <span class=\"nf\">Trace</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span> <span class=\"n\">_GO</span> <span class=\"p\">;</span>\n\n    <span class=\"n\">CList</span><span class=\"o\">&amp;lt;</span><span class=\"n\">_GO</span><span class=\"p\">,</span> <span class=\"n\">_GO</span><span class=\"o\">&amp;amp;&amp;gt;</span>    <span class=\"n\">m_listDone</span><span class=\"p\">;</span>\n    <span class=\"n\">CList</span><span class=\"o\">&amp;lt;</span><span class=\"n\">_GO</span><span class=\"p\">,</span> <span class=\"n\">_GO</span><span class=\"o\">&amp;amp;&amp;gt;</span>    <span class=\"n\">m_listUndo</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span>                 <span class=\"n\">m_dones</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span>                 <span class=\"n\">m_undos</span><span class=\"p\">;</span>\n    <span class=\"n\">CObArray</span><span class=\"o\">*</span>           <span class=\"n\">m_parr</span><span class=\"p\">;</span>\n    <span class=\"n\">CMap</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CGraphic</span><span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">CGraphic</span><span class=\"o\">*&amp;amp;</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&amp;amp;&amp;gt;</span> <span class=\"n\">m_refs</span><span class=\"p\">;</span> <span class=\"c1\">// 引用表</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>几大问题：</p><ul><li>撤销能不能真正删除数据？不能，否则如何恢复</li><li>一会恢复一会撤销，对象就是动态创建的，如何管理？引用计数加链表</li><li>撤销和恢复互为逆操作吗？是</li><li>只是将对象放进链表里吗？不是，因为对象一旦被修改，就要记录修改前的副本</li></ul><p>因此，操作有三种：添加、删除、更改，但组合起来不那么简单。</p><p>最核心函数：void Operator( GOS, CGraphic*, int, BOOL bClear = TRUE); // 添加操作纪录</p><p><b><u>添加操作记录</u></b><br></p><p>共有两组链表：撤销记录和恢复记录，记录着操作的类型/对象指针/对象ID。数据在CObArray*m_parr中。增加引用AddRef，去引用Delete，添加Add。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"kt\">void</span> <span class=\"n\">CGraphicLog</span><span class=\"o\">::</span><span class=\"n\">Operator</span><span class=\"p\">(</span> <span class=\"n\">GOS</span> <span class=\"n\">oper</span><span class=\"p\">,</span> <span class=\"n\">CGraphic</span><span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">BOOL</span> <span class=\"n\">bClear</span> <span class=\"cm\">/*= TRUE*/</span> <span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ASSERT_VALID</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 每次操作之后，记忆的恢复操作应该全部清除</span>\n    <span class=\"c1\">// 使用者操作时，参数bClear为真</span>\n    <span class=\"c1\">// 撤消操作时，bClear为假</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">bClear</span><span class=\"p\">)</span> <span class=\"n\">ClearDone</span><span class=\"p\">();</span>\n    \n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">bClear</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\">// * * * 这里会修改引用计数和操作对象数组 * * *</span>\n\n        <span class=\"c1\">// 凡是将对象从m_obArray（*m_parr）移出至（listUndo），那么不增加引用</span>\n        <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">oper</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"nl\">GOS_ADD</span><span class=\"p\">:</span>\n            <span class=\"c1\">// 使用本类的Add(CGraphic*)添加对象并初始化引用计数</span>\n            <span class=\"n\">ASSERT</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">));</span>\n            <span class=\"c1\">// 因为撤消列表里要保存添加操作，所以引用计数加一</span>\n            <span class=\"n\">AddRef</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n            <span class=\"c1\">// 这样引用计数为二</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"nl\">GOS_DELETE</span><span class=\"p\">:</span>\n            <span class=\"c1\">// 将其从原数组中移除（不是删除）</span>\n            <span class=\"n\">m_parr</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">RemoveAt</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">);</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"nl\">GOS_UPDATE</span><span class=\"p\">:</span>\n            <span class=\"c1\">// 更改操作，这时要保存原对象（更改前的）</span>\n            <span class=\"c1\">// 但是修改后的对象是最新创建的，没有引用计数</span>\n            <span class=\"c1\">// 所以还得初始化引用计数</span>\n            <span class=\"c1\">// 此时p为新建备份</span>\n            <span class=\"n\">ASSERT</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">AddRef</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">));</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">default</span><span class=\"o\">:</span> <span class=\"n\">ASSERT</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"Operation fault!\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">m_undos</span> <span class=\"o\">==</span> <span class=\"n\">MAX_SAVE</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\">// 如果撤消列表已经满，自动删除列尾</span>\n        <span class=\"n\">ASSERT</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">m_listUndo</span><span class=\"p\">.</span><span class=\"n\">IsEmpty</span><span class=\"p\">());</span>\n        <span class=\"n\">Delete</span><span class=\"p\">(</span><span class=\"n\">m_listUndo</span><span class=\"p\">.</span><span class=\"n\">GetTail</span><span class=\"p\">().</span><span class=\"n\">pGraphic</span><span class=\"p\">);</span>\n        <span class=\"n\">m_listUndo</span><span class=\"p\">.</span><span class=\"n\">RemoveTail</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">m_undos</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">_GO</span> <span class=\"n\">go</span><span class=\"p\">;</span>\n    <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">index</span><span class=\"p\">;</span>\n    <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">oper</span> <span class=\"o\">=</span> <span class=\"n\">oper</span><span class=\"p\">;</span>\n    <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">pGraphic</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"n\">TRACE</span><span class=\"p\">(</span><span class=\"s\">\"LOG OPER %d %s / UN: %d DN: %d REF: %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">bClear</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">Trace</span><span class=\"p\">(),</span> <span class=\"n\">m_undos</span><span class=\"p\">,</span> <span class=\"n\">m_dones</span><span class=\"p\">,</span> <span class=\"n\">m_refs</span><span class=\"p\">[</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">pGraphic</span><span class=\"p\">]);</span>\n\n    <span class=\"c1\">// 添加撤消记录</span>\n    <span class=\"n\">m_listUndo</span><span class=\"p\">.</span><span class=\"n\">AddHead</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><u><b>撤销操作</b></u></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"kt\">void</span> <span class=\"n\">CGraphicLog</span><span class=\"o\">::</span><span class=\"n\">Undo</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// * * * 这里会修改引用计数和操作对象数组 * * *</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">m_undos</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">TRACE</span><span class=\"p\">(</span><span class=\"s\">\"LOG UNDO ------</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n    <span class=\"n\">m_undos</span><span class=\"o\">--</span><span class=\"p\">;</span>\n    <span class=\"n\">_GO</span> <span class=\"n\">go</span> <span class=\"o\">=</span> <span class=\"n\">m_listUndo</span><span class=\"p\">.</span><span class=\"n\">GetHead</span><span class=\"p\">();</span>\n    <span class=\"n\">CGraphic</span><span class=\"o\">*</span> <span class=\"n\">pOb</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">oper</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"nl\">GOS_ADD</span><span class=\"p\">:</span>\n        <span class=\"c1\">// 撤消添加的，所以为删除操作</span>\n        <span class=\"c1\">// 将其从图像数组中移除，引用计数减一</span>\n        <span class=\"n\">m_parr</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">RemoveAt</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// 撤消列表中本操作记录删除（用完了删除），引用计数减一</span>\n        <span class=\"c1\">// 这时要保存恢复操作，要恢复撤消添加</span>\n        <span class=\"c1\">// 所以在listDone里要保存添加操作，引用计数加一        </span>\n        <span class=\"c1\">// 总之引用计数减一</span>\n        <span class=\"n\">Delete</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">pGraphic</span><span class=\"p\">);</span>\n        <span class=\"n\">DoneOper</span><span class=\"p\">(</span><span class=\"n\">GOS_ADD</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">pGraphic</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">);</span>\n        <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"nl\">GOS_DELETE</span><span class=\"p\">:</span>\n        <span class=\"c1\">// 撤消删除的，所以为添加操作</span>\n        <span class=\"c1\">// 将其移动到图像数组中相应位置，引用计数不变</span>\n        <span class=\"n\">m_parr</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">InsertAt</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">pGraphic</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// 撤消之前的对象要保存（移动）到恢复列表中，引用计数不变</span>\n        <span class=\"c1\">// 对象恢复到原始数组，引用计数加一</span>\n        <span class=\"n\">AddRef</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">pGraphic</span><span class=\"p\">);</span>\n        <span class=\"n\">DoneOper</span><span class=\"p\">(</span><span class=\"n\">GOS_DELETE</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">pGraphic</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">);</span>\n        <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"nl\">GOS_UPDATE</span><span class=\"p\">:</span>\n        <span class=\"c1\">// 撤消更改，现数组中对象要恢复成撤消之前的</span>\n        <span class=\"n\">pOb</span> <span class=\"o\">=</span> <span class=\"n\">Convert_To_Graphic</span><span class=\"p\">(</span><span class=\"n\">m_parr</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">GetAt</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">));</span>\n        <span class=\"n\">m_parr</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">ElementAt</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">pGraphic</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// 所以原对象被保存（移动）进恢复列表，引用计数不变</span>\n        <span class=\"c1\">// 新对象从撤消操作记录列表中移动进对象数组，引用计数不变</span>\n        <span class=\"c1\">// 总之引用计数不变</span>\n        <span class=\"n\">DoneOper</span><span class=\"p\">(</span><span class=\"n\">GOS_UPDATE</span><span class=\"p\">,</span> <span class=\"n\">pOb</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">);</span>\n        <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">default</span><span class=\"o\">:</span> <span class=\"n\">ASSERT</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"operation fault!\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">m_listUndo</span><span class=\"p\">.</span><span class=\"n\">RemoveHead</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><u><b>恢复操作</b></u><br></p><br><br><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"kt\">void</span> <span class=\"n\">CGraphicLog</span><span class=\"o\">::</span><span class=\"n\">Done</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// * * * 这里会修改引用计数和操作对象数组 * * *</span>\n\n    <span class=\"c1\">// 恢复操作遵循oper指令</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">m_dones</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">TRACE</span><span class=\"p\">(</span><span class=\"s\">\"LOG DONE ------</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n    <span class=\"n\">m_dones</span><span class=\"o\">--</span><span class=\"p\">;</span>\n    <span class=\"n\">_GO</span> <span class=\"n\">go</span> <span class=\"o\">=</span> <span class=\"n\">m_listDone</span><span class=\"p\">.</span><span class=\"n\">GetHead</span><span class=\"p\">();</span>\n    <span class=\"n\">CGraphic</span><span class=\"o\">*</span> <span class=\"n\">pOb</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">oper</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"nl\">GOS_ADD</span><span class=\"p\">:</span>\n        <span class=\"c1\">// 添加操作</span>\n        <span class=\"n\">m_parr</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">InsertAt</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">pGraphic</span><span class=\"p\">);</span>\n        \n        <span class=\"c1\">// 从保存列表移动至目标数组，引用计数不变</span>\n        <span class=\"c1\">// 添加撤消操作，引用计数加一</span>\n        <span class=\"c1\">// 总之引用计数加一</span>\n        <span class=\"n\">AddRef</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">pGraphic</span><span class=\"p\">);</span>\n        <span class=\"n\">Operator</span><span class=\"p\">(</span><span class=\"n\">GOS_ADD</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">pGraphic</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">FALSE</span><span class=\"p\">);</span>\n        <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"nl\">GOS_DELETE</span><span class=\"p\">:</span>\n        <span class=\"c1\">// 删除操作</span>\n        <span class=\"n\">m_parr</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">RemoveAt</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// 原数组中其被删除，恢复列表删除，引用计数减二</span>\n        <span class=\"c1\">// 唯一保存在撤消列表中，引用计数加一</span>\n        <span class=\"c1\">// 总之引用计数减一</span>\n        <span class=\"n\">Delete</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">pGraphic</span><span class=\"p\">);</span>\n        <span class=\"n\">Operator</span><span class=\"p\">(</span><span class=\"n\">GOS_DELETE</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">pGraphic</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">FALSE</span><span class=\"p\">);</span>\n        <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"nl\">GOS_UPDATE</span><span class=\"p\">:</span>\n        <span class=\"c1\">// 更改操作</span>\n        <span class=\"n\">pOb</span> <span class=\"o\">=</span> <span class=\"n\">Convert_To_Graphic</span><span class=\"p\">(</span><span class=\"n\">m_parr</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">GetAt</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">));</span>\n        <span class=\"n\">m_parr</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">ElementAt</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">pGraphic</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// go.pGraphic 恢复列表-&amp;gt;目标数组，引用计数不变</span>\n        <span class=\"c1\">// pOb 目标数组-&amp;gt;恢复列表，引用计数不变</span>\n        <span class=\"n\">Operator</span><span class=\"p\">(</span><span class=\"n\">GOS_UPDATE</span><span class=\"p\">,</span> <span class=\"n\">pOb</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">FALSE</span><span class=\"p\">);</span>\n        <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">default</span><span class=\"o\">:</span> <span class=\"n\">ASSERT</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"operation fault!\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">m_listDone</span><span class=\"p\">.</span><span class=\"n\">RemoveHead</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><b><u>引用计数</u></b></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"kt\">void</span> <span class=\"n\">CGraphicLog</span><span class=\"o\">::</span><span class=\"n\">Delete</span><span class=\"p\">(</span> <span class=\"n\">CGraphic</span><span class=\"o\">*</span> <span class=\"n\">pOb</span> <span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// 删除操作，当且仅当引用计数为1时（无其他引用）删除</span>\n    <span class=\"n\">ASSERT_VALID</span><span class=\"p\">(</span><span class=\"n\">pOb</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ref</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">m_refs</span><span class=\"p\">.</span><span class=\"n\">Lookup</span><span class=\"p\">(</span><span class=\"n\">pOb</span><span class=\"p\">,</span> <span class=\"n\">ref</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">ASSERT</span><span class=\"p\">(</span><span class=\"n\">ref</span> <span class=\"o\">&amp;gt;=</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ref</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">m_parr</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">GetSize</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t\t<span class=\"p\">{</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">m_parr</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">GetAt</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">CObject</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">pOb</span><span class=\"p\">)</span>\n\t\t\t\t<span class=\"p\">{</span>\n\t\t\t\t\t<span class=\"n\">TRACE</span><span class=\"p\">(</span><span class=\"s\">\"Graphic Delete ID: %d, ADDR: %p In Main Array</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">pOb</span><span class=\"p\">);</span>\n\t\t\t\t\t<span class=\"n\">m_parr</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">RemoveAt</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n\t\t\t\t\t<span class=\"k\">break</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"p\">}</span>\n\t\t\t<span class=\"p\">}</span>\n            <span class=\"k\">delete</span> <span class=\"n\">pOb</span><span class=\"p\">;</span>\n            <span class=\"n\">m_refs</span><span class=\"p\">.</span><span class=\"n\">RemoveKey</span><span class=\"p\">(</span><span class=\"n\">pOb</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">m_refs</span><span class=\"p\">[</span><span class=\"n\">pOb</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ref</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">ASSERT</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"Object not found!\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">BOOL</span> <span class=\"n\">CGraphicLog</span><span class=\"o\">::</span><span class=\"n\">AddRef</span><span class=\"p\">(</span> <span class=\"n\">CGraphic</span><span class=\"o\">*</span> <span class=\"n\">pOb</span> <span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// 增加引用计数</span>\n    <span class=\"n\">ASSERT_VALID</span><span class=\"p\">(</span><span class=\"n\">pOb</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ref</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">m_refs</span><span class=\"p\">.</span><span class=\"n\">Lookup</span><span class=\"p\">(</span><span class=\"n\">pOb</span><span class=\"p\">,</span> <span class=\"n\">ref</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">m_refs</span><span class=\"p\">[</span><span class=\"n\">pOb</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ref</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">TRUE</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">m_refs</span><span class=\"p\">[</span><span class=\"n\">pOb</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">FALSE</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// 假如是初始化引用计数，那么返回FALSE</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">BOOL</span> <span class=\"n\">CGraphicLog</span><span class=\"o\">::</span><span class=\"n\">Add</span><span class=\"p\">(</span> <span class=\"n\">CGraphic</span><span class=\"o\">*</span> <span class=\"n\">pOb</span> <span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// 新建对象后的必须操作</span>\n    <span class=\"c1\">// 向数组中新增对象</span>\n    <span class=\"c1\">// 初始化引用计数</span>\n    <span class=\"n\">ASSERT_VALID</span><span class=\"p\">(</span><span class=\"n\">pOb</span><span class=\"p\">);</span>\n    <span class=\"n\">m_parr</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"n\">pOb</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nf\">AddRef</span><span class=\"p\">(</span><span class=\"n\">pOb</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">BOOL</span> <span class=\"n\">CGraphicLog</span><span class=\"o\">::</span><span class=\"n\">Add</span><span class=\"p\">(</span> <span class=\"n\">CGraphic</span><span class=\"o\">*</span> <span class=\"n\">pOb</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">ID</span> <span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// 只在序列化读取时，将所有图形的引用计数初始化为1</span>\n    <span class=\"c1\">// m_parr之前必须调用SetSize（这样快）</span>\n    <span class=\"n\">ASSERT_VALID</span><span class=\"p\">(</span><span class=\"n\">pOb</span><span class=\"p\">);</span>\n    <span class=\"n\">m_parr</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">ElementAt</span><span class=\"p\">(</span><span class=\"n\">ID</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">pOb</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nf\">AddRef</span><span class=\"p\">(</span><span class=\"n\">pOb</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><u>由于代码中有注释（都是为了debug才理清思路写），所以直接上代码了，自己现在也讲不清楚，我想应该还有更好的实现。上述代码都是在引用计数上大作文章，一个计数写错就会导致bug。。</u></p>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":27350169,"publishedTime":"2017-06-12T10:07:19+08:00","url":"/p/27350169","title":"【MFC】图形编辑器（二）","summary":"前言vs2015竟然可以完美打开工程，哈哈可以直接生成类图了。由于内容较多，所以根据内容的重要性会安排详略。<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/GraphEditor/releases/tag/1.0\" data-editable=\"true\" data-title=\"https://github.com/bajdcc/GraphEditor/releases/tag/1.0\" class=\"\">https://github.com/bajdcc/GraphEditor/releases/tag/1.0</a> 主要的内容：MFC的基本使用介绍4种图形的绘制图形的事件处理撤销与恢复功能的实现其他…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":4,"likesCount":3}},"annotationDetail":null,"commentsCount":0,"likesCount":22,"FULLINFO":true}},"User":{"bajdcc":{"isFollowed":false,"name":"陈安","headline":"专业研究野生技术 https://github.com/bajdcc","avatarUrl":"https://pic4.zhimg.com/v2-cd6d61ad9ef94c41b9e77f8e0f727893_s.jpg","isFollowing":false,"type":"people","slug":"bajdcc","bio":"专业研究野生技术","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","profileUrl":"https://www.zhihu.com/people/bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false,"badge":{"identity":null,"bestAnswerer":null}}},"Comment":{},"favlists":{}},"me":{},"global":{},"columns":{"next":{},"learncpp":{"following":false,"canManage":false,"href":"/api/columns/learncpp","name":"学习C++","creator":{"slug":"bajdcc"},"url":"/learncpp","slug":"learncpp","avatar":{"id":"v2-bf63794c542fc73b11e17014b7e0d01d","template":"https://pic2.zhimg.com/{id}_{size}.jpg"}}},"columnPosts":{},"columnSettings":{"colomnAuthor":[],"uploadAvatarDetails":"","contributeRequests":[],"contributeRequestsTotalCount":0,"inviteAuthor":""},"postComments":{},"postReviewComments":{"comments":[],"newComments":[],"hasMore":true},"favlistsByUser":{},"favlistRelations":{},"promotions":{},"switches":{"couldAddVideo":false},"draft":{"titleImage":"","titleImageSize":{},"isTitleImageFullScreen":false,"canTitleImageFullScreen":false,"title":"","titleImageUploading":false,"error":"","content":"","draftLoading":false,"globalLoading":false,"pendingVideo":{"resource":null,"error":null}},"drafts":{"draftsList":[],"next":{}},"config":{"userNotBindPhoneTipString":{}},"recommendPosts":{"articleRecommendations":[],"columnRecommendations":[]},"env":{"isAppView":false,"appViewConfig":{"content_padding_top":128,"content_padding_bottom":56,"content_padding_left":16,"content_padding_right":16,"title_font_size":22,"body_font_size":16,"is_dark_theme":false,"can_auto_load_image":true,"app_info":"OS=iOS"},"isApp":false},"sys":{}}</textarea>

    
    <script src="//static.zhihu.com/hemingway/common.91b038e1bfdd343c17b1.js"></script>
<script src="//static.zhihu.com/hemingway/app.c97bc6d7df9ba310a52c.js"></script>
<script src="//static.zhihu.com/hemingway/raven.58b55ef131892b91fa07.js" async defer></script>
  </body>
</html>
