<!doctype html>
<html lang="zh-CN" class="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>【小轮子系列】CppShell介绍 - 知乎专栏</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link rel="shortcut icon" href="https://static.zhihu.com/static/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="//static.zhihu.com/hemingway/app.4936d5747e0875f3d24e1bd1e11d9014.css" />
    <style></style>
    <script>document.documentElement.className += ('ontouchstart' in window) ? ' touch' : ' no-touch'</script>
  </head>
  <body>

    <div id="react-root"></div>
    <textarea id="clientConfig" hidden>{"debug":false,"apiRoot":"","paySDK":"https://pay.zhihu.com/api/js","wechatConfigAPI":"/api/wechat/jssdkconfig","name":"production","instance":"column","tokens":{"X-XSRF-TOKEN":null,"X-UDID":null,"Authorization":"oauth c3cef7c66a1843f8b3a9e6a1e3160e20"}}</textarea>
    <textarea id="preloadedState" hidden>{"database":{"Post":{"26591115":{"title":"【小轮子系列】CppShell介绍","author":"bajdcc","content":"<h2>写在前面</h2><p><a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/CppShell\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/CppShell<i class=\"icon-external\"></i></a><br></p><p>最近心血来潮又造了个轮子，其实启发我的是<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/jMiniLang<i class=\"icon-external\"></i></a>中的管道思想，java运行着太慢，因而用C艹实现一把。</p><p>如题图所示，使用非常非常简单。</p><ol><li>range生成有限/无穷数列，`range 0`生成自然数无穷数列，`range 1 10`生成1到10</li><li>take N，表示从有限/无穷数列中摘取前N行</li><li>last N，表示从有限数列中取倒数N行，当然了如果数列是无穷的，那么GG</li><li>load FILENAME，加载文件</li><li>save FILENAME，保存至文件</li></ol><h2>设计思路</h2><p>首先当然是解析命令行输入啦，然后则是处理与输出。</p><p><u><b>一、处理命令</b></u></p><p>假如命令是诸如`load 1.txt | uppercase | save 2.txt`，以“|”作分隔，分隔后得到单一程序命令行，再以空格作分隔。</p><p>用式子来表示是：</p><ol><li>用户输入command_string</li><li>applications = command_string.split('|')</li></ol><br><p>对applications中每一app，app_args = app.split(' ')，然后app_name = app_args[0]，删除app_args[0]，得到后面的参数arguments下面的任务是，根据app_name和arguments来创建应用程序。</p><p><b><u>二、创建应用程序</u></b></p><p>我们以`range 1 100 | save 2.txt`为例，意义为“生成1到100的数列，然后保存至文件”。</p><p>所以必须生成两个程序range和save，那么两者是什么关系呢？</p><p>思考一下：生成数列，将数列保存至文件。即：以数列作输入，文件为输出。得到：range =&amp;gt; save。即save的输入是range的输出，是从前向后逐渐依赖的关系，换句话说，后者调用前者。</p><p>这里用到了装饰者模式，既然后者调用前者，那么后者将前者包裹起来即可。应用程序的创建涉及工厂模式，没什么大过花哨的C++技巧。</p><p><u><b>三、应用程序接口设计</b></u></p><p>其实也就是“流”接口的设计。参考众多流设计，这里我只实现最简单的：</p><ol><li>bool available() const，返回流是否可用/到末尾</li><li>char next()，读取当前字符，并准备下个字符</li></ol><p>应用程序只要重载这两个接口即可。</p><h2>代码实现</h2><p><u><b>1. Shell</b></u></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"kt\">void</span> <span class=\"n\">CShell</span><span class=\"o\">::</span><span class=\"n\">exec</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&amp;amp;</span> <span class=\"n\">cmd</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"sc\">'|'</span><span class=\"p\">);</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&amp;lt;</span><span class=\"n\">app_t</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">cmder</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&amp;lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">names</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&amp;lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&amp;lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&amp;gt;&amp;gt;</span> <span class=\"n\">arg</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span><span class=\"o\">&amp;amp;</span> <span class=\"nl\">str</span> <span class=\"p\">:</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">trim</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">);</span>\n        <span class=\"k\">auto</span> <span class=\"n\">part</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"sc\">' '</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span>\n            <span class=\"k\">return</span> <span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">\"empty argument\"</span><span class=\"p\">);</span>\n        <span class=\"n\">names</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n        <span class=\"k\">auto</span> <span class=\"n\">apt</span> <span class=\"o\">=</span> <span class=\"n\">CApp</span><span class=\"o\">::</span><span class=\"n\">get_type_by_name</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">apt</span> <span class=\"o\">==</span> <span class=\"n\">app_none</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">\"invalid application: \"</span> <span class=\"o\">+</span> <span class=\"n\">str</span><span class=\"p\">);</span>\n        <span class=\"n\">part</span><span class=\"p\">.</span><span class=\"n\">erase</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">());</span>\n        <span class=\"n\">cmder</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">apt</span><span class=\"p\">);</span>\n        <span class=\"n\">arg</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">);</span> <span class=\"c1\">// 应用程序参数</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">auto</span> <span class=\"n\">inner</span> <span class=\"o\">=</span> <span class=\"n\">CApp</span><span class=\"o\">::</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">app_null</span><span class=\"p\">);</span> <span class=\"c1\">// 最里层程序</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CApp</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">app</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">uint32_t</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">cmder</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">CApp</span><span class=\"o\">::</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">cmder</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span> <span class=\"c1\">// 工厂模式创建应用程序</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">set_arg</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s\">\": \"</span> <span class=\"o\">+</span> <span class=\"n\">app</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">get_err</span><span class=\"p\">());</span>\n        <span class=\"n\">app</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">set_inner_app</span><span class=\"p\">(</span><span class=\"n\">inner</span><span class=\"p\">);</span> <span class=\"c1\">// 装饰模式进行包装</span>\n        <span class=\"n\">inner</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">available</span><span class=\"p\">())</span> <span class=\"c1\">// 正式工作！</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">auto</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">next</span><span class=\"p\">();</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">!=</span> <span class=\"sc\">'\\0'</span><span class=\"p\">)</span>\n            <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&amp;lt;&amp;lt;</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"n\">CShell</span><span class=\"o\">::</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&amp;amp;</span> <span class=\"n\">str</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&amp;lt;&amp;lt;</span> <span class=\"n\">str</span> <span class=\"o\">&amp;lt;&amp;lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><b><u>2. App</u></b></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">enum</span> <span class=\"n\">app_t</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">app__begin</span><span class=\"p\">,</span>\n    <span class=\"n\">app_none</span><span class=\"p\">,</span>\n    <span class=\"n\">app_null</span><span class=\"p\">,</span>\n    <span class=\"n\">app_pipe</span><span class=\"p\">,</span>\n    <span class=\"n\">app_range</span><span class=\"p\">,</span>\n    <span class=\"n\">app_take</span><span class=\"p\">,</span>\n    <span class=\"n\">app_last</span><span class=\"p\">,</span>\n    <span class=\"n\">app_load</span><span class=\"p\">,</span>\n    <span class=\"n\">app_save</span><span class=\"p\">,</span>\n    <span class=\"n\">app__end</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CApp</span>\n<span class=\"p\">{</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"n\">CApp</span><span class=\"p\">();</span>\n    <span class=\"k\">virtual</span> <span class=\"o\">~</span><span class=\"n\">CApp</span><span class=\"p\">();</span>\n\n    <span class=\"k\">static</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CApp</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">app_t</span> <span class=\"n\">type</span><span class=\"p\">);</span>\n    <span class=\"k\">static</span> <span class=\"n\">app_t</span> <span class=\"nf\">get_type_by_name</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;amp;</span><span class=\"n\">name</span><span class=\"p\">);</span>\n\n    <span class=\"kt\">int</span> <span class=\"nf\">set_arg</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&amp;lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">arg</span><span class=\"p\">);</span>\n    <span class=\"k\">virtual</span> <span class=\"kt\">int</span> <span class=\"nf\">init</span><span class=\"p\">()</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">set_inner_app</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CApp</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">app</span><span class=\"p\">);</span>\n\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">get_err</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n\n    <span class=\"k\">virtual</span> <span class=\"kt\">bool</span> <span class=\"nf\">available</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">virtual</span> <span class=\"kt\">char</span> <span class=\"nf\">next</span><span class=\"p\">()</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"k\">protected</span><span class=\"o\">:</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&amp;lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">args</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">error</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CApp</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">inner</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// 创建</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CApp</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">CApp</span><span class=\"o\">::</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">app_t</span> <span class=\"n\">type</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">type</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"nl\">app_none</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"nl\">app_null</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CAppNull</span><span class=\"o\">&amp;gt;</span><span class=\"p\">();</span>\n    <span class=\"k\">case</span> <span class=\"nl\">app_pipe</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CAppPipe</span><span class=\"o\">&amp;gt;</span><span class=\"p\">();</span>\n    <span class=\"k\">case</span> <span class=\"nl\">app_range</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CAppRange</span><span class=\"o\">&amp;gt;</span><span class=\"p\">();</span>\n    <span class=\"k\">case</span> <span class=\"nl\">app_take</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CAppTake</span><span class=\"o\">&amp;gt;</span><span class=\"p\">();</span>\n    <span class=\"k\">case</span> <span class=\"nl\">app_last</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CAppLast</span><span class=\"o\">&amp;gt;</span><span class=\"p\">();</span>\n    <span class=\"k\">case</span> <span class=\"nl\">app_load</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CAppLoad</span><span class=\"o\">&amp;gt;</span><span class=\"p\">();</span>\n    <span class=\"k\">case</span> <span class=\"nl\">app_save</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&amp;lt;</span><span class=\"n\">CAppSave</span><span class=\"o\">&amp;gt;</span><span class=\"p\">();</span>\n    <span class=\"k\">default</span><span class=\"o\">:</span>\n        <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"s\">\"invalid type\"</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><b><u>3. AppLoad</u></b></p><p>就举这一个例子吧</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"kt\">int</span> <span class=\"n\">CAppTake</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"p\">()</span> <span class=\"c1\">// 初始化</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\">// 有一个参数</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">// 计数开始</span>\n        <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">atoi</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">c_str</span><span class=\"p\">());</span> <span class=\"c1\">// 计数结束</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"s\">\"invalid argument size\"</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">bool</span> <span class=\"n\">CAppTake</span><span class=\"o\">::</span><span class=\"n\">available</span><span class=\"p\">()</span> <span class=\"k\">const</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">start</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">end</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">char</span> <span class=\"n\">CAppTake</span><span class=\"o\">::</span><span class=\"n\">next</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">available</span><span class=\"p\">())</span> <span class=\"c1\">// 上一流已经中止</span>\n            <span class=\"k\">return</span> <span class=\"sc\">'\\0'</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">inner</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">available</span><span class=\"p\">())</span> <span class=\"c1\">// 上一流有数据</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">inner</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">next</span><span class=\"p\">();</span>\n            <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"sc\">'\\n'</span><span class=\"p\">)</span> <span class=\"c1\">// 读取一行到data中</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">start</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"c1\">// 计数加一</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"c1\">// 没有数据了</span>\n            <span class=\"k\">return</span> <span class=\"sc\">'\\0'</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">auto</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">front</span><span class=\"p\">();</span> <span class=\"c1\">// 输出读取的一行数据</span>\n    <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"n\">ch</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2><b>阶段性总结</b></h2><p>总之，做这个轮子还是挺愉悦的~因为并未脱离舒适区。。就当复习吧。</p><p>好吧，其实写这玩意是因为bash中的awk、sed、grep等查找替换太复杂了，还不如自己做个。</p>","updated":"2017-04-26T10:49:51.000Z","canComment":false,"commentPermission":"anyone","commentCount":6,"collapsedCount":0,"likeCount":12,"state":"published","isLiked":false,"slug":"26591115","isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic2.zhimg.com/v2-df997737d8bdad7674c878f424efb44d_r.png","links":{"comments":"/api/posts/26591115/comments"},"reviewers":[],"topics":[{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"},{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"},{"url":"https://www.zhihu.com/topic/19585411","id":"19585411","name":"函数式编程"}],"adminClosedComment":false,"titleImageSize":{"width":979,"height":512},"href":"/api/posts/26591115","excerptTitle":"","column":{"slug":"learncpp","name":"从零开始构建标准库"},"tipjarState":"inactivated","sourceUrl":"","pageCommentsCount":6,"snapshotUrl":"","publishedTime":"2017-04-26T18:49:51+08:00","url":"/p/26591115","lastestLikers":[{"profileUrl":"https://www.zhihu.com/people/shimotsuki-ruri","bio":"人不重要，内容重要。","hash":"9a1ec1595f23e368080d02656ee5ceff","uid":737815921862664200,"isOrg":false,"description":"写有用的东西。","isOrgWhiteList":false,"slug":"shimotsuki-ruri","avatar":{"id":"v2-03af6e8a46a4766242ac331ea5f35f27","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"霜月琉璃"},{"profileUrl":"https://www.zhihu.com/people/li-zi-70-32-22","bio":"编程员","hash":"21fcf3e021fc099fb7e5b864f8dddba0","uid":623438149871865900,"isOrg":false,"description":"The Beginning C","isOrgWhiteList":false,"slug":"li-zi-70-32-22","avatar":{"id":"v2-57fa8393f6c9375d9842d71731a2baba","template":"https://pic3.zhimg.com/{id}_{size}.jpg"},"name":"李子7"},{"profileUrl":"https://www.zhihu.com/people/zhang-htao","bio":null,"hash":"a4edf0e9627f7c87f84da03ff6e934ce","uid":49384578351104,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"zhang-htao","avatar":{"id":"3ad70a002","template":"https://pic3.zhimg.com/{id}_{size}.jpg"},"name":"Zhang htao"},{"profileUrl":"https://www.zhihu.com/people/hu-zhi-16-31","bio":"Null","hash":"37427378ee707ad6023b5f716a98e494","uid":59796296302592,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"hu-zhi-16-31","avatar":{"id":"da8e974dc","template":"https://pic1.zhimg.com/{id}_{size}.jpg"},"name":"乎治"},{"profileUrl":"https://www.zhihu.com/people/yan-bo-wen-23","bio":"科技小白","hash":"b5d4a46830a880666c1c5fd033f7a118","uid":61301896249344,"isOrg":false,"description":"ylonelyhub.com","isOrgWhiteList":false,"slug":"yan-bo-wen-23","avatar":{"id":"06bf12d21a4d2c1a9df9112e6fbb3883","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"Lonely"}],"summary":"写在前面<a href=\"https://github.com/bajdcc/CppShell\" data-editable=\"true\" data-title=\"bajdcc/CppShell\" class=\"\">bajdcc/CppShell</a> 最近心血来潮又造了个轮子，其实启发我的是<a href=\"https://github.com/bajdcc/jMiniLang\" data-editable=\"true\" data-title=\"bajdcc/jMiniLang\">bajdcc/jMiniLang</a>中的管道思想，java运行着太慢，因而用C艹实现一把。如题图所示，使用非常非常简单。range生成有限/无穷数列，`range 0`生成自然数无穷数列，`range 1 10`生成1到10take …","reviewingCommentsCount":0,"meta":{"previous":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic1.zhimg.com/v2-8dd8a69b4fe4b34f81200ab83a6aeb44_r.png","links":{"comments":"/api/posts/26553299/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19552832","id":"19552832","name":"Python"},{"url":"https://www.zhihu.com/topic/19557710","id":"19557710","name":"Git"},{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"}],"adminClosedComment":false,"href":"/api/posts/26553299","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<h2>写在前面</h2><p>最近又看到了Trac，想起之前用到它一次，决定再温习一遍，使用效果不错。主要看中Trac的源码管理功能，当然了，它还有许多其他的插件可以用，如可以管理svn、写wiki等。</p><p>综上网上各种教程，最终归纳成本文。</p><h2>搭建顺序</h2><ol><li>安装python 2.7及相关库</li><li>设置Trac</li></ol><h2>安装</h2><p>下载py2.7，然后pip安装以下库，默认是最新版本：</p><ol><li><b>babel </b>用于切换中文语言</li><li><b>genshi </b>网页模版引擎</li><li><b>trac</b> 我们的主角</li></ol><p>pysqlite用内建的，不需要安装。</p><br><h2>设置</h2><p><b><u>一、初始化Trac环境</u></b></p><p>在d:\\trac\\下创建环境：</p><p><b>trac-admin d:\\trac initenv</b></p><p>期间输入项目名称。</p><p><u><b>二、创建管理员账号</b></u></p><p>用脚本创建名为admin密码123456的账号，保存在passwd.digest中：</p><p><b>python.exe trac-digest.py -u admin -p 123456 &amp;gt;&amp;gt; d:\\trac\\passwd.digest</b><br></p><p>trac-digest.py内容如下（<a href=\"http://link.zhihu.com/?target=http%3A//rain.snowrain.org/archives/73\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">rain.snowrain.org/archi</span><span class=\"invisible\">ves/73</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>）：</p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"kn\">from</span> <span class=\"nn\">optparse</span> <span class=\"kn\">import</span> <span class=\"n\">OptionParser</span>\n<span class=\"kn\">import</span> <span class=\"nn\">md5</span>\n \n<span class=\"c1\"># build the options</span>\n<span class=\"n\">usage</span> <span class=\"o\">=</span> <span class=\"s2\">\"usage: %prog [options]\"</span>\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">OptionParser</span><span class=\"p\">(</span><span class=\"n\">usage</span><span class=\"o\">=</span><span class=\"n\">usage</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_option</span><span class=\"p\">(</span><span class=\"s2\">\"-u\"</span><span class=\"p\">,</span> <span class=\"s2\">\"--username\"</span><span class=\"p\">,</span><span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">\"store\"</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"s2\">\"username\"</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n                  <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"the username for whom to generate a password\"</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_option</span><span class=\"p\">(</span><span class=\"s2\">\"-p\"</span><span class=\"p\">,</span> <span class=\"s2\">\"--password\"</span><span class=\"p\">,</span><span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">\"store\"</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"s2\">\"password\"</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n                  <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"the password to use\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n \n<span class=\"c1\"># check options</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">password</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">):</span>\n   <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"You must supply both the username and password\"</span><span class=\"p\">)</span>\n \n<span class=\"c1\"># Generate the string to enter into the htdigest file</span>\n<span class=\"n\">realm</span> <span class=\"o\">=</span> <span class=\"s1\">'njg'</span>\n<span class=\"n\">kd</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">md5</span><span class=\"o\">.</span><span class=\"n\">md5</span><span class=\"p\">(</span><span class=\"s1\">':'</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">()</span>\n<span class=\"k\">print</span> <span class=\"s1\">':'</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">((</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">realm</span><span class=\"p\">,</span> <span class=\"n\">kd</span><span class=\"p\">([</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">realm</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">password</span><span class=\"p\">])))</span>\n</code></pre></div><p>将admin设成管理员账号：<b>trac-admin d:/trac permission add admin TRAC_ADMIN</b><br></p><p><b><u>三、设置配置文件</u></b></p><p>修改conf/trac.ini</p><p>添加下列内容，启用git。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>[trac]\n...\ngit_bin = C:/Program Files/Git/bin/git.exe\n...\n[components]\ntracopt.versioncontrol.git.* = enabled\n</code></pre></div><p><b><u>四、启动服务器</u></b></p><p>于8080端口监听：<b>tracd -p 8080 . --auth=*,passwd.digest,njg</b><br></p><br><h2>参考</h2><ol><li><a href=\"http://link.zhihu.com/?target=http%3A//blog.csdn.net/linuxdriverdeveloper/article/details/7631456\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Windows搭建Trac - linuxdriverdeveloper的专栏 - 博客频道 - CSDN.NET<i class=\"icon-external\"></i></a><br></li><li><a href=\"http://link.zhihu.com/?target=http%3A//rain.snowrain.org/archives/73\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">rain.snowrain.org/archi</span><span class=\"invisible\">ves/73</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></li></ol>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":26553299,"publishedTime":"2017-04-25T09:59:28+08:00","url":"/p/26553299","title":"【Trac】浏览器中查看源码库","summary":"写在前面最近又看到了Trac，想起之前用到它一次，决定再温习一遍，使用效果不错。主要看中Trac的源码管理功能，当然了，它还有许多其他的插件可以用，如可以管理svn、写wiki等。综上网上各种教程，最终归纳成本文。搭建顺序安装python 2.7及相关库设置Trac…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0},"next":{"isTitleImageFullScreen":true,"rating":"none","titleImage":"https://pic1.zhimg.com/v2-5072f9061e3bd1c5d8457bdeff24064c_r.png","links":{"comments":"/api/posts/26804202/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"},{"url":"https://www.zhihu.com/topic/19632871","id":"19632871","name":"闭包"},{"url":"https://www.zhihu.com/topic/19561132","id":"19561132","name":"Java"}],"adminClosedComment":false,"href":"/api/posts/26804202","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<p>有关jMiniLang的说明：<a href=\"https://link.zhihu.com/?target=http%3A//files.cnblogs.com/files/bajdcc/jMiniLang-manual.pdf\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">files.cnblogs.com/files</span><span class=\"invisible\">/bajdcc/jMiniLang-manual.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p>================================</p>看了<a href=\"https://www.zhihu.com/question/53094776\" class=\"internal\">Haskell 这段代码该如何理解？</a>今天突发奇想，尝试一把函数式编程的感觉~<img src=\"https://pic4.zhimg.com/v2-3b2c7ba9dd8d494555bd2b260c07e87f_b.png\" data-rawwidth=\"796\" data-rawheight=\"598\" class=\"origin_image zh-lightbox-thumb\" width=\"796\" data-original=\"https://pic4.zhimg.com/v2-3b2c7ba9dd8d494555bd2b260c07e87f_r.png\"><p>最近把<a href=\"https://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/jMiniLang<i class=\"icon-external\"></i></a>继续修整了一下，修了点bug，界面开了抗锯齿，顿时美观度大增哈哈。</p><p>依照<a href=\"https://zhuanlan.zhihu.com/p/25476629\" class=\"internal\">【游戏框架系列】诗情画意 - 知乎专栏</a>的惯例，增加了<a href=\"https://link.zhihu.com/?target=http%3A//hitokoto.us/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">一言 - ヒトコト - Hitokoto.us<i class=\"icon-external\"></i></a>以测试Web的效果，当前的网络线程是在main thread中操作的，以后会放在worker thread中实现异步。</p><p>本文要完成几个任务：</p><ol><li>实现add，add接受一个数组作为参数，使命是将数组中所有元素相加</li><li>实现字符串翻转reverse，如将12345翻成54321</li><li>实现haskell中的&amp;lt;*&amp;gt; Applicative功能</li><li>实现回文数判断</li></ol><h2>预备知识：<u>Lambda</u></h2><p>其实lambda只是没有名字的函数（事实上我还是给它们命名了），更加关键的地方是<b>闭包</b>，如果没有闭包，那lambda只是一个没有卵用的语法糖罢了。</p><br><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">xs</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"p\">[</span><span class=\"s2\">\"数组遍历闭包\"</span><span class=\"p\">]</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_size</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">idx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">f</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">idx</span> <span class=\"o\">==</span> <span class=\"nx\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">g__</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">d</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_get</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"p\">,</span> <span class=\"nx\">idx</span><span class=\"p\">);</span>\n        <span class=\"nx\">idx</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">f2</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">()</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">d</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"nx\">f2</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n    <span class=\"k\">return</span> <span class=\"nx\">f</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>上面是一个例子，<b>f</b>以及<b>f2</b>是一个<b>lambda</b>，然而<u>在lambda中竟然出现了外层变量的引用</u>。没错，这就是难点所在。</p><p>看另一个：</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>var ff = func ~(f) {\n    var fh = func ~(h) {\n        return call h(h);\n    };\n    var fx = func ~(x) {\n        var fn = func ~(n) {\n            var vx = call x(x);\n            var vf = call f(vx);\n            return call vf(n);\n        };\n        return fn;\n    };\n    return call fh(fx);\n};\nvar fact = func ~(f) {\n    var fk = func ~(n) {\n        if (n &amp;gt; 0) {\n            return n * call f(n - 1);\n        } else {\n            return 1;\n        };\n    };\n    return fk;\n};\nvar ffact = call ff(fact);\nvar fact_5 = call ffact(5);\ncall g_printn(fact_5);\n</code></pre></div><p>上面这个例子就比较玄乎了，有关知识在此<a href=\"https://link.zhihu.com/?target=http%3A//www.cnblogs.com/bajdcc/p/5757410.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Y Combinator - bajdcc - 博客园<i class=\"icon-external\"></i></a>，用lambda实现了 个调用自身的功能。</p><p>不管那么多，这里需要实现这种闭包机制，思路也很简单，<b>就是给lambda加一层<u>环境</u>，把绑定的变量塞进这环境中，那么调用执行的时候，<u>首先从lambda绑定的环境中查找变量</u>，找不到的话再找外层变量</b>。经过实践，这个方法管用。</p><h2>基本函数</h2><a href=\"https://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang/blob/master/src/priv/bajdcc/LALR1/interpret/module/ModuleFunction.java\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bajdcc/jMini</span><span class=\"invisible\">Lang/blob/master/src/priv/bajdcc/LALR1/interpret/module/ModuleFunction.java</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">max</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">&amp;gt;</span> <span class=\"nx\">b</span> <span class=\"o\">?</span> <span class=\"nx\">a</span> <span class=\"o\">:</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">min</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">&amp;lt;</span> <span class=\"nx\">b</span> <span class=\"o\">?</span> <span class=\"nx\">a</span> <span class=\"o\">:</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">lt</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">&amp;lt;</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">lte</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">&amp;lt;=</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">gt</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">&amp;gt;</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">gte</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">&amp;gt;=</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">eq</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">==</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">neq</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">!=</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">add</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">sub</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">-</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">mul</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">*</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">div</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">/</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n</code></pre></div><p>上面定义了一些函数，全是二元的，比较简单和常用。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">curry</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">f</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">call</span> <span class=\"nx\">a</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">f</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n<span class=\"kd\">var</span> <span class=\"nx\">swap</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">f</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">call</span> <span class=\"nx\">a</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">f</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>上面定义了curry和swap。curry就是先绑定函数的第一参数，调用时只需要提供第二个参数即可。swap的参数是一个二元函数，它的用处就是将两个参数互换。</p><h2>初步尝试</h2><p>先解决第一个问题：实现add函数。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">add</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"nx\">foreach</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">:</span> <span class=\"nx\">call</span> <span class=\"nx\">g_range_array</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"nx\">sum</span> <span class=\"o\">+=</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">sum</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>先除去数组为空的例外情况，上面add的实现代码是循环结构，没有什么好斟酌的了。然而它并没有函数式编程那样的逼格，我们希望的style是：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"nx\">func</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">call</span> <span class=\"nx\">g_array_empty</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">head</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_head</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">);</span> <span class=\"c1\">// 得到数组第一个元素</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">tail</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_tail</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">);</span> <span class=\"c1\">// 得到去除第一个元素后的数组</span>\n    <span class=\"k\">return</span> <span class=\"nx\">head</span> <span class=\"o\">+</span> <span class=\"nx\">call</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">tail</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>有了递归才有意思嘛！得到head和tail的代码就可以略去了，细心的人可能发现：得到tail数组是重建一个新数组呢还是直接在原有数组上修改？如果是原有基础上修改，那么就破坏了数组的只读性，导致麻烦；如果是new一个新数组，那么就要给GC添加更新难题了。</p><p>所以，妥协之下，只能new新数组了吗？注意到数组的只读性，其实只要获取<u>索引</u>就可以了！假如数组是1,2,3,4,5...那么现在给list包装一下，得到f=decorate(list)，要求f()的结果是1,2,3,4,5....，到末尾给个null，这能实现吗？</p><p>以往的思想，调用一个<b>纯函数</b>，无论多少次、什么情况下，函数的结果是一成不变的。可是现在我却要求它每次调用的结果不一样！那么它就不再是纯函数了，它必定<u>有所依赖</u>。这个依赖我可以显现给出，也可以<u>懒得去做</u>。那么后者就是闭包。</p><h2>再次尝试</h2><p>下面实现的关键：</p><blockquote>xs函数的使命是将作为数组的参数l进行包装，返回一个<b>闭包</b>closure，如果数组l没有访问到结尾，那么调用closure()就会返回一个lambda（调用 lambda()后得到数据），如果访问到结尾，返回null。</blockquote><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">xs</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"p\">[</span><span class=\"s2\">\"数组遍历闭包\"</span><span class=\"p\">]</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_size</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">idx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">f</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">idx</span> <span class=\"o\">==</span> <span class=\"nx\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">g__</span><span class=\"p\">;</span> <span class=\"c1\">// =null }</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">d</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_get</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"p\">,</span> <span class=\"nx\">idx</span><span class=\"p\">);</span>\n        <span class=\"nx\">idx</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"c1\">// 索引自增</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">f2</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">()</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">d</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"nx\">f2</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n    <span class=\"k\">return</span> <span class=\"nx\">f</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>xs这个闭包返回了一个可调用函数f，而f依赖的len和idx处于xs内部，<b>外界不可能访问到</b>，因此是安全的。</p><p>那如何使用这个闭包呢？</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">g_func_1</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span><span class=\"p\">;</span> <span class=\"c1\">// 返回自身</span>\n<span class=\"kd\">var</span> <span class=\"nx\">g_func_apply</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">call</span> <span class=\"nx\">g_func_apply_arg</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_1\"</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_apply\"</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">g_func_apply_arg</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">arg</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 带参数版本</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_size</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">);</span> <span class=\"c1\">// 计算大小</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">len</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">g__</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"c1\">// 返回空</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">len</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_get</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"p\">}</span> <span class=\"c1\">// 返回第一个</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">xs</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">val</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">x</span><span class=\"p\">();</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">val</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">val</span><span class=\"p\">();</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">arg</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">);</span> <span class=\"c1\">// 装饰原有函数，如调换两参数位置啊</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;;)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">v2</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">x</span><span class=\"p\">();</span> <span class=\"c1\">// 取数组下一个数</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">call</span> <span class=\"nx\">g_is_null</span><span class=\"p\">(</span><span class=\"nx\">v2</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"k\">break</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"c1\">// 遇到结尾</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">v2</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">v2</span><span class=\"p\">();</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">val</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">n</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">,</span> <span class=\"nx\">v2</span><span class=\"p\">);</span> <span class=\"c1\">// 累计处理</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_apply_arg\"</span><span class=\"p\">;</span>\n</code></pre></div><p>x就是作为一个闭包，每次调用x()，返回一个lambda，执行后得到值。将值进行累加计算：call n(val, v2)，其中n就是要调用的二元基本函数，在文中前面列举了。不断累计，直到闭包返回一个null，中止循环，返回计算结果。</p><p><b>g_func_apply(name, list)</b>的意义：将list数组进行累计（参照C#中<b>Aggregate</b>函数），用name指代的二元操作作为衔接。</p><p><b>g_func_apply_arg(name, list, arg)</b>的意义：将list数组进行累计（参照C#中Aggregate函数），用name指代的二元操作作为衔接，其中二元操作经arg函数修饰（如arg=swap时且结合不满足交换律时，结果就是反的）。<br></p><p>那么到这里，第一个任务完成了！</p><h2>剩下的任务</h2><p><u><b>字符串翻转</b></u></p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">g_string_reverse</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> \n  <span class=\"nx\">call</span> <span class=\"nx\">g_func_apply_arg</span><span class=\"p\">(</span><span class=\"s2\">\"g_func_add\"</span><span class=\"p\">,</span> <span class=\"nx\">call</span> <span class=\"nx\">g_string_split</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">),</span> <span class=\"s2\">\"g_func_swap\"</span><span class=\"p\">);</span>\n</code></pre></div><p>这里的窍门在于swap函数。</p><p><b><u>Haskell 中的 &amp;lt;*&amp;gt; Applicative</u></b></p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">g_func_applicative</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">,</span> <span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">call</span> <span class=\"nx\">f</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">call</span> <span class=\"nx\">b</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">));</span>\n</code></pre></div><p>实际意义是：applicative(f, a, b) = f(a, b(a))</p><p><b><u>回文数判断</u></b></p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">val</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">g_func_applicative</span><span class=\"p\">(</span><span class=\"s2\">\"g_func_eq\"</span><span class=\"p\">,</span> <span class=\"nx\">str</span><span class=\"p\">,</span> <span class=\"nx\">reverse</span><span class=\"p\">);</span>\n</code></pre></div><ul><li>g_func_eq 等于 ==<br></li><li>str 例如 12321</li><li>reverse 即字符串翻转函数</li></ul><br><p>所以原式即：str == reverse(str)。</p><h2>总结</h2><p>匆匆忙忙只是完成了函数式编程的第一步，后面会慢慢补上几个好玩的特性，如map、fold等。g_func_apply其实等同于Haskell中的foldl。</p>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":26804202,"publishedTime":"2017-05-09T16:46:45+08:00","url":"/p/26804202","title":"【jMiniOS】函数式编程（一）","summary":"有关jMiniLang的说明：<a href=\"https://link.zhihu.com/?target=http%3A//files.cnblogs.com/files/bajdcc/jMiniLang-manual.pdf\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">files.cnblogs.com/files</span><span class=\"invisible\">/bajdcc/jMiniLang-manual.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>================================看了<a href=\"https://www.zhihu.com/question/53094776\" class=\"internal\">Haskell 这段代码该如何理解？</a>今天突发奇想，尝试一把函数式编程的感觉~最近把<a href=\"https://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/jMiniLang<i class=\"icon-external\"></i></a>继续修整了一下，修了点bug，界面开了抗锯齿，顿时美观度大增哈哈。依照<a href=\"https://zhuanlan.zhihu.com/p/25476629\" class=\"internal\">【游…</a>","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0}},"commentsCount":6,"likesCount":12,"FULLINFO":true}},"User":{"bajdcc":{"isFollowed":false,"name":"陈安","headline":"专业研究野生技术 https://github.com/bajdcc","avatarUrl":"https://pic4.zhimg.com/v2-cd6d61ad9ef94c41b9e77f8e0f727893_s.jpg","isFollowing":false,"type":"people","slug":"bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","profileUrl":"https://www.zhihu.com/people/bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false,"badge":{"identity":null,"bestAnswerer":null}}},"Comment":{},"favlists":{}},"me":{},"global":{},"columns":{"learncpp":{"following":false,"canManage":false,"href":"/api/columns/learncpp","name":"从零开始构建标准库","creator":{"slug":"bajdcc"},"url":"/learncpp","slug":"learncpp","avatar":{"id":"v2-bf63794c542fc73b11e17014b7e0d01d","template":"https://pic2.zhimg.com/{id}_{size}.jpg"}}},"columnPosts":{},"postComments":{},"postReviewComments":{"comments":[],"newComments":[],"hasMore":true},"favlistsByUser":{},"favlistRelations":{},"promotions":{},"env":{"isAppView":false,"appViewConfig":{"content_padding_top":128,"content_padding_bottom":56,"content_padding_left":16,"content_padding_right":16,"title_font_size":22,"body_font_size":16,"is_dark_theme":false,"can_auto_load_image":true,"app_info":"OS=iOS"},"isApp":false},"sys":{}}</textarea>

    <script src="//static.zhihu.com/hemingway/common.c070f7d93ecd9d89ea5e.js"></script>
<script src="//static.zhihu.com/hemingway/app.5353832f5b5cd3213d84.js"></script>
<script src="//static.zhihu.com/hemingway/raven.f556922844d9edc7362e.js" async defer></script>
  </body>
</html>
