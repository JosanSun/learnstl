<!doctype html>
<html lang="zh-CN" class="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>【脚本操作系统】jMiniOS介绍 - 知乎专栏</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link rel="shortcut icon" href="https://static.zhihu.com/static/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="//static.zhihu.com/hemingway/app.4936d5747e0875f3d24e1bd1e11d9014.css" />
    <style></style>
    <script>document.documentElement.className += ('ontouchstart' in window) ? ' touch' : ' no-touch'</script>
  </head>
  <body>

    <div id="react-root"></div>
    <textarea id="clientConfig" hidden>{"debug":false,"apiRoot":"","paySDK":"https://pay.zhihu.com/api/js","wechatConfigAPI":"/api/wechat/jssdkconfig","name":"production","instance":"column","tokens":{"X-XSRF-TOKEN":"2|f0ed3a8d|a305824b84290399f58b1a874f3bd0a3|1495332256","X-UDID":null,"Authorization":"oauth c3cef7c66a1843f8b3a9e6a1e3160e20"}}</textarea>
    <textarea id="preloadedState" hidden>{"database":{"Post":{"26492108":{"title":"【脚本操作系统】jMiniOS介绍","author":"bajdcc","content":"Release：<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang/releases/tag/v2.2.4\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/jMiniLang<i class=\"icon-external\"></i></a><h2>前言</h2><p>经过不断努力，我原本关于做一个脚本操作系统的设想终于得到了实现，也完成了先前构思的基于管道的设计初衷，jMiniOS完全是基于共享变量和管道的。</p><p>目前比较好玩的功能：</p><ol><li><b>Task</b> 进程间同步调用</li><li><b>Shell系列</b>（Range，Grep，Count等） 通过管道方式完成操作，如题图中的`range 1 1000 | grep 3 | count`目的是计算1到1000中带有3的数字的数量</li><li><b>四则运算 </b>通过`task util calc 4+6*7`来进行计算，那么我这里将运算表达式直接交给priv.bajdcc.OP.grammar去处理了，也算对<b>算符优先文法</b>的一个运用</li><li><b>图形界面 </b>通过`task ui print XXX`去实现，这里的Remote窗口我套用了原本的Shell窗口，后期打算用GDI去画画，操作指令试着用SVG的，解析的话用priv.bajdcc.LL1.grammar，正好用上它哈哈</li></ol><p>本阶段预期实现的结果是在Remote窗口中做一个稍微好看的Desktop出来，仿个Ubuntu吧，然后Shell窗口就做脚本控制端。</p><h2>为什么要设计这样一个脚本操作系统</h2><p>这其实是当初的一个<u>脑洞</u>，在学习了轮子哥的LR分析代码后，体现到了Parsing Combinator的博大精深之处，由于原先的语法是与C++紧密相关的，所以移植到java上后我只好采用解析字符串的方法，所以每个parser我都会先写个syntax类，用来解析语法规则。</p><p>脚本操作系统运行在我做的解释器上，里面的指令都是我自己掰的，缺啥补啥。当初比较头疼的是实现闭包和协程，然后是写Shell的核心代码，现在基本没啥头疼的问题，因为逐渐靠近顶层设计了，不会在意太多细节。</p><p>可能大多数人看到LR分析代码会望而生畏，不过我就是抱着誓不罢休的决心，对整个C++的LR代码全部移植到java上，这样，我不大可能忽视太多细节。正因为我采用了java，所以便萌生了做解释器的想法。</p><p>做一个解释器还是挺好玩的，因为指令我可以自己设计，不用去读那些晦涩的8086汇编指令，语言也可能更加灵活，能够实现更多语法。关于做一个简单的基于栈的脚本解释器其实也不难，只要把书啃会，多学习优秀代码，花点时间，不要放弃。</p><p>写完解释器后，过了段时间，我又想了：给它搞个多进程会怎样？一不做二不休，大刀阔斧改代码，花了九牛二虎之力，后面的操作系统正是建立在单线程模拟多进程的基础上。</p><p>废话说完了，关于现在这个脚本操作系统，我的构想是给它源代码，它用到哪个自动去编译哪个，系统的进程间通信全部基于管道，管道的抢占全部使用自旋锁，所以造就了最终跑满CPU的jMiniOS。</p><p>其实写这系统纯属为了好玩。哈哈。</p><h2>系统的启动过程</h2><p>其实我这个系统的构思也是结合了现在很多OS的特性，如中断、IPC等。</p><p>其实看output你也可以了解系统的启用过程。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">1</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">kern</span><span class=\"o\">/</span><span class=\"n\">entry</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Waiting</span> <span class=\"nl\">proc</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">0</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">1</span>\n<span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">2</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">kern</span><span class=\"o\">/</span><span class=\"n\">irq</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Waiting</span> <span class=\"nl\">proc</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">1</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">2</span>\n<span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">3</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">kern</span><span class=\"o\">/</span><span class=\"n\">irq</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Create</span> <span class=\"nl\">int_proc</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">0</span>\n<span class=\"n\">Sharing</span> <span class=\"err\">'</span><span class=\"n\">IRQ</span><span class=\"err\">#</span><span class=\"n\">ON</span><span class=\"mf\">.0</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">4</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">kern</span><span class=\"o\">/</span><span class=\"n\">irq</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Create</span> <span class=\"nl\">int_proc</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">1</span>\n<span class=\"n\">Pipe</span> <span class=\"err\">#</span><span class=\"mi\">0</span> <span class=\"err\">'</span><span class=\"kt\">int</span><span class=\"err\">#</span><span class=\"mi\">0</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">5</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">kern</span><span class=\"o\">/</span><span class=\"n\">irq</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Sharing</span> <span class=\"err\">'</span><span class=\"n\">IRQ</span><span class=\"err\">#</span><span class=\"n\">ON</span><span class=\"mf\">.1</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Create</span> <span class=\"nl\">int_proc</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">2</span>\n<span class=\"n\">Pipe</span> <span class=\"err\">#</span><span class=\"mi\">1</span> <span class=\"err\">'</span><span class=\"kt\">int</span><span class=\"err\">#</span><span class=\"mi\">1</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Sharing</span> <span class=\"err\">'</span><span class=\"n\">IRQ</span><span class=\"err\">#</span><span class=\"n\">ON</span><span class=\"mf\">.2</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">6</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">kern</span><span class=\"o\">/</span><span class=\"n\">irq</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Create</span> <span class=\"nl\">int_proc</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">3</span>\n<span class=\"n\">Pipe</span> <span class=\"err\">#</span><span class=\"mi\">2</span> <span class=\"err\">'</span><span class=\"kt\">int</span><span class=\"err\">#</span><span class=\"mi\">2</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Sharing</span> <span class=\"err\">'</span><span class=\"n\">IRQ</span><span class=\"err\">#</span><span class=\"n\">ON</span><span class=\"mf\">.3</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Pipe</span> <span class=\"err\">#</span><span class=\"mi\">3</span> <span class=\"err\">'</span><span class=\"kt\">int</span><span class=\"err\">#</span><span class=\"mi\">3</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Sharing</span> <span class=\"err\">'</span><span class=\"n\">TASK</span><span class=\"err\">#</span><span class=\"n\">TABLE</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Reading</span> <span class=\"nl\">pipe</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">6</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">3</span>\n<span class=\"n\">Sharing</span> <span class=\"err\">'</span><span class=\"n\">TASK</span><span class=\"err\">#</span><span class=\"n\">LIST</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Process</span> <span class=\"err\">#</span><span class=\"mi\">2</span> <span class=\"n\">exit</span>\n<span class=\"n\">Reading</span> <span class=\"nl\">pipe</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">4</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">1</span>\n<span class=\"n\">Reading</span> <span class=\"nl\">pipe</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">5</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">2</span>\n<span class=\"n\">Reading</span> <span class=\"nl\">pipe</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">3</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">0</span>\n<span class=\"n\">Waiting</span> <span class=\"nl\">proc</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">1</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">2</span> <span class=\"n\">ok</span>\n<span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">7</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">kern</span><span class=\"o\">/</span><span class=\"n\">task</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">8</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">proc</span><span class=\"o\">/</span><span class=\"n\">schd</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">User</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">9</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Process</span> <span class=\"err\">#</span><span class=\"mi\">1</span> <span class=\"n\">exit</span>\n<span class=\"n\">Sharing</span> <span class=\"err\">'</span><span class=\"n\">TASK</span><span class=\"err\">#</span><span class=\"n\">NAMELIST</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Sharing</span> <span class=\"err\">'</span><span class=\"n\">SCHD</span><span class=\"err\">#</span><span class=\"n\">ON</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">User</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">10</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">p</span><span class=\"o\">/</span><span class=\"n\">sh</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Process</span> <span class=\"err\">#</span><span class=\"mi\">9</span> <span class=\"n\">exit</span>\n<span class=\"n\">User</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">11</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">p</span><span class=\"o\">/</span><span class=\"n\">sh</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Waiting</span> <span class=\"nl\">proc</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">10</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">11</span>\n<span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">12</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">task</span><span class=\"o\">/</span><span class=\"n\">system</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Waiting</span> <span class=\"nl\">proc</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">0</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">1</span> <span class=\"n\">ok</span>\n<span class=\"n\">Process</span> <span class=\"err\">#</span><span class=\"mi\">0</span> <span class=\"n\">exit</span>\n<span class=\"n\">Pipe</span> <span class=\"err\">#</span><span class=\"mi\">4</span> <span class=\"err\">'</span><span class=\"n\">TASKSEND</span><span class=\"err\">#</span><span class=\"mi\">1</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">13</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">task</span><span class=\"o\">/</span><span class=\"n\">util</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Pipe</span> <span class=\"err\">#</span><span class=\"mi\">5</span> <span class=\"err\">'</span><span class=\"n\">TASKSEND</span><span class=\"err\">#</span><span class=\"mi\">2</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Task</span> <span class=\"err\">#</span><span class=\"mi\">1</span> <span class=\"n\">created</span>\n<span class=\"n\">Reading</span> <span class=\"nl\">pipe</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">12</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">4</span>\n<span class=\"n\">Kernel</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">14</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">task</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Task</span> <span class=\"err\">#</span><span class=\"mi\">2</span> <span class=\"n\">created</span>\n<span class=\"n\">Reading</span> <span class=\"nl\">pipe</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">13</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">5</span>\n<span class=\"n\">Pipe</span> <span class=\"err\">#</span><span class=\"mi\">6</span> <span class=\"err\">'</span><span class=\"n\">TASKSEND</span><span class=\"err\">#</span><span class=\"mi\">3</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Task</span> <span class=\"err\">#</span><span class=\"mi\">3</span> <span class=\"n\">created</span>\n<span class=\"n\">Reading</span> <span class=\"nl\">pipe</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">14</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">6</span>\n<span class=\"n\">Process</span> <span class=\"err\">#</span><span class=\"mi\">7</span> <span class=\"n\">exit</span>\n<span class=\"n\">Process</span> <span class=\"err\">#</span><span class=\"mi\">11</span> <span class=\"n\">exit</span>\n<span class=\"n\">Waiting</span> <span class=\"nl\">proc</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"mi\">10</span> <span class=\"o\">-&amp;gt;</span> <span class=\"err\">#</span><span class=\"mi\">11</span> <span class=\"n\">ok</span>\n<span class=\"n\">Sharing</span> <span class=\"err\">'</span><span class=\"n\">cmd</span><span class=\"err\">#</span><span class=\"n\">histroy</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Sharing</span> <span class=\"err\">'</span><span class=\"n\">PIPE</span><span class=\"err\">#</span><span class=\"n\">HANDLE</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">User</span> <span class=\"n\">process</span> <span class=\"err\">#</span><span class=\"mi\">15</span> <span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">p</span><span class=\"o\">/</span><span class=\"n\">sh</span><span class=\"err\">'</span> <span class=\"n\">created</span>\n<span class=\"n\">Process</span> <span class=\"err\">#</span><span class=\"mi\">10</span> <span class=\"n\">exit</span>\n</code></pre></div><p>系统从内核代码入口处开始：</p><ol><li>运行内核服务：用户进程调度服务Schd、中断处理服务Irq、远程调用服务Task。系统进程分内核态和用户态（特权检查暂时没做，管道的创建和使用特权也没做），Schd只是调度用户态进程。Irq有四个：图形界面、远程调用、控制台输出、系统退出，当然嫌少的话可以加，从前到后优先级降低。Task是基于MiniOS的思路，通过管道做一个简单的同步IPC。<br></li><li>Schd和Irq开始运行，Irq收到信息就可以调用相应服务。</li><li>Task运行三个服务：System、Util、UI。</li><li>运行Shell，等待输入。</li></ol><p>那么任何一个细节也是千丝万缕，尤其是最复杂的Shell，调试它的问题花了数日。</p><p>从启动过程可以看到，系统是组件化、微服务化的，各个组件分得很清楚，我主要是通过管道和共享变量去解耦。从写代码的过程中，我很是体会到了那些优秀操作系统中的精妙构想，真是非常美！</p><p>贴一张系统服务的图：</p><noscript><img src=\"https://pic3.zhimg.com/v2-1319b919de0ee8baba5373ef48182c96_b.png\" data-rawwidth=\"810\" data-rawheight=\"610\" class=\"origin_image zh-lightbox-thumb\" width=\"810\" data-original=\"https://pic3.zhimg.com/v2-1319b919de0ee8baba5373ef48182c96_r.png\"></noscript><img src=\"//zhstatic.zhihu.com/assets/zhihu/ztext/whitedot.jpg\" data-rawwidth=\"810\" data-rawheight=\"610\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"810\" data-original=\"https://pic3.zhimg.com/v2-1319b919de0ee8baba5373ef48182c96_r.png\" data-actualsrc=\"https://pic3.zhimg.com/v2-1319b919de0ee8baba5373ef48182c96_b.png\"><h2>后面的设想</h2><p>就是抓住UI这一块，做个桌面，这样就想把轮子哥讲过的三大浪漫全给集齐了。</p>","updated":"2017-04-21T03:23:18.000Z","canComment":false,"commentPermission":"anyone","commentCount":7,"collapsedCount":0,"likeCount":40,"state":"published","isLiked":false,"slug":"26492108","isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic4.zhimg.com/v2-45eb4ca1dbdc644802e1bf448305ef13_r.png","links":{"comments":"/api/posts/26492108/comments"},"reviewers":[],"topics":[{"url":"https://www.zhihu.com/topic/19601369","id":"19601369","name":"编译原理"},{"url":"https://www.zhihu.com/topic/19561132","id":"19561132","name":"Java"},{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"}],"adminClosedComment":false,"titleImageSize":{"width":938,"height":572},"href":"/api/posts/26492108","excerptTitle":"","column":{"slug":"learncpp","name":"从零开始构建标准库"},"tipjarState":"inactivated","sourceUrl":"","pageCommentsCount":7,"snapshotUrl":"","publishedTime":"2017-04-21T11:23:18+08:00","url":"/p/26492108","lastestLikers":[{"profileUrl":"https://www.zhihu.com/people/alleysakura","bio":"学生/Linux/前端/lo汉","hash":"e33378d1f4a9371316d1d1fe2fca1c66","uid":620278201327423500,"isOrg":false,"description":"https://emiria.io","isOrgWhiteList":false,"slug":"alleysakura","avatar":{"id":"v2-6bc441ff31b07f884e3e0fdee02aaa8a","template":"https://pic3.zhimg.com/{id}_{size}.jpg"},"name":"蔓舞寻樱"},{"profileUrl":"https://www.zhihu.com/people/weeclee","bio":"程序员","hash":"2dd2620bbf5f89a65eec1f2019a80e62","uid":835521481327919100,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"weeclee","avatar":{"id":"v2-eccbe3fd958578b7432758d4255bcdd6","template":"https://pic3.zhimg.com/{id}_{size}.jpg"},"name":"林程天"},{"profileUrl":"https://www.zhihu.com/people/komeijisatori","bio":"榨汁姬/伪00后/Mtf/不会写php","hash":"7f1f7b166fcba12867973ff3c6eb0bf4","uid":630877177340760000,"isOrg":false,"description":"https://satori.moe","isOrgWhiteList":false,"slug":"komeijisatori","avatar":{"id":"v2-ecc12785c3d8cf2b9dc3a73c412ac295","template":"https://pic2.zhimg.com/{id}_{size}.jpg"},"name":"Komeiji Satori"},{"profileUrl":"https://www.zhihu.com/people/reiki-wind","bio":"9cm音乐联合创始人，高中狗一枚，ACG爱好者","hash":"8b0f4a7fd7757096bf6925bb88126f67","uid":551747514173288450,"isOrg":false,"description":"本人已死","isOrgWhiteList":false,"slug":"reiki-wind","avatar":{"id":"3e05c827e3200f2a3164785c01dc0464","template":"https://pic1.zhimg.com/{id}_{size}.jpg"},"name":"Reiki Wind"},{"profileUrl":"https://www.zhihu.com/people/njlyf2011","bio":"克莱登大学 LoveLive! 专业","hash":"545b9eee93b826ec5ea53b4046c918ad","uid":675009770348613600,"isOrg":false,"description":"一只死宅/LLer/妮厨/政治中立/Linux 用户/Debian 用户\n\n已委托「不维权骑士」网站 ，对文章内容进行 …… 追究。 #(滑稽)","isOrgWhiteList":false,"slug":"njlyf2011","avatar":{"id":"v2-1105548ee4846a1bb961591580a6f795","template":"https://pic2.zhimg.com/{id}_{size}.jpg"},"name":"Simple"}],"summary":"<img src=\"http://pic3.zhimg.com/v2-1319b919de0ee8baba5373ef48182c96_200x112.png\" data-rawwidth=\"810\" data-rawheight=\"610\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"http://pic3.zhimg.com/v2-1319b919de0ee8baba5373ef48182c96_r.png\">Release：<a href=\"https://github.com/bajdcc/jMiniLang/releases/tag/v2.2.4\" class=\"\" data-editable=\"true\" data-title=\"bajdcc/jMiniLang\">bajdcc/jMiniLang</a>前言经过不断努力，我原本关于做一个脚本操作系统的设想终于得到了实现，也完成了先前构思的基于管道的设计初衷，jMiniOS完全是基于共享变量和管道的。目前比较好玩的功能：<b>Task</b> 进程间同步调用<b>Shell系列</b>（Range，Grep，Count等）…","reviewingCommentsCount":0,"meta":{"previous":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic2.zhimg.com/v2-ea9800206ace0c292460c1c118f3acd9_r.png","links":{"comments":"/api/posts/26356924/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"},{"url":"https://www.zhihu.com/topic/19601369","id":"19601369","name":"编译原理"},{"url":"https://www.zhihu.com/topic/19561132","id":"19561132","name":"Java"}],"adminClosedComment":false,"href":"/api/posts/26356924","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<p><b>04/16 更新</b></p><img src=\"http://pic2.zhimg.com/v2-ea9800206ace0c292460c1c118f3acd9_b.png\" data-rawwidth=\"1123\" data-rawheight=\"607\" class=\"origin_image zh-lightbox-thumb\" width=\"1123\" data-original=\"http://pic2.zhimg.com/v2-ea9800206ace0c292460c1c118f3acd9_r.png\"><br><p>采用之前<a href=\"https://zhuanlan.zhihu.com/p/26054925\" class=\"internal\">【构建操作系统】进程间通信 - 知乎专栏</a>中的思想，在<i>jMiniOS</i>中进行了实现。现在这个jMiniOS已经有血有肉了，是一个高仿的操作系统，虽然瑕疵是运行的时候把CPU全占满了（因为没有sleep啊）。支持了打印运行进程，jMiniOS的进程分内核级和用户级，关于调度的内容先略过。</p><p>实践证明，<b><u>一个系统拥有共享机制（Sharing） 和管道机制（Pipe）就可以完成所有进程同步操作</u></b>，jMiniOS中的服务我只实现了上面二个，但是像fork、wait等操作全可以搞定。</p><p>实现整个Shell最核心的是借助管道机制进行进程间通信，用共享机制去实现进程互斥。系统中所有锁都是自旋锁，因为考虑到自旋锁比较简单，如果是像linux那样延迟操作的话，进程间的关系就错综复杂了。。结果是浪费了CPU。说实话，用延迟操作的话会导致进程间存在依赖关系，然而它可以使等待的进程直接休眠，提高运行效率。</p><p>当我把时间片分配单位设成50(kernel)和200(user)后，jMiniOS的运行竟然神奇地变快了。。真是意外的惊喜，其实打印输出是大头，它是分在user级进程中的，而kernel只是起一个调度和中断处理的作用。</p><p>中断处理我用管道去实现了，真是excited啊。</p><p>-----------------------------------------------------------------------------------</p><h2>写在前面</h2><p>Release： <a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang/releases/tag/v2.2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/jMiniLang<i class=\"icon-external\"></i></a>  运行：<i>java -jar jMiniLang.jar</i><br></p><p>课设说明PDF：<a href=\"http://link.zhihu.com/?target=http%3A//files.cnblogs.com/files/bajdcc/%25E4%25BD%25BF%25E7%2594%25A8%25E8%25AF%25B4%25E6%2598%258E.pdf\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">files.cnblogs.com/files</span><span class=\"invisible\">/bajdcc/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p>先前几篇Parser系列只是简单做了一个Lexer来解析C语言，奈何做一个Parser没有几个月是做不出来的，造个轮子太昂贵了。索性就翻出以前造的一个大轮子吧。</p><p>jMiniLang是我做编译原理的课设，本来是一个Parser，后来我给它添加了功能让它变成了解释器，再后来写写脚本仿个Shell出来。从第一个项目开始到现在的版本，陆陆续续，也经过了两年的时间。</p><p>jMiniLang的Lexer、Parser部分及报错处理是参考自轮子哥的<b>vfs</b>，实现了一个<b>Parser Combinator</b>，不过是字符串版的。</p><p>项目的结构：</p><ul><li><b>LALR1</b>，LR分析的实现</li><ul><li><b>grammer</b>，语法树</li><li><b>interpret</b>，解释器</li><li><b>semantic</b>，语义</li><li><b>syntax</b>，语法规则</li><li><b>ui</b>，可视化界面</li></ul><li><b>LL1</b>，LL分析的实现</li><li><b>OP</b>，算符优先文法的实现</li><li><b>util</b>，正则表达式的实现</li></ul><h2>介绍</h2><p><b><u>一、正则表达式部分</u></b></p><p>正则表达式：根据式子，构造中规中矩的FSM状态机，并进行去Epsilon边、确定化、简单的最小化。</p><p>参考：<a href=\"http://link.zhihu.com/?target=http%3A//www.cppblog.com/vczh/archive/2008/05/22/50763.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《构造正则表达式引擎》新鲜出炉啦！ - λ-calculus（惊愕到手了欧耶，GetBlogPostIds.aspx） - C++博客<i class=\"icon-external\"></i></a></p><p>稍微改进的是：实现了filter。我们知道，在识别字符串的时候，如遇到转义，\" \\\" \"，这样会导致识别过前结束，虽然现在我在<a href=\"https://zhuanlan.zhihu.com/p/26193530\" class=\"internal\">【Parser系列】Lexer II - 知乎专栏</a>中解决了这一问题，但是当时没有思路，就做了filter。它的功能是：识别字符串时采用filter，当遇到转义时，返回转义后的字符，这样，在regex表达式中就可以不用再写转义相关的规则。</p><br><p><b><u>二、算符优先文法</u></b></p><p>由于借鉴了visitor模式，只要写好visitor，那么就可以自动遍历整个树，得到firstVT和lastVT，最后生成一个算符优先关系矩阵。运行实例在OP.grammar.test.TestGrammar.java中。</p><p>这里也增加了我的一个想法：当找到最左素短语时，就要进行规约，那么此时这个短语就是由0和1组成的串，其中0是操作数，1为操作符。如加法的模式串就是“010”。</p><p>下面截取片段：</p><p><u><i>OP.grammar.test.TestGrammar.java</i></u><br></p><div class=\"highlight\"><pre><code class=\"language-java\"><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">TestGrammar</span> <span class=\"o\">{</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">try</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"c1\">// Scanner scanner = new Scanner(System.in);</span>\n\t\t\t<span class=\"n\">Grammar</span> <span class=\"n\">grammar</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Grammar</span><span class=\"o\">(</span><span class=\"s\">\"3 - (28 / (4 * 7)) * (2 + 4) + 5\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"i\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">INTEGER</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"PLUS\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">PLUS</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"MINUS\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">MINUS</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"TIMES\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">TIMES</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"DIVIDE\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span>\n\t\t\t\t\t<span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">DIVIDE</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"LPA\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LPARAN</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"RPA\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">RPARAN</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">nons</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"o\">{</span> <span class=\"s\">\"E\"</span><span class=\"o\">,</span> <span class=\"s\">\"T\"</span><span class=\"o\">,</span> <span class=\"s\">\"F\"</span> <span class=\"o\">};</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">non</span> <span class=\"o\">:</span> <span class=\"n\">nons</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addNonTerminal</span><span class=\"o\">(</span><span class=\"n\">non</span><span class=\"o\">);</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addPatternHandler</span><span class=\"o\">(</span><span class=\"s\">\"1\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">IPatternHandler</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"nd\">@Override</span>\n\t\t\t\t<span class=\"kd\">public</span> <span class=\"n\">Object</span> <span class=\"nf\">handle</span><span class=\"o\">(</span><span class=\"n\">List</span><span class=\"o\">&amp;lt;</span><span class=\"n\">Token</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">tokens</span><span class=\"o\">,</span> <span class=\"n\">List</span><span class=\"o\">&amp;lt;</span><span class=\"n\">Object</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">symbols</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t<span class=\"k\">return</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">tokens</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">).</span><span class=\"na\">object</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n\t\t\t\t<span class=\"o\">}</span>\n\n\t\t\t\t<span class=\"nd\">@Override</span>\n\t\t\t\t<span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getPatternName</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"操作数转换\"</span><span class=\"o\">;</span>\n\t\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"o\">});</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addPatternHandler</span><span class=\"o\">(</span><span class=\"s\">\"010\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">IPatternHandler</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"nd\">@Override</span>\n\t\t\t\t<span class=\"kd\">public</span> <span class=\"n\">Object</span> <span class=\"nf\">handle</span><span class=\"o\">(</span><span class=\"n\">List</span><span class=\"o\">&amp;lt;</span><span class=\"n\">Token</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">tokens</span><span class=\"o\">,</span> <span class=\"n\">List</span><span class=\"o\">&amp;lt;</span><span class=\"n\">Object</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">symbols</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t<span class=\"kt\">int</span> <span class=\"n\">lop</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"n\">symbols</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n\t\t\t\t\t<span class=\"kt\">int</span> <span class=\"n\">rop</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"n\">symbols</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n\t\t\t\t\t<span class=\"n\">Token</span> <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">tokens</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n\t\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"na\">kToken</span> <span class=\"o\">==</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t\t<span class=\"n\">OperatorType</span> <span class=\"n\">kop</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">OperatorType</span><span class=\"o\">)</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"na\">object</span><span class=\"o\">;</span>\n\t\t\t\t\t\t<span class=\"k\">switch</span> <span class=\"o\">(</span><span class=\"n\">kop</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t\t<span class=\"k\">case</span> <span class=\"n\">PLUS</span><span class=\"o\">:</span>\n\t\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"n\">lop</span> <span class=\"o\">+</span> <span class=\"n\">rop</span><span class=\"o\">;</span>\n\t\t\t\t\t\t<span class=\"k\">case</span> <span class=\"n\">MINUS</span><span class=\"o\">:</span>\n\t\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"n\">lop</span> <span class=\"o\">-</span> <span class=\"n\">rop</span><span class=\"o\">;</span>\n\t\t\t\t\t\t<span class=\"k\">case</span> <span class=\"n\">TIMES</span><span class=\"o\">:</span>\n\t\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"n\">lop</span> <span class=\"o\">*</span> <span class=\"n\">rop</span><span class=\"o\">;</span>\n\t\t\t\t\t\t<span class=\"k\">case</span> <span class=\"n\">DIVIDE</span><span class=\"o\">:</span>\n\t\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">rop</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"n\">lop</span><span class=\"o\">;</span>\n\t\t\t\t\t\t\t<span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n\t\t\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"n\">lop</span> <span class=\"o\">/</span> <span class=\"n\">rop</span><span class=\"o\">;</span>\n\t\t\t\t\t\t\t<span class=\"o\">}</span>\n\t\t\t\t\t\t<span class=\"k\">default</span><span class=\"o\">:</span>\n\t\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n\t\t\t\t\t\t<span class=\"o\">}</span>\n\t\t\t\t\t<span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n\t\t\t\t\t<span class=\"o\">}</span>\n\t\t\t\t<span class=\"o\">}</span>\n\n\t\t\t\t<span class=\"nd\">@Override</span>\n\t\t\t\t<span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getPatternName</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"二元运算\"</span><span class=\"o\">;</span>\n\t\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"o\">});</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addPatternHandler</span><span class=\"o\">(</span><span class=\"s\">\"101\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">IPatternHandler</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"nd\">@Override</span>\n\t\t\t\t<span class=\"kd\">public</span> <span class=\"n\">Object</span> <span class=\"nf\">handle</span><span class=\"o\">(</span><span class=\"n\">List</span><span class=\"o\">&amp;lt;</span><span class=\"n\">Token</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">tokens</span><span class=\"o\">,</span> <span class=\"n\">List</span><span class=\"o\">&amp;lt;</span><span class=\"n\">Object</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">symbols</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t<span class=\"n\">Token</span> <span class=\"n\">ltok</span> <span class=\"o\">=</span> <span class=\"n\">tokens</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n\t\t\t\t\t<span class=\"n\">Token</span> <span class=\"n\">rtok</span> <span class=\"o\">=</span> <span class=\"n\">tokens</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n\t\t\t\t\t<span class=\"n\">Object</span> <span class=\"n\">exp</span> <span class=\"o\">=</span> <span class=\"n\">symbols</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n\t\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ltok</span><span class=\"o\">.</span><span class=\"na\">object</span> <span class=\"o\">==</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LPARAN</span>\n\t\t\t\t\t\t\t<span class=\"o\">&amp;amp;&amp;amp;</span> <span class=\"n\">rtok</span><span class=\"o\">.</span><span class=\"na\">object</span> <span class=\"o\">==</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">RPARAN</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"c1\">// 判断括号</span>\n\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"n\">exp</span><span class=\"o\">;</span>\n\t\t\t\t\t<span class=\"o\">}</span>\n\t\t\t\t\t<span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n\t\t\t\t<span class=\"o\">}</span>\n\n\t\t\t\t<span class=\"nd\">@Override</span>\n\t\t\t\t<span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getPatternName</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n\t\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"括号运算\"</span><span class=\"o\">;</span>\n\t\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"o\">});</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">infer</span><span class=\"o\">(</span><span class=\"s\">\"E -&amp;gt; E @PLUS T | E @MINUS T | T\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">infer</span><span class=\"o\">(</span><span class=\"s\">\"T -&amp;gt; T @TIMES F | T @DIVIDE F | F\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">infer</span><span class=\"o\">(</span><span class=\"s\">\"F -&amp;gt; @LPA E @RPA | @i\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">initialize</span><span class=\"o\">(</span><span class=\"s\">\"E\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">getPrecedenceString</span><span class=\"o\">());</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">run</span><span class=\"o\">();</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">getTokenString</span><span class=\"o\">());</span>\n\t\t\t<span class=\"c1\">// scanner.close();</span>\n\t\t<span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">RegexException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">err</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getPosition</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\",\"</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">());</span>\n\t\t\t<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n\t\t<span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">SyntaxException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">err</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getPosition</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\",\"</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\" \"</span>\n\t\t\t\t\t<span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getInfo</span><span class=\"o\">());</span>\n\t\t\t<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n\t\t<span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">GrammarException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">err</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getPosition</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\",\"</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\" \"</span>\n\t\t\t\t\t<span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getInfo</span><span class=\"o\">());</span>\n\t\t\t<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><p><u>结果</u></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>#### 算符优先关系矩阵 ####\n\t0\t1\t2\t3\t4\t5\t6\t\n0\t-\t&amp;gt;\t&amp;gt;\t&amp;gt;\t&amp;gt;\t-\t&amp;gt;\t\n1\t&amp;lt;\t&amp;gt;\t&amp;gt;\t&amp;lt;\t&amp;lt;\t&amp;lt;\t&amp;gt;\t\n2\t&amp;lt;\t&amp;gt;\t&amp;gt;\t&amp;lt;\t&amp;lt;\t&amp;lt;\t&amp;gt;\t\n3\t&amp;lt;\t&amp;gt;\t&amp;gt;\t&amp;gt;\t&amp;gt;\t&amp;lt;\t&amp;gt;\t\n4\t&amp;lt;\t&amp;gt;\t&amp;gt;\t&amp;gt;\t&amp;gt;\t&amp;lt;\t&amp;gt;\t\n5\t&amp;lt;\t&amp;lt;\t&amp;lt;\t&amp;lt;\t&amp;lt;\t&amp;lt;\t=\t\n6\t-\t&amp;gt;\t&amp;gt;\t&amp;gt;\t&amp;gt;\t-\t&amp;gt;\t\n\n#### 起始符号 ####\nE\n#### 终结符 ####\n0: `i`，整数，(null)\n1: `PLUS`，操作符，PLUS\n2: `MINUS`，操作符，MINUS\n3: `TIMES`，操作符，TIMES\n4: `DIVIDE`，操作符，DIVIDE\n5: `LPA`，操作符，LPARAN\n6: `RPA`，操作符，RPARAN\n#### 非终结符 ####\n0： E\n1： T\n2： F\n#### 文法产生式 ####\nE -&amp;gt;  ( E  `PLUS`  T | E  `MINUS`  T | T ) \n\t--== FirstVT ==--\n\t\t0: `i`，整数，(null)\n\t\t1: `PLUS`，操作符，PLUS\n\t\t2: `MINUS`，操作符，MINUS\n\t\t3: `TIMES`，操作符，TIMES\n\t\t4: `DIVIDE`，操作符，DIVIDE\n\t\t5: `LPA`，操作符，LPARAN\n\t--== LastVT ==--\n\t\t0: `i`，整数，(null)\n\t\t1: `PLUS`，操作符，PLUS\n\t\t2: `MINUS`，操作符，MINUS\n\t\t3: `TIMES`，操作符，TIMES\n\t\t4: `DIVIDE`，操作符，DIVIDE\n\t\t6: `RPA`，操作符，RPARAN\nT -&amp;gt;  ( T  `TIMES`  F | T  `DIVIDE`  F | F ) \n\t--== FirstVT ==--\n\t\t0: `i`，整数，(null)\n\t\t3: `TIMES`，操作符，TIMES\n\t\t4: `DIVIDE`，操作符，DIVIDE\n\t\t5: `LPA`，操作符，LPARAN\n\t--== LastVT ==--\n\t\t0: `i`，整数，(null)\n\t\t3: `TIMES`，操作符，TIMES\n\t\t4: `DIVIDE`，操作符，DIVIDE\n\t\t6: `RPA`，操作符，RPARAN\nF -&amp;gt;  ( `LPA`  E  `RPA` | `i` ) \n\t--== FirstVT ==--\n\t\t0: `i`，整数，(null)\n\t\t5: `LPA`，操作符，LPARAN\n\t--== LastVT ==--\n\t\t0: `i`，整数，(null)\n\t\t6: `RPA`，操作符，RPARAN\n\n步骤[1]\n\t----------------\n\t输入：[0000,000:\t整数\t3 ]\n\t移进：[0000,000:\t整数\t3 ]\n\t----==== 指令堆栈 ====----\n\t1: [0: `i`，整数，(null)]\n\t0: [结束符]\n\t----==== 数据堆栈 ====----\n\t1: [0000,000:\t整数\t3 ]\n\t0: [(null)]\n\n步骤[2]\n\t----------------\n\t输入：[0000,002:\t操作符\tMINUS -]\n\t----==== 最左素短语模式 ====----\n\t1: [tok]\n\t----==== 最左素短语 ====----\n\t0000,000:\t整数\t3 \n\t----==== 处理模式名称 ====----\n\t操作数转换\n\t----==== 处理结果 ====----\n\t3\n\t----==== 指令堆栈 ====----\n\t1: [数据]\n\t0: [结束符]\n\t----==== 数据堆栈 ====----\n\t1: [3]\n\t0: [(null)]\n\n步骤[3]\n\t----------------\n\t输入：[0000,002:\t操作符\tMINUS -]\n\t移进：[0000,002:\t操作符\tMINUS -]\n\t----==== 指令堆栈 ====----\n\t2: [2: `MINUS`，操作符，MINUS]\n\t1: [数据]\n\t0: [结束符]\n\t----==== 数据堆栈 ====----\n\t2: [0000,002:\t操作符\tMINUS -]\n\t1: [3]\n\t0: [(null)]\n\n步骤[4]\n\t----------------\n\t输入：[0000,004:\t操作符\tLPARAN (]\n\t移进：[0000,004:\t操作符\tLPARAN (]\n\t----==== 指令堆栈 ====----\n\t3: [5: `LPA`，操作符，LPARAN]\n\t2: [2: `MINUS`，操作符，MINUS]\n\t1: [数据]\n\t0: [结束符]\n\t----==== 数据堆栈 ====----\n\t3: [0000,004:\t操作符\tLPARAN (]\n\t2: [0000,002:\t操作符\tMINUS -]\n\t1: [3]\n\t0: [(null)]\n\n步骤[5]\n\t----------------\n\t输入：[0000,005:\t整数\t28 ]\n\t移进：[0000,005:\t整数\t28 ]\n\t----==== 指令堆栈 ====----\n\t4: [0: `i`，整数，(null)]\n\t3: [5: `LPA`，操作符，LPARAN]\n\t2: [2: `MINUS`，操作符，MINUS]\n\t1: [数据]\n\t0: [结束符]\n\t----==== 数据堆栈 ====----\n\t4: [0000,005:\t整数\t28 ]\n\t3: [0000,004:\t操作符\tLPARAN (]\n\t2: [0000,002:\t操作符\tMINUS -]\n\t1: [3]\n\t0: [(null)]\n\n步骤[6]\n\t----------------\n\t输入：[0000,008:\t操作符\tDIVIDE /]\n\t----==== 最左素短语模式 ====----\n\t1: [tok]\n\t----==== 最左素短语 ====----\n\t0000,005:\t整数\t28 \n\t----==== 处理模式名称 ====----\n\t操作数转换\n\t----==== 处理结果 ====----\n\t28\n\t----==== 指令堆栈 ====----\n\t4: [数据]\n\t3: [5: `LPA`，操作符，LPARAN]\n\t2: [2: `MINUS`，操作符，MINUS]\n\t1: [数据]\n\t0: [结束符]\n\t----==== 数据堆栈 ====----\n\t4: [28]\n\t3: [0000,004:\t操作符\tLPARAN (]\n\t2: [0000,002:\t操作符\tMINUS -]\n\t1: [3]\n\t0: [(null)]\n</code></pre></div><p><b><u>三、LL1文法</u></b></p><p>这没啥好说的，经典方法，visitor求first、follow、select集，产生预测分析表。</p><p><i><u>LL1.grammar.test.TestGrammar.java</u></i><br></p><div class=\"highlight\"><pre><code class=\"language-java\"><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">TestGrammar</span> <span class=\"o\">{</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">try</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"c1\">//Grammar grammar = new Grammar(\"(i * i) * (i + i) - i\");</span>\n\t\t\t<span class=\"n\">Grammar</span> <span class=\"n\">grammar</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Grammar</span><span class=\"o\">(</span><span class=\"s\">\"i + i * i\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"SYMBOL\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">ID</span><span class=\"o\">,</span> <span class=\"s\">\"i\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"PLUS\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">PLUS</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"MINUS\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">MINUS</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"TIMES\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">TIMES</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"DIVIDE\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span>\n\t\t\t\t\t<span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">DIVIDE</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"LPA\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LPARAN</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"RPA\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">RPARAN</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">setEpsilonName</span><span class=\"o\">(</span><span class=\"s\">\"epsilon\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">nons</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"o\">{</span>\n\t\t\t\t\t<span class=\"s\">\"E\"</span><span class=\"o\">,</span> <span class=\"s\">\"E1\"</span><span class=\"o\">,</span> <span class=\"s\">\"T\"</span><span class=\"o\">,</span> <span class=\"s\">\"T1\"</span><span class=\"o\">,</span> <span class=\"s\">\"F\"</span><span class=\"o\">,</span> <span class=\"s\">\"A\"</span><span class=\"o\">,</span> <span class=\"s\">\"M\"</span>\n\t\t\t<span class=\"o\">};</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">non</span> <span class=\"o\">:</span> <span class=\"n\">nons</span><span class=\"o\">){</span>\n\t\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">addNonTerminal</span><span class=\"o\">(</span><span class=\"n\">non</span><span class=\"o\">);</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">infer</span><span class=\"o\">(</span><span class=\"s\">\"E -&amp;gt; T E1\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">infer</span><span class=\"o\">(</span><span class=\"s\">\"E1 -&amp;gt; A T E1 | @epsilon\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">infer</span><span class=\"o\">(</span><span class=\"s\">\"T -&amp;gt; F T1\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">infer</span><span class=\"o\">(</span><span class=\"s\">\"T1 -&amp;gt; M F T1 | @epsilon\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">infer</span><span class=\"o\">(</span><span class=\"s\">\"F -&amp;gt; @LPA E @RPA | @SYMBOL\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">infer</span><span class=\"o\">(</span><span class=\"s\">\"A -&amp;gt; @PLUS | @MINUS\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">infer</span><span class=\"o\">(</span><span class=\"s\">\"M -&amp;gt; @TIMES | @DIVIDE\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">initialize</span><span class=\"o\">(</span><span class=\"s\">\"E\"</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">getPredictionString</span><span class=\"o\">());</span>\n\t\t\t<span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">run</span><span class=\"o\">();</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"na\">getTokenString</span><span class=\"o\">());</span>\n\t\t\t<span class=\"c1\">// scanner.close();</span>\n\t\t<span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">RegexException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">err</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getPosition</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\",\"</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">());</span>\n\t\t\t<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n\t\t<span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">SyntaxException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">err</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getPosition</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\",\"</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\" \"</span>\n\t\t\t\t\t<span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getInfo</span><span class=\"o\">());</span>\n\t\t\t<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n\t\t<span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">GrammarException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">err</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getPosition</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\",\"</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\" \"</span>\n\t\t\t\t\t<span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getInfo</span><span class=\"o\">());</span>\n\t\t\t<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><p><u>结果</u></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>#### 起始符号 ####\nE\n#### 终结符 ####\n0: `SYMBOL`，标识符，i\n1: `PLUS`，操作符，PLUS\n2: `MINUS`，操作符，MINUS\n3: `TIMES`，操作符，TIMES\n4: `DIVIDE`，操作符，DIVIDE\n5: `LPA`，操作符，LPARAN\n6: `RPA`，操作符，RPARAN\n7: `epsilon`，结束符，(null)\n#### 非终结符 ####\n0： E\n1： E1\n2： T\n3： T1\n4： F\n5： A\n6： M\n#### 文法产生式 ####\nE -&amp;gt;  T  E1 \n\t--== First ==--\n\t\t0: `SYMBOL`，标识符，i\n\t\t5: `LPA`，操作符，LPARAN\n\t--== Follow ==--\n\t\t6: `RPA`，操作符，RPARAN\n\t\t7: `epsilon`，结束符，(null)\nE1 -&amp;gt;  ( A  T  E1 | `epsilon` ) \n\t--== First ==--\n\t\t1: `PLUS`，操作符，PLUS\n\t\t2: `MINUS`，操作符，MINUS\n\t\t7: `epsilon`，结束符，(null)\n\t--== Follow ==--\n\t\t6: `RPA`，操作符，RPARAN\n\t\t7: `epsilon`，结束符，(null)\nT -&amp;gt;  F  T1 \n\t--== First ==--\n\t\t0: `SYMBOL`，标识符，i\n\t\t5: `LPA`，操作符，LPARAN\n\t--== Follow ==--\n\t\t1: `PLUS`，操作符，PLUS\n\t\t2: `MINUS`，操作符，MINUS\n\t\t6: `RPA`，操作符，RPARAN\n\t\t7: `epsilon`，结束符，(null)\nT1 -&amp;gt;  ( M  F  T1 | `epsilon` ) \n\t--== First ==--\n\t\t3: `TIMES`，操作符，TIMES\n\t\t4: `DIVIDE`，操作符，DIVIDE\n\t\t7: `epsilon`，结束符，(null)\n\t--== Follow ==--\n\t\t1: `PLUS`，操作符，PLUS\n\t\t2: `MINUS`，操作符，MINUS\n\t\t6: `RPA`，操作符，RPARAN\n\t\t7: `epsilon`，结束符，(null)\nF -&amp;gt;  ( `LPA`  E  `RPA` | `SYMBOL` ) \n\t--== First ==--\n\t\t0: `SYMBOL`，标识符，i\n\t\t5: `LPA`，操作符，LPARAN\n\t--== Follow ==--\n\t\t1: `PLUS`，操作符，PLUS\n\t\t2: `MINUS`，操作符，MINUS\n\t\t3: `TIMES`，操作符，TIMES\n\t\t4: `DIVIDE`，操作符，DIVIDE\n\t\t6: `RPA`，操作符，RPARAN\n\t\t7: `epsilon`，结束符，(null)\nA -&amp;gt;  ( `PLUS` | `MINUS` ) \n\t--== First ==--\n\t\t1: `PLUS`，操作符，PLUS\n\t\t2: `MINUS`，操作符，MINUS\n\t--== Follow ==--\n\t\t0: `SYMBOL`，标识符，i\n\t\t5: `LPA`，操作符，LPARAN\nM -&amp;gt;  ( `TIMES` | `DIVIDE` ) \n\t--== First ==--\n\t\t3: `TIMES`，操作符，TIMES\n\t\t4: `DIVIDE`，操作符，DIVIDE\n\t--== Follow ==--\n\t\t0: `SYMBOL`，标识符，i\n\t\t5: `LPA`，操作符，LPARAN\n\n#### 预测分析表 ####\n状态[0]： \n\t非终结符 -&amp;gt; E\n\t\t----------------\n\t\t接受 -&amp;gt; 0: `SYMBOL`，标识符，i\n\t\t入栈 -&amp;gt; [1： E1][2： T]\n\t\t----------------\n\t\t接受 -&amp;gt; 5: `LPA`，操作符，LPARAN\n\t\t入栈 -&amp;gt; [1： E1][2： T]\n状态[1]： \n\t非终结符 -&amp;gt; E1\n\t\t----------------\n\t\t接受 -&amp;gt; 1: `PLUS`，操作符，PLUS\n\t\t入栈 -&amp;gt; [1： E1][2： T][5： A]\n\t\t----------------\n\t\t接受 -&amp;gt; 2: `MINUS`，操作符，MINUS\n\t\t入栈 -&amp;gt; [1： E1][2： T][5： A]\n\t\t----------------\n\t\t接受 -&amp;gt; 6: `RPA`，操作符，RPARAN\n\t\t入栈 -&amp;gt; \n\t\t----------------\n\t\t接受 -&amp;gt; 7: `epsilon`，结束符，(null)\n\t\t入栈 -&amp;gt; \n状态[2]： \n\t非终结符 -&amp;gt; T\n\t\t----------------\n\t\t接受 -&amp;gt; 0: `SYMBOL`，标识符，i\n\t\t入栈 -&amp;gt; [3： T1][4： F]\n\t\t----------------\n\t\t接受 -&amp;gt; 5: `LPA`，操作符，LPARAN\n\t\t入栈 -&amp;gt; [3： T1][4： F]\n状态[3]： \n\t非终结符 -&amp;gt; T1\n\t\t----------------\n\t\t接受 -&amp;gt; 1: `PLUS`，操作符，PLUS\n\t\t入栈 -&amp;gt; \n\t\t----------------\n\t\t接受 -&amp;gt; 2: `MINUS`，操作符，MINUS\n\t\t入栈 -&amp;gt; \n\t\t----------------\n\t\t接受 -&amp;gt; 3: `TIMES`，操作符，TIMES\n\t\t入栈 -&amp;gt; [3： T1][4： F][6： M]\n\t\t----------------\n\t\t接受 -&amp;gt; 4: `DIVIDE`，操作符，DIVIDE\n\t\t入栈 -&amp;gt; [3： T1][4： F][6： M]\n\t\t----------------\n\t\t接受 -&amp;gt; 6: `RPA`，操作符，RPARAN\n\t\t入栈 -&amp;gt; \n\t\t----------------\n\t\t接受 -&amp;gt; 7: `epsilon`，结束符，(null)\n\t\t入栈 -&amp;gt; \n状态[4]： \n\t非终结符 -&amp;gt; F\n\t\t----------------\n\t\t接受 -&amp;gt; 0: `SYMBOL`，标识符，i\n\t\t入栈 -&amp;gt; [0: `SYMBOL`，标识符，i]\n\t\t----------------\n\t\t接受 -&amp;gt; 5: `LPA`，操作符，LPARAN\n\t\t入栈 -&amp;gt; [6: `RPA`，操作符，RPARAN][0： E][5: `LPA`，操作符，LPARAN]\n状态[5]： \n\t非终结符 -&amp;gt; A\n\t\t----------------\n\t\t接受 -&amp;gt; 1: `PLUS`，操作符，PLUS\n\t\t入栈 -&amp;gt; [1: `PLUS`，操作符，PLUS]\n\t\t----------------\n\t\t接受 -&amp;gt; 2: `MINUS`，操作符，MINUS\n\t\t入栈 -&amp;gt; [2: `MINUS`，操作符，MINUS]\n状态[6]： \n\t非终结符 -&amp;gt; M\n\t\t----------------\n\t\t接受 -&amp;gt; 3: `TIMES`，操作符，TIMES\n\t\t入栈 -&amp;gt; [3: `TIMES`，操作符，TIMES]\n\t\t----------------\n\t\t接受 -&amp;gt; 4: `DIVIDE`，操作符，DIVIDE\n\t\t入栈 -&amp;gt; [4: `DIVIDE`，操作符，DIVIDE]\n#### 指令包 ####\n0: [1： E1][2： T]\n1: [1： E1][2： T][5： A]\n2: \n3: [3： T1][4： F]\n4: [3： T1][4： F][6： M]\n5: \n6: [6: `RPA`，操作符，RPARAN][0： E][5: `LPA`，操作符，LPARAN]\n7: [0: `SYMBOL`，标识符，i]\n8: [1: `PLUS`，操作符，PLUS]\n9: [2: `MINUS`，操作符，MINUS]\n10: [3: `TIMES`，操作符，TIMES]\n11: [4: `DIVIDE`，操作符，DIVIDE]\n#### 预测分析矩阵 ####\n0\t-\t-\t-\t-\t0\t-\t-\t\n-\t1\t1\t-\t-\t-\t2\t2\t\n3\t-\t-\t-\t-\t3\t-\t-\t\n-\t5\t5\t4\t4\t-\t5\t5\t\n7\t-\t-\t-\t-\t6\t-\t-\t\n-\t8\t9\t-\t-\t-\t-\t-\t\n-\t-\t-\t10\t11\t-\t-\t-\t\n\n步骤[1]\n\t----------------\n\t输入：[0: `SYMBOL`，标识符，i]\n\t栈顶：[0： E]\n\t入栈：[1： E1][2： T]\n\t----------------\n\t2: [2： T]\n\t1: [1： E1]\n\t0: [7: `epsilon`，结束符，(null)]\n\n步骤[2]\n\t----------------\n\t输入：[0: `SYMBOL`，标识符，i]\n\t栈顶：[2： T]\n\t入栈：[3： T1][4： F]\n\t----------------\n\t3: [4： F]\n\t2: [3： T1]\n\t1: [1： E1]\n\t0: [7: `epsilon`，结束符，(null)]\n\n步骤[3]\n\t----------------\n\t输入：[0: `SYMBOL`，标识符，i]\n\t栈顶：[4： F]\n\t入栈：[0: `SYMBOL`，标识符，i]\n\t----------------\n\t3: [0: `SYMBOL`，标识符，i]\n\t2: [3： T1]\n\t1: [1： E1]\n\t0: [7: `epsilon`，结束符，(null)]\n\n步骤[4]\n\t----------------\n\t输入：[0: `SYMBOL`，标识符，i]\n\t栈顶：[0: `SYMBOL`，标识符，i]\n\t匹配：0: `SYMBOL`，标识符，i\n\t----------------\n\t2: [3： T1]\n\t1: [1： E1]\n\t0: [7: `epsilon`，结束符，(null)]\n</code></pre></div><p><u><b>四、LALR1文法</b></u></p><p>这是最复杂的部分，涉及一个完整的编译过程。</p><p>用Parser Combinator去构造下推自动机，实现语法分析。</p><p><u><i>优雅的实现：</i></u></p><div class=\"highlight\"><pre><code class=\"language-java\"><span></span><span class=\"cm\">/**</span>\n<span class=\"cm\">\t * 声明终结符</span>\n<span class=\"cm\">\t * </span>\n<span class=\"cm\">\t * @throws SyntaxException 词法错误</span>\n<span class=\"cm\">\t */</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">declareTerminal</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"n\">SyntaxException</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"ID\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">ID</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"BOOLEAN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">BOOL</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"LITERAL\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">STRING</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"CHARACTER\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">CHARACTER</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"INTEGER\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">INTEGER</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"DECIMAL\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">DECIMAL</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">KeywordType</span> <span class=\"n\">keywordType</span> <span class=\"o\">:</span> <span class=\"n\">KeywordType</span><span class=\"o\">.</span><span class=\"na\">values</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"n\">keywordType</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">(),</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">KEYWORD</span><span class=\"o\">,</span> <span class=\"n\">keywordType</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"ELLIPSIS\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">ELLIPSIS</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"PTR_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">POINTER</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"INC_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">PLUS_PLUS</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"DEC_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">MINUS_MINUS</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"LEFT_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LEFT_SHIFT</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"RIGHT_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">RIGHT_SHIFT</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"LE_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LESS_THAN_OR_EQUAL</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"GE_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">GREATER_THAN_OR_EQUAL</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"EQ_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">EQUAL</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"NE_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">NOT_EQUAL</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"AND_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LOGICAL_AND</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"OR_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LOGICAL_OR</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"MUL_ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">TIMES_ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"DIV_ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">DIV_ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"MOD_ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">MOD_ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"ADD_ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">PLUS_ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"SUB_ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">MINUS_ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"LEFT_ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LEFT_SHIFT_ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"RIGHT_ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">RIGHT_SHIFT_ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"AND_ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">AND_ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"XOR_ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">XOR_ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"OR_ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">OR_ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"ADD\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">PLUS</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"SUB\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">MINUS</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"MUL\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">TIMES</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"DIV\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">DIVIDE</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"MOD\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">MOD</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"AND\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">BIT_AND</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"OR\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">BIT_OR</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"XOR\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">BIT_XOR</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"NOT\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">BIT_NOT</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"NOT_OP\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LOGICAL_NOT</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"LT\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LESS_THAN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"GT\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">GREATER_THAN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"QUERY\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">QUERY</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"COMMA\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">COMMA</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"SEMI\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">SEMI</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"DOT\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">DOT</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"ASSIGN\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">ASSIGN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"COLON\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">COLON</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"LPA\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LPARAN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"RPA\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">RPARAN</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"LSQ\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LSQUARE</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"RSQ\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">RSQUARE</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"LBR\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">LBRACE</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">addTerminal</span><span class=\"o\">(</span><span class=\"s\">\"RBR\"</span><span class=\"o\">,</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"na\">OPERATOR</span><span class=\"o\">,</span> <span class=\"n\">OperatorType</span><span class=\"o\">.</span><span class=\"na\">RBRACE</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"cm\">/**</span>\n<span class=\"cm\">\t * 声明非终结符</span>\n<span class=\"cm\">\t * </span>\n<span class=\"cm\">\t * @throws SyntaxException 词法错误</span>\n<span class=\"cm\">\t */</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">declareNonTerminal</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"n\">SyntaxException</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">nonTerminals</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"o\">{</span> <span class=\"s\">\"program\"</span><span class=\"o\">,</span> <span class=\"s\">\"stmt_list\"</span><span class=\"o\">,</span> <span class=\"s\">\"stmt\"</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"stmt_stmt\"</span><span class=\"o\">,</span> <span class=\"s\">\"stmt_ctrl\"</span><span class=\"o\">,</span> <span class=\"s\">\"stmt_exp\"</span><span class=\"o\">,</span> <span class=\"s\">\"func\"</span><span class=\"o\">,</span> <span class=\"s\">\"var\"</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"var_list\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp_list\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp0\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp1\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp2\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp3\"</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"exp4\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp5\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp6\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp7\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp8\"</span><span class=\"o\">,</span> <span class=\"s\">\"exp9\"</span><span class=\"o\">,</span> <span class=\"s\">\"type\"</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"block\"</span><span class=\"o\">,</span> <span class=\"s\">\"call_exp\"</span><span class=\"o\">,</span> <span class=\"s\">\"call\"</span><span class=\"o\">,</span> <span class=\"s\">\"ret\"</span><span class=\"o\">,</span> <span class=\"s\">\"doc_list\"</span><span class=\"o\">,</span> <span class=\"s\">\"port\"</span><span class=\"o\">,</span> <span class=\"s\">\"if\"</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"for\"</span><span class=\"o\">,</span> <span class=\"s\">\"while\"</span><span class=\"o\">,</span> <span class=\"s\">\"foreach\"</span><span class=\"o\">,</span> <span class=\"s\">\"cycle_ctrl\"</span><span class=\"o\">,</span> <span class=\"s\">\"block_stmt\"</span><span class=\"o\">,</span> <span class=\"s\">\"array\"</span><span class=\"o\">,</span> <span class=\"s\">\"map\"</span> <span class=\"o\">};</span>\n\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">string</span> <span class=\"o\">:</span> <span class=\"n\">nonTerminals</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">addNonTerminal</span><span class=\"o\">(</span><span class=\"n\">string</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"cm\">/**</span>\n<span class=\"cm\">\t * 进行推导</span>\n<span class=\"cm\">\t * </span>\n<span class=\"cm\">\t * @throws SyntaxException 词法错误</span>\n<span class=\"cm\">\t */</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">infer</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"n\">SyntaxException</span> <span class=\"o\">{</span>\n\t\t<span class=\"cm\">/* 起始符号就是main函数 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"main\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"program -&amp;gt; stmt_list[0]{lost_stmt}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* Block语句 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"block\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"block -&amp;gt; @LBR#do_enter_scope# [stmt_list[0]] @RBR#do_leave_scope#{lost_rbr}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"block_stmt\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"block_stmt -&amp;gt; block[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 当前块（Block）全部由语句组成 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"stmt_list\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"stmt_list -&amp;gt; stmt[0]{lost_stmt} [stmt_list[1]]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 语句分为变量定义（赋值）、调用语句 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"copy\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"stmt_exp -&amp;gt; var[0] | call[0] | cycle_ctrl[0] | exp[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"copy\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"stmt -&amp;gt; stmt_stmt[0] | stmt_ctrl[0] | block_stmt[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"stmt_exp\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"stmt_stmt -&amp;gt; [stmt_exp[0]] @SEMI{lost_semi}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"copy\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"stmt_ctrl -&amp;gt; ret[0] | port[0] | if[0] | for[0] | foreach[0] | while[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 返回语句 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"return\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"ret -&amp;gt; (@YIELD[1] | @RETURN) [exp[0]] @SEMI{lost_semi}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 变量定义（赋值）语句（由于支持Lambda，函数定义皆为Lambda形式） */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"var\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"var -&amp;gt; (@VARIABLE[11] | @LET[12]) @ID[0]#declear_variable#{lost_token} @ASSIGN{lost_assign} (func[1]{lost_func} | exp[2]{lost_exp} | array[2]{lost_array} | map[2]{lost_map})\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 导入与导出语句 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"port\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"port -&amp;gt; (@IMPORT[1] | @EXPORT[2]) @LITERAL[0]{lost_string} @SEMI{lost_semi}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 表达式（算符文法） */</span>\n\t\t<span class=\"n\">ISemanticAnalyzer</span> <span class=\"n\">exp_handler</span> <span class=\"o\">=</span> <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"exp\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span> <span class=\"s\">\"exp -&amp;gt; exp0[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"exp0 -&amp;gt; exp1[0] [@QUERY[4] exp0[6] @COLON[5]{lost_colon} exp0[7]]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span> <span class=\"s\">\"exp1 -&amp;gt; [exp1[1] (@AND_OP[2] | @OR_OP[2])] exp2[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"exp2 -&amp;gt; [exp2[1] (@OR[2] | @XOR[2] | @AND[2])] exp3[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span> <span class=\"s\">\"exp3 -&amp;gt; [exp3[1] (@EQ_OP[2] | @NE_OP[2])] exp4[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"exp4 -&amp;gt; [exp4[1] (@LT[2] | @GT[2] | @LE_OP[2] | @GE_OP[2])] exp5[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"exp5 -&amp;gt; [exp5[1] (@LEFT_OP[2] | @RIGHT_OP[2])] exp6[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span> <span class=\"s\">\"exp6 -&amp;gt; [exp6[1] (@ADD[2] | @SUB[2])] exp7[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"exp7 -&amp;gt; [exp7[1] (@MUL[2] | @DIV[2] | @MOD[2])] exp8[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span> <span class=\"s\">\"exp8 -&amp;gt; (@NOT_OP[3] | @NOT[3]) exp8[1] | exp9[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">exp_handler</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"exp9 -&amp;gt; (@INC_OP[3] | @DEC_OP[3]) exp9[1] | exp9[1] (@INC_OP[3] | @DEC_OP[3]) | type[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 调用语句 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"call_exp\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"call -&amp;gt; @CALL (@LPA{lost_lpa} func[0]{lost_call} @RPA{lost_rpa} | @ID[1]{lost_call}) @LPA{lost_lpa} [exp_list[2]] @RPA{lost_rpa}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 函数定义 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"token_list\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"var_list -&amp;gt; @ID[0]#declear_param# [@COMMA var_list[1]]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"exp_list\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"exp_list -&amp;gt; exp[0] [@COMMA exp_list[1]]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"token_list\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"doc_list -&amp;gt; @LITERAL[0] [@COMMA exp_list[1]]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"func\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"func -&amp;gt; (@FUNCTION[10]#func_clearargs# | @YIELD#func_clearargs#) [@LSQ doc_list[0]{lost_doc} @RSQ] (@ID[1]#predeclear_funcname#{lost_func_name} | @NOT[1]#predeclear_funcname#{lost_func_name}) @LPA{lost_lpa} [var_list[2]] @RPA{lost_rpa} (@PTR_OP{lost_func_body} exp[3]{lost_exp} | block[4]{lost_func_body})\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 基本数据类型 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"type\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"type -&amp;gt; @ID[0] | @INTEGER[0] | @DECIMAL[0] | @LITERAL[0] | @CHARACTER[0] | @BOOLEAN[0] | @LPA exp[1]{lost_exp} @RPA{lost_rpa} | call[1]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 条件语句 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"if\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"if -&amp;gt; @IF @LPA{lost_lpa} exp[0]{lost_exp} @RPA{lost_rpa} block[1]{lost_block} [@ELSE (block[2]{lost_block} | if[3]{lost_block})]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 循环语句 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"for\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"for -&amp;gt; @FOR#do_enter_cycle# @LPA{lost_lpa} [var[0]] @SEMI{lost_semi} [exp[1]] @SEMI{lost_semi} [exp[2] | var[2]] @RPA{lost_rpa} block[3]{lost_block}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"while\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"while -&amp;gt; @WHILE#do_enter_cycle# @LPA{lost_lpa} exp[0] @RPA{lost_rpa} block[1]{lost_block}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 循环语句 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"foreach\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"foreach -&amp;gt; @FOREACH#do_enter_cycle# @LPA{lost_lpa} @VARIABLE{lost_var} @ID[0]#declear_variable#{lost_token} @COLON{lost_colon} exp[1]{lost_exp} @RPA{lost_rpa} block[2]{lost_block}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 循环控制语句 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"cycle\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"cycle_ctrl -&amp;gt; @BREAK[0] | @CONTINUE[0]\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 数组初始化 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"array\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"array -&amp;gt; @LSQ @RSQ{lost_rsq}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"cm\">/* 字典初始化 */</span>\n\t\t<span class=\"n\">infer</span><span class=\"o\">(</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getSemanticHandler</span><span class=\"o\">(</span><span class=\"s\">\"map\"</span><span class=\"o\">),</span>\n\t\t\t\t<span class=\"s\">\"map -&amp;gt; @LBR @RBR{lost_rbr}\"</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">initialize</span><span class=\"o\">(</span><span class=\"s\">\"program\"</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"cm\">/**</span>\n<span class=\"cm\">\t * 声明错误处理器</span>\n<span class=\"cm\">\t * </span>\n<span class=\"cm\">\t * @throws SyntaxException 词法错误</span>\n<span class=\"cm\">\t */</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">declareErrorHandler</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"n\">SyntaxException</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_exp\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"表达式\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_func\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"函数\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_token\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"标识符\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_func_name\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"函数名\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_func_body\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"函数体\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_block\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"块\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_stmt\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"语句\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_string\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"字符串\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_assign\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"等号'='\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_call\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"调用主体\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_lpa\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"左圆括号'('\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_rpa\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"右圆括号')'\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_lsq\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"左方括号'['\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_rsq\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"右方括号']'\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_lbr\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"左花括号'{'\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_rbr\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"右花括号'}'\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_colon\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"冒号':'\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_semi\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"分号';'\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_doc\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"文档\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_var\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"赋值\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_array\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"数组'[]'\"</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">addErrorHandler</span><span class=\"o\">(</span><span class=\"s\">\"lost_map\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">LostHandler</span><span class=\"o\">(</span><span class=\"s\">\"字典'{}'\"</span><span class=\"o\">));</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"cm\">/**</span>\n<span class=\"cm\">\t * 声明动作处理器</span>\n<span class=\"cm\">\t * </span>\n<span class=\"cm\">\t * @throws SyntaxException 词法错误</span>\n<span class=\"cm\">\t */</span>\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">declareActionHandler</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"n\">SyntaxException</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">actionNames</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"o\">{</span> <span class=\"s\">\"do_enter_scope\"</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"do_leave_scope\"</span><span class=\"o\">,</span> <span class=\"s\">\"predeclear_funcname\"</span><span class=\"o\">,</span> <span class=\"s\">\"declear_variable\"</span><span class=\"o\">,</span>\n\t\t\t\t<span class=\"s\">\"declear_param\"</span><span class=\"o\">,</span> <span class=\"s\">\"func_clearargs\"</span><span class=\"o\">,</span> <span class=\"s\">\"do_enter_cycle\"</span> <span class=\"o\">};</span>\n\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">string</span> <span class=\"o\">:</span> <span class=\"n\">actionNames</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">addActionHandler</span><span class=\"o\">(</span><span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"na\">getActionHandler</span><span class=\"o\">(</span><span class=\"n\">string</span><span class=\"o\">));</span>\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n</code></pre></div><p><i><u>指令：</u></i></p><div class=\"highlight\"><pre><code class=\"language-java\"><span></span><span class=\"kd\">public</span> <span class=\"kd\">enum</span> <span class=\"n\">RuntimeInst</span> <span class=\"o\">{</span>\n    <span class=\"n\">ihalt</span><span class=\"o\">,</span>            <span class=\"c1\">// 停止</span>\n    <span class=\"n\">inop</span><span class=\"o\">,</span>             <span class=\"c1\">// 空指令</span>\n    <span class=\"n\">ipush</span><span class=\"o\">,</span>            <span class=\"c1\">// [op1]进栈</span>\n    <span class=\"n\">ipop</span><span class=\"o\">,</span>             <span class=\"c1\">// 出栈</span>\n    <span class=\"n\">iopena</span><span class=\"o\">,</span>           <span class=\"c1\">// 过程参数准备进栈</span>\n    <span class=\"n\">ipushx</span><span class=\"o\">,</span>           <span class=\"c1\">// 空进栈</span>\n    <span class=\"n\">ipushz</span><span class=\"o\">,</span>           <span class=\"c1\">// 参数零进栈</span>\n    <span class=\"n\">ipusha</span><span class=\"o\">,</span>           <span class=\"c1\">// 数据栈[top]进调用栈</span>\n    <span class=\"n\">ipushn</span><span class=\"o\">,</span>           <span class=\"c1\">// 非数进栈</span>\n    <span class=\"n\">iloada</span><span class=\"o\">,</span>           <span class=\"c1\">// 调用栈进数据栈[top]</span>\n    <span class=\"n\">icall</span><span class=\"o\">,</span>            <span class=\"c1\">// 过程调用</span>\n    <span class=\"n\">icallx</span><span class=\"o\">,</span>           <span class=\"c1\">// 外部过程调用，数据段</span>\n    <span class=\"n\">ically</span><span class=\"o\">,</span>           <span class=\"c1\">// 外部过程调用，参数栈</span>\n    <span class=\"n\">iret</span><span class=\"o\">,</span>             <span class=\"c1\">// 过程返回</span>\n\n    <span class=\"n\">iyldl</span><span class=\"o\">,</span>            <span class=\"c1\">// 协程返回</span>\n    <span class=\"n\">iyldr</span><span class=\"o\">,</span>            <span class=\"c1\">// 协程进入</span>\n    <span class=\"n\">iyldx</span><span class=\"o\">,</span>            <span class=\"c1\">// 协程销毁</span>\n    <span class=\"n\">iyldy</span><span class=\"o\">,</span>            <span class=\"c1\">// 协程创建</span>\n    <span class=\"n\">iyldi</span><span class=\"o\">,</span>            <span class=\"c1\">// 协程队列数据入队，从栈</span>\n    <span class=\"n\">iyldo</span><span class=\"o\">,</span>            <span class=\"c1\">// 协程队列数据出队，从栈</span>\n\n    <span class=\"n\">iscpi</span><span class=\"o\">,</span>            <span class=\"c1\">// 进入命名空间</span>\n    <span class=\"n\">iscpo</span><span class=\"o\">,</span>            <span class=\"c1\">// 离开命名空间</span>\n\n    <span class=\"n\">iload</span><span class=\"o\">,</span>            <span class=\"c1\">// 数值载入</span>\n    <span class=\"n\">iloadv</span><span class=\"o\">,</span>           <span class=\"c1\">// 变量载入</span>\n    <span class=\"n\">iloadx</span><span class=\"o\">,</span>           <span class=\"c1\">// 外部变量载入</span>\n    <span class=\"n\">ildfun</span><span class=\"o\">,</span>           <span class=\"c1\">// 函数地址载入</span>\n    <span class=\"n\">istore</span><span class=\"o\">,</span>           <span class=\"c1\">// 栈顶[top]数据存入[top-1]索引指向的位置（引用）</span>\n    <span class=\"n\">ialloc</span><span class=\"o\">,</span>           <span class=\"c1\">// 栈顶[top]数据存入[top-1]索引指向的位置（新建）</span>\n\n    <span class=\"n\">iimp</span><span class=\"o\">,</span>             <span class=\"c1\">// 导入[top]</span>\n\n    <span class=\"n\">ijmp</span><span class=\"o\">,</span>             <span class=\"c1\">// 跳转</span>\n    <span class=\"n\">ijz</span><span class=\"o\">,</span>              <span class=\"c1\">// 为零，[top]=0跳转到绝对地址op1</span>\n    <span class=\"n\">ijnz</span><span class=\"o\">,</span>             <span class=\"c1\">// 非零，[top]&amp;lt;&amp;gt;0跳转到绝对地址op1</span>\n    <span class=\"n\">ijt</span><span class=\"o\">,</span>              <span class=\"c1\">// [top]为真跳转到绝对地址op1，弹出数据</span>\n    <span class=\"n\">ijf</span><span class=\"o\">,</span>              <span class=\"c1\">// [top]为假跳转到绝对地址op1，弹出数据</span>\n    <span class=\"n\">ijtx</span><span class=\"o\">,</span>             <span class=\"c1\">// [top]为真跳转到绝对地址op1，不弹出数据</span>\n    <span class=\"n\">ijfx</span><span class=\"o\">,</span>             <span class=\"c1\">// [top]为假跳转到绝对地址op1，不弹出数据</span>\n    <span class=\"n\">ijnan</span><span class=\"o\">,</span>            <span class=\"c1\">// 结果为非数（用户迭代中止）</span>\n    <span class=\"n\">ijyld</span><span class=\"o\">,</span>            <span class=\"c1\">// 已创建协程则跳转</span>\n\n    <span class=\"n\">iinc</span><span class=\"o\">,</span>             <span class=\"c1\">// 自增，[top]++</span>\n    <span class=\"n\">idec</span><span class=\"o\">,</span>             <span class=\"c1\">// 自减，[top]--</span>\n    <span class=\"n\">inot</span><span class=\"o\">,</span>             <span class=\"c1\">// 逻辑非，![top]</span>\n    <span class=\"n\">iinv</span><span class=\"o\">,</span>             <span class=\"c1\">// 算术非，~[top]</span>\n\n    <span class=\"n\">iadd</span><span class=\"o\">,</span>             <span class=\"c1\">// 加，[top]+[top-1]</span>\n    <span class=\"n\">isub</span><span class=\"o\">,</span>             <span class=\"c1\">// 减，[top]-[top-1]</span>\n    <span class=\"n\">imul</span><span class=\"o\">,</span>             <span class=\"c1\">// 乘，[top]*[top-1]</span>\n    <span class=\"n\">idiv</span><span class=\"o\">,</span>             <span class=\"c1\">// 除，[top]/[top-1]</span>\n    <span class=\"n\">imod</span><span class=\"o\">,</span>             <span class=\"c1\">// 余，[top]%[top-1]</span>\n    <span class=\"n\">iand</span><span class=\"o\">,</span>             <span class=\"c1\">// 算术或逻辑与，[top]&amp;amp;[top-1]</span>\n    <span class=\"n\">iandl</span><span class=\"o\">,</span>            <span class=\"c1\">// 逻辑或逻辑与，[top]&amp;amp;&amp;amp;[top-1]</span>\n    <span class=\"n\">ior</span><span class=\"o\">,</span>              <span class=\"c1\">// 算术或逻辑或，[top]|[top-1]</span>\n    <span class=\"n\">iorl</span><span class=\"o\">,</span>             <span class=\"c1\">// 逻辑或逻辑或，[top]||[top-1]</span>\n    <span class=\"n\">ixor</span><span class=\"o\">,</span>             <span class=\"c1\">// 异或，[top]^[top-1]</span>\n    <span class=\"n\">ishl</span><span class=\"o\">,</span>             <span class=\"c1\">// 左移，[top]&amp;lt;&amp;lt;[top-1]</span>\n    <span class=\"n\">ishr</span><span class=\"o\">,</span>             <span class=\"c1\">// 右移，[top]&amp;gt;&amp;gt;[top-1]</span>\n\n    <span class=\"n\">icl</span><span class=\"o\">,</span>              <span class=\"c1\">// 小于，[top]&amp;lt;[top-1]</span>\n    <span class=\"n\">icg</span><span class=\"o\">,</span>              <span class=\"c1\">// 大于，[top]&amp;gt;[top-1]</span>\n    <span class=\"n\">icle</span><span class=\"o\">,</span>             <span class=\"c1\">// 小于等于，[top]&amp;lt;=[top-1]</span>\n    <span class=\"n\">icge</span><span class=\"o\">,</span>             <span class=\"c1\">// 大于等于，[top]&amp;gt;=[top-1]</span>\n    <span class=\"n\">ice</span><span class=\"o\">,</span>              <span class=\"c1\">// 等于，[top]=[top-1]</span>\n    <span class=\"n\">icne</span><span class=\"o\">,</span>             <span class=\"c1\">// 不等于，[top]!=[top-1]</span>\n\n    <span class=\"n\">iarr</span><span class=\"o\">,</span>             <span class=\"c1\">// 生成数组于[top]</span>\n    <span class=\"n\">imap</span>              <span class=\"c1\">// 生成字典于[top]</span>\n<span class=\"o\">}</span>\n</code></pre></div><h2>相关技术一瞥</h2><p>解释器中我实现了部分特性：</p><ol><li>基于栈</li><li>可调用外部方法</li><li>代码页导入</li><li>指令的序列化</li><li><b>匿名函数</b></li><li><b>闭包</b></li><li><b>管道</b></li><li><b>协程</b></li><li><b>多进程切换</b></li><li>同步/异步加载代码</li><li><b>Shell</b></li></ol><p>其中加粗的特性是非常具有实践意义的，最终我把它们全都实现了。例子在<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang/blob/master/README.md\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/jMiniLang<i class=\"icon-external\"></i></a>中。</p><p>基于jMiniLang的有趣的实现：</p><ol><li><a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang/blob/master/src/priv/bajdcc/LALR1/interpret/test/TestInterpret7.java\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bajdcc/jMini</span><span class=\"invisible\">Lang/blob/master/src/priv/bajdcc/LALR1/interpret/test/TestInterpret7.java</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>  | Y Combinator 与 Trampoline。Y Combinator的推导<a href=\"http://link.zhihu.com/?target=http%3A//www.cnblogs.com/bajdcc/p/5757410.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Y Combinator - bajdcc - 博客园<i class=\"icon-external\"></i></a>；Trampoline的出处<a href=\"http://link.zhihu.com/?target=https%3A//github.com/timoxley/functional-javascript-workshop\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">timoxley/functional-javascript-workshop<i class=\"icon-external\"></i></a>。<br></li><li><a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang/blob/master/src/priv/bajdcc/LALR1/interpret/test/TestInterpret9.java\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bajdcc/jMini</span><span class=\"invisible\">Lang/blob/master/src/priv/bajdcc/LALR1/interpret/test/TestInterpret9.java</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> | 生产者消费者模式<br></li><li><a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang/blob/master/src/priv/bajdcc/LALR1/interpret/test/TestInterpret10.java\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bajdcc/jMini</span><span class=\"invisible\">Lang/blob/master/src/priv/bajdcc/LALR1/interpret/test/TestInterpret10.java</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> | 网络仿真<br></li></ol><br><p>后面我会介绍这些有趣的内容。</p><h2>感悟</h2><p>单打独斗做一个硕大的项目不容易，尤其里面充满了各种算法，两年时间（没轮子哥的代码就不止2年了），3W行代码，还写了些注释，听着就恐怖。解释器部分算它1.5W行，只是实现了个Shell。。真是一把辛酸泪……</p><p>这个项目终结了编译原理这门课，看看，把三大文法给干掉了，有完美的输出，唯一的缺陷就是它是java1.8的，也没有做一些编译优化，只是个简单的前后端。</p><p>我想我是再没有精力重新造个五脏俱全的interpret轮子了，人生难得几回认真。</p><h2>截图</h2><img src=\"http://pic1.zhimg.com/v2-686554c89ed02034c25bdb06c70ac0d4_b.png\" data-rawwidth=\"1362\" data-rawheight=\"667\" class=\"origin_image zh-lightbox-thumb\" width=\"1362\" data-original=\"http://pic1.zhimg.com/v2-686554c89ed02034c25bdb06c70ac0d4_r.png\"><img src=\"http://pic3.zhimg.com/v2-e5e0b498f7c811ac6b33abc972035652_b.png\" data-rawwidth=\"1362\" data-rawheight=\"667\" class=\"origin_image zh-lightbox-thumb\" width=\"1362\" data-original=\"http://pic3.zhimg.com/v2-e5e0b498f7c811ac6b33abc972035652_r.png\"><img src=\"http://pic1.zhimg.com/v2-d8c61c5b1fc27a5a19bbbf98a26e791c_b.png\" data-rawwidth=\"1362\" data-rawheight=\"667\" class=\"origin_image zh-lightbox-thumb\" width=\"1362\" data-original=\"http://pic1.zhimg.com/v2-d8c61c5b1fc27a5a19bbbf98a26e791c_r.png\">","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":26356924,"publishedTime":"2017-04-14T11:20:54+08:00","url":"/p/26356924","title":"【jMiniLang】开篇","summary":"<b>04/16 更新</b> 采用之前<a href=\"https://zhuanlan.zhihu.com/p/26054925\" data-editable=\"true\" data-title=\"【构建操作系统】进程间通信 - 知乎专栏\">【构建操作系统】进程间通信 - 知乎专栏</a>中的思想，在<i>jMiniOS</i>中进行了实现。现在这个jMiniOS已经有血有肉了，是一个高仿的操作系统，虽然瑕疵是运行的时候把CPU全占满了（因为没有sleep啊）。支持了打印运行进程，jMiniOS的进程分内核级…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0},"next":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic1.zhimg.com/v2-8dd8a69b4fe4b34f81200ab83a6aeb44_r.png","links":{"comments":"/api/posts/26553299/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19552832","id":"19552832","name":"Python"},{"url":"https://www.zhihu.com/topic/19557710","id":"19557710","name":"Git"},{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"}],"adminClosedComment":false,"href":"/api/posts/26553299","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<h2>写在前面</h2><p>最近又看到了Trac，想起之前用到它一次，决定再温习一遍，使用效果不错。主要看中Trac的源码管理功能，当然了，它还有许多其他的插件可以用，如可以管理svn、写wiki等。</p><p>综上网上各种教程，最终归纳成本文。</p><h2>搭建顺序</h2><ol><li>安装python 2.7及相关库</li><li>设置Trac</li></ol><h2>安装</h2><p>下载py2.7，然后pip安装以下库，默认是最新版本：</p><ol><li><b>babel </b>用于切换中文语言</li><li><b>genshi </b>网页模版引擎</li><li><b>trac</b> 我们的主角</li></ol><p>pysqlite用内建的，不需要安装。</p><br><h2>设置</h2><p><b><u>一、初始化Trac环境</u></b></p><p>在d:\\trac\\下创建环境：</p><p><b>trac-admin d:\\trac initenv</b></p><p>期间输入项目名称。</p><p><u><b>二、创建管理员账号</b></u></p><p>用脚本创建名为admin密码123456的账号，保存在passwd.digest中：</p><p><b>python.exe trac-digest.py -u admin -p 123456 &amp;gt;&amp;gt; d:\\trac\\passwd.digest</b><br></p><p>trac-digest.py内容如下（<a href=\"http://link.zhihu.com/?target=http%3A//rain.snowrain.org/archives/73\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">rain.snowrain.org/archi</span><span class=\"invisible\">ves/73</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>）：</p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"kn\">from</span> <span class=\"nn\">optparse</span> <span class=\"kn\">import</span> <span class=\"n\">OptionParser</span>\n<span class=\"kn\">import</span> <span class=\"nn\">md5</span>\n \n<span class=\"c1\"># build the options</span>\n<span class=\"n\">usage</span> <span class=\"o\">=</span> <span class=\"s2\">\"usage: %prog [options]\"</span>\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">OptionParser</span><span class=\"p\">(</span><span class=\"n\">usage</span><span class=\"o\">=</span><span class=\"n\">usage</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_option</span><span class=\"p\">(</span><span class=\"s2\">\"-u\"</span><span class=\"p\">,</span> <span class=\"s2\">\"--username\"</span><span class=\"p\">,</span><span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">\"store\"</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"s2\">\"username\"</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n                  <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"the username for whom to generate a password\"</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_option</span><span class=\"p\">(</span><span class=\"s2\">\"-p\"</span><span class=\"p\">,</span> <span class=\"s2\">\"--password\"</span><span class=\"p\">,</span><span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">\"store\"</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"s2\">\"password\"</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n                  <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"the password to use\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n \n<span class=\"c1\"># check options</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">password</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">):</span>\n   <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"You must supply both the username and password\"</span><span class=\"p\">)</span>\n \n<span class=\"c1\"># Generate the string to enter into the htdigest file</span>\n<span class=\"n\">realm</span> <span class=\"o\">=</span> <span class=\"s1\">'njg'</span>\n<span class=\"n\">kd</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">md5</span><span class=\"o\">.</span><span class=\"n\">md5</span><span class=\"p\">(</span><span class=\"s1\">':'</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">()</span>\n<span class=\"k\">print</span> <span class=\"s1\">':'</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">((</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">realm</span><span class=\"p\">,</span> <span class=\"n\">kd</span><span class=\"p\">([</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">realm</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">password</span><span class=\"p\">])))</span>\n</code></pre></div><p>将admin设成管理员账号：<b>trac-admin d:/trac permission add admin TRAC_ADMIN</b><br></p><p><b><u>三、设置配置文件</u></b></p><p>修改conf/trac.ini</p><p>添加下列内容，启用git。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>[trac]\n...\ngit_bin = C:/Program Files/Git/bin/git.exe\n...\n[components]\ntracopt.versioncontrol.git.* = enabled\n</code></pre></div><p><b><u>四、启动服务器</u></b></p><p>于8080端口监听：<b>tracd -p 8080 . --auth=*,passwd.digest,njg</b><br></p><br><h2>参考</h2><ol><li><a href=\"http://link.zhihu.com/?target=http%3A//blog.csdn.net/linuxdriverdeveloper/article/details/7631456\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Windows搭建Trac - linuxdriverdeveloper的专栏 - 博客频道 - CSDN.NET<i class=\"icon-external\"></i></a><br></li><li><a href=\"http://link.zhihu.com/?target=http%3A//rain.snowrain.org/archives/73\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">rain.snowrain.org/archi</span><span class=\"invisible\">ves/73</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></li></ol>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":26553299,"publishedTime":"2017-04-25T09:59:28+08:00","url":"/p/26553299","title":"【Trac】浏览器中查看源码库","summary":"写在前面最近又看到了Trac，想起之前用到它一次，决定再温习一遍，使用效果不错。主要看中Trac的源码管理功能，当然了，它还有许多其他的插件可以用，如可以管理svn、写wiki等。综上网上各种教程，最终归纳成本文。搭建顺序安装python 2.7及相关库设置Trac…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0}},"commentsCount":7,"likesCount":40,"FULLINFO":true}},"User":{"bajdcc":{"isFollowed":false,"name":"陈安","headline":"专业研究野生技术 https://github.com/bajdcc","avatarUrl":"https://pic4.zhimg.com/v2-cd6d61ad9ef94c41b9e77f8e0f727893_s.jpg","isFollowing":false,"type":"people","slug":"bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","profileUrl":"https://www.zhihu.com/people/bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false,"badge":{"identity":null,"bestAnswerer":null}}},"Comment":{},"favlists":{}},"me":{},"global":{},"columns":{"learncpp":{"following":false,"canManage":false,"href":"/api/columns/learncpp","name":"从零开始构建标准库","creator":{"slug":"bajdcc"},"url":"/learncpp","slug":"learncpp","avatar":{"id":"v2-bf63794c542fc73b11e17014b7e0d01d","template":"https://pic2.zhimg.com/{id}_{size}.jpg"}}},"columnPosts":{},"postComments":{},"postReviewComments":{"comments":[],"newComments":[],"hasMore":true},"favlistsByUser":{},"favlistRelations":{},"promotions":{},"env":{"isAppView":false,"appViewConfig":{"content_padding_top":128,"content_padding_bottom":56,"content_padding_left":16,"content_padding_right":16,"title_font_size":22,"body_font_size":16,"is_dark_theme":false,"can_auto_load_image":true,"app_info":"OS=iOS"},"isApp":false},"sys":{}}</textarea>

    <script src="//static.zhihu.com/hemingway/common.c070f7d93ecd9d89ea5e.js"></script>
<script src="//static.zhihu.com/hemingway/app.5353832f5b5cd3213d84.js"></script>
<script src="//static.zhihu.com/hemingway/raven.f556922844d9edc7362e.js" async defer></script>
  </body>
</html>
