<!doctype html>
<html lang="zh-CN" class="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>【Parser系列】简易解释器 - 知乎专栏</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link rel="shortcut icon" href="https://static.zhihu.com/static/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="//static.zhihu.com/hemingway/app.4936d5747e0875f3d24e1bd1e11d9014.css" />
    <style></style>
    <script>document.documentElement.className += ('ontouchstart' in window) ? ' touch' : ' no-touch'</script>
  </head>
  <body>

    <div id="react-root"></div>
    <textarea id="clientConfig" hidden>{"debug":false,"apiRoot":"","paySDK":"https://pay.zhihu.com/api/js","wechatConfigAPI":"/api/wechat/jssdkconfig","name":"production","instance":"column","tokens":{"X-XSRF-TOKEN":"2|ed11e6f4|bef95e3299d5dfe0e877c6fe52c70cda|1495332256","X-UDID":null,"Authorization":"oauth c3cef7c66a1843f8b3a9e6a1e3160e20"}}</textarea>
    <textarea id="preloadedState" hidden>{"database":{"Post":{"26880947":{"title":"【Parser系列】简易解释器","author":"bajdcc","content":"<h2>写在前面</h2><p>最近找到了一个C语言解释器<a href=\"http://link.zhihu.com/?target=https%3A//github.com/lotabout/write-a-C-interpreter\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">lotabout/write-a-C-interpreter<i class=\"icon-external\"></i></a>，文章<a href=\"http://link.zhihu.com/?target=http%3A//lotabout.me/2015/write-a-C-interpreter-0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">手把手教你构建 C 语言编译器（0）- 前言<i class=\"icon-external\"></i></a>，解释器可自举，LL1分析，Lexer/Parser/CodeGen融为一体，感觉不错，拿来修改之。</p><p>由于CPaser程序已经完善了Lexer词法分析，所以可以省略，下面就是完善语法分析和指令生成，指令的话暂时用lotabout作者的，以后可以自己设计。</p><p>运行效果如题图所示，感觉非常不错，之后我会将自己写的MemoryPool融合进去，做一个malloc的内建函数。后面会添加分段和分页，希望可以用来模拟一下操作系统。</p><h2>语法分析</h2><p>作者的代码是三者融为一体，其实lexer不独立开来是个大问题，一方面类型判断、数字识别会有些问题，另一方面代码会很多很复杂。</p><p>Parser的整体架构不变，参照lotabout的：</p><ol><li>主体           void program();<br></li><li>表达式       void expression(operator_t level);<br></li><li>语句           void statement();<br></li><li>枚举           void enum_declaration();<br></li><li>函数参数    void function_parameter();<br></li><li>函数主体    void function_body();<br></li><li>函数声明    void function_declaration();<br></li><li>变量声明    void global_declaration();<br></li></ol><p>我将他的代码中的注释做了下补充，尽量用中文说明。</p><p>代码在：<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/CParser/blob/v0.2/CParser/Parser.cpp\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bajdcc/CPars</span><span class=\"invisible\">er/blob/v0.2/CParser/Parser.cpp</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><h2>优先级</h2><p>我参照<a href=\"http://link.zhihu.com/?target=http%3A//c.biancheng.net/cpp/html/462.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">C语言运算符的优先级和结合性一览表_C语言中文网<i class=\"icon-external\"></i></a>排了一下，值越小级别越高。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"kt\">int</span> <span class=\"n\">op_pred</span><span class=\"p\">[]</span> <span class=\"o\">=</span>\n<span class=\"p\">{</span>\n    <span class=\"mi\">9999</span><span class=\"p\">,</span> <span class=\"c1\">// op__start,</span>\n    <span class=\"mi\">1401</span><span class=\"p\">,</span> <span class=\"c1\">// op_assign,</span>\n     <span class=\"mi\">401</span><span class=\"p\">,</span> <span class=\"c1\">// op_plus,</span>\n     <span class=\"mi\">402</span><span class=\"p\">,</span> <span class=\"c1\">// op_minus,</span>\n     <span class=\"mi\">302</span><span class=\"p\">,</span> <span class=\"c1\">// op_times,</span>\n     <span class=\"mi\">301</span><span class=\"p\">,</span> <span class=\"c1\">// op_divide,</span>\n    <span class=\"mi\">9000</span><span class=\"p\">,</span> <span class=\"c1\">// op_escape,</span>\n    <span class=\"mi\">1301</span><span class=\"p\">,</span> <span class=\"c1\">// op_query,</span>\n     <span class=\"mi\">303</span><span class=\"p\">,</span> <span class=\"c1\">// op_mod,</span>\n     <span class=\"mi\">801</span><span class=\"p\">,</span> <span class=\"c1\">// op_bit_and,</span>\n    <span class=\"mi\">1001</span><span class=\"p\">,</span> <span class=\"c1\">// op_bit_or,</span>\n     <span class=\"mi\">208</span><span class=\"p\">,</span> <span class=\"c1\">// op_bit_not,</span>\n     <span class=\"mi\">901</span><span class=\"p\">,</span> <span class=\"c1\">// op_bit_xor,</span>\n     <span class=\"mi\">207</span><span class=\"p\">,</span> <span class=\"c1\">// op_logical_not,</span>\n     <span class=\"mi\">603</span><span class=\"p\">,</span> <span class=\"c1\">// op_less_than,</span>\n     <span class=\"mi\">601</span><span class=\"p\">,</span> <span class=\"c1\">// op_greater_than,</span>\n     <span class=\"mi\">102</span><span class=\"p\">,</span> <span class=\"c1\">// op_lparan,</span>\n     <span class=\"mi\">102</span><span class=\"p\">,</span> <span class=\"c1\">// op_rparan,</span>\n    <span class=\"mi\">9000</span><span class=\"p\">,</span> <span class=\"c1\">// op_lbrace,</span>\n    <span class=\"mi\">9000</span><span class=\"p\">,</span> <span class=\"c1\">// op_rbrace,</span>\n     <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"c1\">// op_lsquare,</span>\n     <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"c1\">// op_rsquare,</span>\n    <span class=\"mi\">1501</span><span class=\"p\">,</span> <span class=\"c1\">// op_comma,</span>\n     <span class=\"mi\">103</span><span class=\"p\">,</span> <span class=\"c1\">// op_dot,</span>\n    <span class=\"mi\">9000</span><span class=\"p\">,</span> <span class=\"c1\">// op_semi,</span>\n    <span class=\"mi\">1302</span><span class=\"p\">,</span> <span class=\"c1\">// op_colon,</span>\n     <span class=\"mi\">701</span><span class=\"p\">,</span> <span class=\"c1\">// op_equal,</span>\n     <span class=\"mi\">702</span><span class=\"p\">,</span> <span class=\"c1\">// op_not_equal,</span>\n     <span class=\"mi\">203</span><span class=\"p\">,</span> <span class=\"c1\">// op_plus_plus,</span>\n     <span class=\"mi\">204</span><span class=\"p\">,</span> <span class=\"c1\">// op_minus_minus,</span>\n    <span class=\"mi\">1405</span><span class=\"p\">,</span> <span class=\"c1\">// op_plus_assign,</span>\n    <span class=\"mi\">1406</span><span class=\"p\">,</span> <span class=\"c1\">// op_minus_assign,</span>\n    <span class=\"mi\">1403</span><span class=\"p\">,</span> <span class=\"c1\">// op_times_assign,</span>\n    <span class=\"mi\">1402</span><span class=\"p\">,</span> <span class=\"c1\">// op_div_assign,</span>\n    <span class=\"mi\">1409</span><span class=\"p\">,</span> <span class=\"c1\">// op_and_assign,</span>\n    <span class=\"mi\">1411</span><span class=\"p\">,</span> <span class=\"c1\">// op_or_assign,</span>\n    <span class=\"mi\">1410</span><span class=\"p\">,</span> <span class=\"c1\">// op_xor_assign,</span>\n    <span class=\"mi\">1404</span><span class=\"p\">,</span> <span class=\"c1\">// op_mod_assign,</span>\n     <span class=\"mi\">604</span><span class=\"p\">,</span> <span class=\"c1\">// op_less_than_or_equal,</span>\n     <span class=\"mi\">602</span><span class=\"p\">,</span> <span class=\"c1\">// op_greater_than_or_equal,</span>\n    <span class=\"mi\">1101</span><span class=\"p\">,</span> <span class=\"c1\">// op_logical_and,</span>\n    <span class=\"mi\">1201</span><span class=\"p\">,</span> <span class=\"c1\">// op_logical_or,</span>\n     <span class=\"mi\">104</span><span class=\"p\">,</span> <span class=\"c1\">// op_pointer,</span>\n     <span class=\"mi\">501</span><span class=\"p\">,</span> <span class=\"c1\">// op_left_shift,</span>\n     <span class=\"mi\">502</span><span class=\"p\">,</span> <span class=\"c1\">// op_right_shift,</span>\n    <span class=\"mi\">1407</span><span class=\"p\">,</span> <span class=\"c1\">// op_left_shift_assign,</span>\n    <span class=\"mi\">1408</span><span class=\"p\">,</span> <span class=\"c1\">// op_right_shift_assign,</span>\n    <span class=\"mi\">9000</span><span class=\"p\">,</span> <span class=\"c1\">// op_ellipsis,</span>\n    <span class=\"mi\">9999</span><span class=\"p\">,</span> <span class=\"c1\">// op__end</span>\n<span class=\"p\">};</span>\n</code></pre></div><h2>指令生成</h2><p>原作者的指令有：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"k\">enum</span> <span class=\"n\">ins_t</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">LEA</span><span class=\"p\">,</span> <span class=\"n\">IMM</span><span class=\"p\">,</span> <span class=\"n\">JMP</span><span class=\"p\">,</span> <span class=\"n\">CALL</span><span class=\"p\">,</span> <span class=\"n\">JZ</span><span class=\"p\">,</span> <span class=\"n\">JNZ</span><span class=\"p\">,</span> <span class=\"n\">ENT</span><span class=\"p\">,</span> <span class=\"n\">ADJ</span><span class=\"p\">,</span> <span class=\"n\">LEV</span><span class=\"p\">,</span> <span class=\"n\">LI</span><span class=\"p\">,</span> <span class=\"n\">LC</span><span class=\"p\">,</span> <span class=\"n\">SI</span><span class=\"p\">,</span> <span class=\"n\">SC</span><span class=\"p\">,</span> <span class=\"n\">PUSH</span><span class=\"p\">,</span>\n    <span class=\"n\">OR</span><span class=\"p\">,</span> <span class=\"n\">XOR</span><span class=\"p\">,</span> <span class=\"n\">AND</span><span class=\"p\">,</span> <span class=\"n\">EQ</span><span class=\"p\">,</span> <span class=\"n\">NE</span><span class=\"p\">,</span> <span class=\"n\">LT</span><span class=\"p\">,</span> <span class=\"n\">GT</span><span class=\"p\">,</span> <span class=\"n\">LE</span><span class=\"p\">,</span> <span class=\"n\">GE</span><span class=\"p\">,</span> <span class=\"n\">SHL</span><span class=\"p\">,</span> <span class=\"n\">SHR</span><span class=\"p\">,</span> <span class=\"n\">ADD</span><span class=\"p\">,</span> <span class=\"n\">SUB</span><span class=\"p\">,</span> <span class=\"n\">MUL</span><span class=\"p\">,</span> <span class=\"n\">DIV</span><span class=\"p\">,</span> <span class=\"n\">MOD</span><span class=\"p\">,</span>\n    <span class=\"n\">PRF</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>第二行指令他是用来排优先级的，我没用上。第三行指令是内建函数指令。</p><h2>虚拟机</h2><p>指令介绍在作者文章<a href=\"http://link.zhihu.com/?target=http%3A//lotabout.me/2015/write-a-C-interpreter-2/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">手把手教你构建 C 语言编译器（2）- 虚拟机<i class=\"icon-external\"></i></a>中。</p><p>我后面会搞个虚页，这样，程序里的指针就可以0-4G范围了，这样运行也安全。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"kt\">void</span> <span class=\"n\">CGen</span><span class=\"o\">::</span><span class=\"n\">eval</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// setup stack</span>\n    <span class=\"k\">auto</span> <span class=\"n\">poolsize</span> <span class=\"o\">=</span> <span class=\"mi\">512</span><span class=\"p\">;</span>\n    <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">);</span>\n    <span class=\"k\">auto</span> <span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)((</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">poolsize</span><span class=\"o\">*</span><span class=\"n\">LEX_SIZEOF</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">));</span>\n    <span class=\"o\">*--</span><span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">//--------------------------------------------------</span>\n\n    <span class=\"k\">auto</span> <span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"n\">symbols</span><span class=\"p\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s\">\"main\"</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">entry</span> <span class=\"o\">==</span> <span class=\"n\">symbols</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">())</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"main() not defined</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n        <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">auto</span> <span class=\"n\">pc</span> <span class=\"o\">=</span> <span class=\"n\">entry</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">second</span><span class=\"o\">-&amp;gt;</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">_int</span><span class=\"p\">;</span>\n    <span class=\"k\">auto</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">auto</span> <span class=\"n\">bp</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"k\">auto</span> <span class=\"n\">cycle</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">pc</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">cycle</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">auto</span> <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"p\">[</span><span class=\"n\">pc</span><span class=\"o\">++</span><span class=\"p\">];</span> <span class=\"c1\">// get next operation code</span>\n\n        <span class=\"c1\">// print debug info</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%03d&amp;gt; [%02d] %.4s\"</span><span class=\"p\">,</span> <span class=\"n\">cycle</span><span class=\"p\">,</span> <span class=\"n\">pc</span><span class=\"p\">,</span>\n                <span class=\"o\">&amp;amp;</span><span class=\"s\">\"LEA ,IMM ,JMP ,CALL,JZ  ,JNZ ,ENT ,ADJ ,LEV ,LI  ,LC  ,SI  ,SC  ,PUSH,\"</span>\n                <span class=\"s\">\"OR  ,XOR ,AND ,EQ  ,NE  ,LT  ,GT  ,LE  ,GE  ,SHL ,SHR ,ADD ,SUB ,MUL ,DIV ,MOD ,\"</span>\n                <span class=\"s\">\"OPEN,READ,CLOS,PRTF,MALC,MSET,MCMP,EXIT\"</span><span class=\"p\">[</span><span class=\"n\">op</span> <span class=\"o\">*</span> <span class=\"mi\">5</span><span class=\"p\">]);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">ADJ</span><span class=\"p\">)</span>\n                <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\" %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">[</span><span class=\"n\">pc</span><span class=\"p\">]);</span>\n            <span class=\"k\">else</span>\n                <span class=\"nf\">printf</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">IMM</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"p\">[</span><span class=\"n\">pc</span><span class=\"o\">++</span><span class=\"p\">];</span> <span class=\"p\">}</span>                                     <span class=\"c1\">// load immediate value to ax</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">LC</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">ax</span><span class=\"p\">;</span> <span class=\"p\">}</span>                                <span class=\"c1\">// load character to ax, address in ax</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">LI</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">ax</span><span class=\"p\">;</span> <span class=\"p\">}</span>                                 <span class=\"c1\">// load integer to ax, address in ax</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">SC</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">sp</span><span class=\"o\">++</span> <span class=\"o\">=</span> <span class=\"n\">ax</span><span class=\"p\">;</span> <span class=\"p\">}</span>                        <span class=\"c1\">// save character to address, value in ax, address on stack</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">SI</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">sp</span><span class=\"o\">++</span> <span class=\"o\">=</span> <span class=\"n\">ax</span><span class=\"p\">;</span> <span class=\"p\">}</span>                              <span class=\"c1\">// save integer to address, value in ax, address on stack</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">PUSH</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"o\">*--</span><span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">ax</span><span class=\"p\">;</span> <span class=\"p\">}</span>                                    <span class=\"c1\">// push the value of ax onto the stack</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">JMP</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">pc</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"p\">[</span><span class=\"n\">pc</span><span class=\"p\">];</span> <span class=\"p\">}</span>                                  <span class=\"c1\">// jump to the address</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">JZ</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">pc</span> <span class=\"o\">=</span> <span class=\"n\">ax</span> <span class=\"o\">?</span> <span class=\"n\">pc</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">text</span><span class=\"p\">[</span><span class=\"n\">pc</span><span class=\"p\">];</span> <span class=\"p\">}</span>                     <span class=\"c1\">// jump if ax is zero</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">JNZ</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">pc</span> <span class=\"o\">=</span> <span class=\"n\">ax</span> <span class=\"o\">?</span> <span class=\"n\">text</span><span class=\"p\">[</span><span class=\"n\">pc</span><span class=\"p\">]</span> <span class=\"o\">:</span> <span class=\"n\">pc</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">}</span>                    <span class=\"c1\">// jump if ax is zero</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">CALL</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"o\">*--</span><span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">pc</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">pc</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"p\">[</span><span class=\"n\">pc</span><span class=\"p\">];</span> <span class=\"p\">}</span>                 <span class=\"c1\">// call subroutine</span>\n                                                                                <span class=\"c1\">// else if (op == RET)  {pc = (int *)*sp++;}                              // return from subroutine;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">ENT</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"o\">*--</span><span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">bp</span><span class=\"p\">;</span> <span class=\"n\">bp</span> <span class=\"o\">=</span> <span class=\"n\">sp</span><span class=\"p\">;</span> <span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">sp</span> <span class=\"o\">-</span> <span class=\"n\">text</span><span class=\"p\">[</span><span class=\"n\">pc</span><span class=\"o\">++</span><span class=\"p\">];</span> <span class=\"p\">}</span> <span class=\"c1\">// make new stack frame</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">ADJ</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">sp</span> <span class=\"o\">+</span> <span class=\"n\">text</span><span class=\"p\">[</span><span class=\"n\">pc</span><span class=\"o\">++</span><span class=\"p\">];</span> <span class=\"p\">}</span>                           <span class=\"c1\">// add esp, &amp;lt;size&amp;gt;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">LEV</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">bp</span><span class=\"p\">;</span> <span class=\"n\">bp</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">sp</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"n\">pc</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">sp</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"p\">}</span>         <span class=\"c1\">// restore call frame and PC</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">LEA</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)(</span><span class=\"n\">bp</span> <span class=\"o\">+</span> <span class=\"n\">text</span><span class=\"p\">[</span><span class=\"n\">pc</span><span class=\"o\">++</span><span class=\"p\">]);</span> <span class=\"p\">}</span>                    <span class=\"c1\">// load address for arguments.</span>\n\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">PRF</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">sp</span> <span class=\"o\">+</span> <span class=\"n\">text</span><span class=\"p\">[</span><span class=\"n\">pc</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span> <span class=\"c1\">// 利用之后的ADJ清栈指令知道函数调用的参数个数</span>\n            <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">printf</span><span class=\"p\">((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">]);</span> <span class=\"p\">}</span> <span class=\"c1\">// load address for arguments.</span>\n\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">OR</span><span class=\"p\">)</span>  <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">sp</span><span class=\"o\">++</span> <span class=\"o\">|</span> <span class=\"n\">ax</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">XOR</span><span class=\"p\">)</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">sp</span><span class=\"o\">++</span> <span class=\"o\">^</span> <span class=\"n\">ax</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">AND</span><span class=\"p\">)</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">sp</span><span class=\"o\">++</span> <span class=\"o\">&amp;amp;</span> <span class=\"n\">ax</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">EQ</span><span class=\"p\">)</span>  <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">sp</span><span class=\"o\">++</span> <span class=\"o\">==</span> <span class=\"n\">ax</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">NE</span><span class=\"p\">)</span>  <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">sp</span><span class=\"o\">++</span> <span class=\"o\">!=</span> <span class=\"n\">ax</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">LT</span><span class=\"p\">)</span>  <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">sp</span><span class=\"o\">++</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">ax</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">LE</span><span class=\"p\">)</span>  <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">sp</span><span class=\"o\">++</span> <span class=\"o\">&amp;lt;=</span> <span class=\"n\">ax</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">GT</span><span class=\"p\">)</span>  <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">sp</span><span class=\"o\">++</span> <span class=\"o\">&amp;gt;</span>  <span class=\"n\">ax</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">GE</span><span class=\"p\">)</span>  <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">sp</span><span class=\"o\">++</span> <span class=\"o\">&amp;gt;=</span> <span class=\"n\">ax</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">SHL</span><span class=\"p\">)</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">sp</span><span class=\"o\">++</span> <span class=\"o\">&amp;lt;&amp;lt;</span> <span class=\"n\">ax</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">SHR</span><span class=\"p\">)</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">sp</span><span class=\"o\">++</span> <span class=\"o\">&amp;gt;&amp;gt;</span> <span class=\"n\">ax</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">ADD</span><span class=\"p\">)</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">sp</span><span class=\"o\">++</span> <span class=\"o\">+</span> <span class=\"n\">ax</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">SUB</span><span class=\"p\">)</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">sp</span><span class=\"o\">++</span> <span class=\"o\">-</span> <span class=\"n\">ax</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">MUL</span><span class=\"p\">)</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">sp</span><span class=\"o\">++</span> <span class=\"o\">*</span> <span class=\"n\">ax</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">DIV</span><span class=\"p\">)</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">sp</span><span class=\"o\">++</span> <span class=\"o\">/</span> <span class=\"n\">ax</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"n\">MOD</span><span class=\"p\">)</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">sp</span><span class=\"o\">++</span> <span class=\"o\">%</span> <span class=\"n\">ax</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"unknown instruction:%d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">);</span>\n            <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>后期的预想</h2><p>定几个小目标：</p><ol><li>完善指令</li><li>支持指针</li><li>支持更多语法</li><li>支持更多基本数据类型</li><li>内建统一用中断机制调用</li><li>特权级别的实现</li><li>分段和分页的实现</li><li>多进程的实现</li><li>构建虚拟操作系统</li></ol>","updated":"2017-05-13T03:14:15.000Z","canComment":false,"commentPermission":"anyone","commentCount":5,"collapsedCount":0,"likeCount":33,"state":"published","isLiked":false,"slug":"26880947","isTitleImageFullScreen":true,"rating":"none","titleImage":"https://pic1.zhimg.com/v2-855b2e604a19e44a9f0f52e2a0eca010_r.png","links":{"comments":"/api/posts/26880947/comments"},"reviewers":[],"topics":[{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"},{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"},{"url":"https://www.zhihu.com/topic/19572264","id":"19572264","name":"解释器"}],"adminClosedComment":false,"titleImageSize":{"width":1366,"height":728},"href":"/api/posts/26880947","excerptTitle":"","column":{"slug":"learncpp","name":"从零开始构建标准库"},"tipjarState":"inactivated","sourceUrl":"","pageCommentsCount":5,"snapshotUrl":"","publishedTime":"2017-05-13T11:14:15+08:00","url":"/p/26880947","lastestLikers":[{"profileUrl":"https://www.zhihu.com/people/yu-hong-bao","bio":"代码对我很熟悉……而我还喜欢着ACG……","hash":"7b288dc31c837d22ee5b1f6023755a34","uid":50168690900992,"isOrg":false,"description":"曾经是ACM弱渣，但出来之后，发现以前学的还是挺有用的……还得继续学……","isOrgWhiteList":false,"slug":"yu-hong-bao","avatar":{"id":"bac80bd0be2838561d0cd96227151de8","template":"https://pic1.zhimg.com/{id}_{size}.jpg"},"name":"MIsike"},{"profileUrl":"https://www.zhihu.com/people/xu-lin-4-58","bio":"逻辑差/没想法/来知乎锻炼","hash":"cf21dd5d06817dacf050f1d33c59620a","uid":58063977447424,"isOrg":false,"description":"现实/轻微悲观","isOrgWhiteList":false,"slug":"xu-lin-4-58","avatar":{"id":"4e95ba50aaedc68cf920cb30e77643da","template":"https://pic3.zhimg.com/{id}_{size}.jpg"},"name":"二人余二木"},{"profileUrl":"https://www.zhihu.com/people/programmer_chai","bio":"程序员","hash":"8444d9b594137031b9ac41916b788610","uid":831470159557464000,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"programmer_chai","avatar":{"id":"da8e974dc","template":"https://pic1.zhimg.com/{id}_{size}.jpg"},"name":"chai"},{"profileUrl":"https://www.zhihu.com/people/hlhlm","bio":"","hash":"c509556a8c62cf3fada989d95607fabc","uid":559625242738208800,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"hlhlm","avatar":{"id":"8ea555b578e699efbb43ea0901abd625","template":"https://pic2.zhimg.com/{id}_{size}.png"},"name":"很浪很浪漫"},{"profileUrl":"https://www.zhihu.com/people/xiong-chu-yuan-10","bio":"大概是个比较喜欢看书的好孩子~","hash":"d537af7bec192062a1162682ad0de352","uid":652262592857378800,"isOrg":false,"description":"NLP学习中, ACM已弃。\n（头像是女票，非本人，勿扰）","isOrgWhiteList":false,"slug":"xiong-chu-yuan-10","avatar":{"id":"v2-25eb33c7a3fcb934bb2f8bb185fbad5b","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"岐山凤鸣"}],"summary":"写在前面最近找到了一个C语言解释器<a href=\"https://github.com/lotabout/write-a-C-interpreter\" class=\"\" data-editable=\"true\" data-title=\"lotabout/write-a-C-interpreter\">lotabout/write-a-C-interpreter</a>，文章<a href=\"http://lotabout.me/2015/write-a-C-interpreter-0\" data-editable=\"true\" data-title=\"手把手教你构建 C 语言编译器（0）- 前言\" class=\"\">手把手教你构建 C 语言编译器（0）- 前言</a>，解释器可自举，LL1分析，Lexer/Parser/CodeGen融为一体，感觉不错，拿来修改之。由于CPaser程序已经完善了Lexer词法分析，所以可以省略，…","reviewingCommentsCount":0,"meta":{"previous":{"isTitleImageFullScreen":true,"rating":"none","titleImage":"https://pic1.zhimg.com/v2-5072f9061e3bd1c5d8457bdeff24064c_r.png","links":{"comments":"/api/posts/26804202/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"},{"url":"https://www.zhihu.com/topic/19632871","id":"19632871","name":"闭包"},{"url":"https://www.zhihu.com/topic/19561132","id":"19561132","name":"Java"}],"adminClosedComment":false,"href":"/api/posts/26804202","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<p>有关jMiniLang的说明：<a href=\"https://link.zhihu.com/?target=http%3A//files.cnblogs.com/files/bajdcc/jMiniLang-manual.pdf\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">files.cnblogs.com/files</span><span class=\"invisible\">/bajdcc/jMiniLang-manual.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p>================================</p>看了<a href=\"https://www.zhihu.com/question/53094776\" class=\"internal\">Haskell 这段代码该如何理解？</a>今天突发奇想，尝试一把函数式编程的感觉~<img src=\"https://pic4.zhimg.com/v2-3b2c7ba9dd8d494555bd2b260c07e87f_b.png\" data-rawwidth=\"796\" data-rawheight=\"598\" class=\"origin_image zh-lightbox-thumb\" width=\"796\" data-original=\"https://pic4.zhimg.com/v2-3b2c7ba9dd8d494555bd2b260c07e87f_r.png\"><p>最近把<a href=\"https://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/jMiniLang<i class=\"icon-external\"></i></a>继续修整了一下，修了点bug，界面开了抗锯齿，顿时美观度大增哈哈。</p><p>依照<a href=\"https://zhuanlan.zhihu.com/p/25476629\" class=\"internal\">【游戏框架系列】诗情画意 - 知乎专栏</a>的惯例，增加了<a href=\"https://link.zhihu.com/?target=http%3A//hitokoto.us/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">一言 - ヒトコト - Hitokoto.us<i class=\"icon-external\"></i></a>以测试Web的效果，当前的网络线程是在main thread中操作的，以后会放在worker thread中实现异步。</p><p>本文要完成几个任务：</p><ol><li>实现add，add接受一个数组作为参数，使命是将数组中所有元素相加</li><li>实现字符串翻转reverse，如将12345翻成54321</li><li>实现haskell中的&amp;lt;*&amp;gt; Applicative功能</li><li>实现回文数判断</li></ol><h2>预备知识：<u>Lambda</u></h2><p>其实lambda只是没有名字的函数（事实上我还是给它们命名了），更加关键的地方是<b>闭包</b>，如果没有闭包，那lambda只是一个没有卵用的语法糖罢了。</p><br><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">xs</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"p\">[</span><span class=\"s2\">\"数组遍历闭包\"</span><span class=\"p\">]</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_size</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">idx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">f</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">idx</span> <span class=\"o\">==</span> <span class=\"nx\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">g__</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">d</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_get</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"p\">,</span> <span class=\"nx\">idx</span><span class=\"p\">);</span>\n        <span class=\"nx\">idx</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">f2</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">()</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">d</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"nx\">f2</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n    <span class=\"k\">return</span> <span class=\"nx\">f</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>上面是一个例子，<b>f</b>以及<b>f2</b>是一个<b>lambda</b>，然而<u>在lambda中竟然出现了外层变量的引用</u>。没错，这就是难点所在。</p><p>看另一个：</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>var ff = func ~(f) {\n    var fh = func ~(h) {\n        return call h(h);\n    };\n    var fx = func ~(x) {\n        var fn = func ~(n) {\n            var vx = call x(x);\n            var vf = call f(vx);\n            return call vf(n);\n        };\n        return fn;\n    };\n    return call fh(fx);\n};\nvar fact = func ~(f) {\n    var fk = func ~(n) {\n        if (n &amp;gt; 0) {\n            return n * call f(n - 1);\n        } else {\n            return 1;\n        };\n    };\n    return fk;\n};\nvar ffact = call ff(fact);\nvar fact_5 = call ffact(5);\ncall g_printn(fact_5);\n</code></pre></div><p>上面这个例子就比较玄乎了，有关知识在此<a href=\"https://link.zhihu.com/?target=http%3A//www.cnblogs.com/bajdcc/p/5757410.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Y Combinator - bajdcc - 博客园<i class=\"icon-external\"></i></a>，用lambda实现了 个调用自身的功能。</p><p>不管那么多，这里需要实现这种闭包机制，思路也很简单，<b>就是给lambda加一层<u>环境</u>，把绑定的变量塞进这环境中，那么调用执行的时候，<u>首先从lambda绑定的环境中查找变量</u>，找不到的话再找外层变量</b>。经过实践，这个方法管用。</p><h2>基本函数</h2><a href=\"https://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang/blob/master/src/priv/bajdcc/LALR1/interpret/module/ModuleFunction.java\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bajdcc/jMini</span><span class=\"invisible\">Lang/blob/master/src/priv/bajdcc/LALR1/interpret/module/ModuleFunction.java</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">max</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">&amp;gt;</span> <span class=\"nx\">b</span> <span class=\"o\">?</span> <span class=\"nx\">a</span> <span class=\"o\">:</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">min</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">&amp;lt;</span> <span class=\"nx\">b</span> <span class=\"o\">?</span> <span class=\"nx\">a</span> <span class=\"o\">:</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">lt</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">&amp;lt;</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">lte</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">&amp;lt;=</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">gt</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">&amp;gt;</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">gte</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">&amp;gt;=</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">eq</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">==</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">neq</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">!=</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">add</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">sub</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">-</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">mul</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">*</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">div</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span> <span class=\"o\">/</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n</code></pre></div><p>上面定义了一些函数，全是二元的，比较简单和常用。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">curry</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">f</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">call</span> <span class=\"nx\">a</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">f</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n<span class=\"kd\">var</span> <span class=\"nx\">swap</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">f</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">call</span> <span class=\"nx\">a</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">f</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>上面定义了curry和swap。curry就是先绑定函数的第一参数，调用时只需要提供第二个参数即可。swap的参数是一个二元函数，它的用处就是将两个参数互换。</p><h2>初步尝试</h2><p>先解决第一个问题：实现add函数。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">add</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"nx\">foreach</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">:</span> <span class=\"nx\">call</span> <span class=\"nx\">g_range_array</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"nx\">sum</span> <span class=\"o\">+=</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">sum</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>先除去数组为空的例外情况，上面add的实现代码是循环结构，没有什么好斟酌的了。然而它并没有函数式编程那样的逼格，我们希望的style是：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"nx\">func</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">call</span> <span class=\"nx\">g_array_empty</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">head</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_head</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">);</span> <span class=\"c1\">// 得到数组第一个元素</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">tail</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_tail</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">);</span> <span class=\"c1\">// 得到去除第一个元素后的数组</span>\n    <span class=\"k\">return</span> <span class=\"nx\">head</span> <span class=\"o\">+</span> <span class=\"nx\">call</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">tail</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>有了递归才有意思嘛！得到head和tail的代码就可以略去了，细心的人可能发现：得到tail数组是重建一个新数组呢还是直接在原有数组上修改？如果是原有基础上修改，那么就破坏了数组的只读性，导致麻烦；如果是new一个新数组，那么就要给GC添加更新难题了。</p><p>所以，妥协之下，只能new新数组了吗？注意到数组的只读性，其实只要获取<u>索引</u>就可以了！假如数组是1,2,3,4,5...那么现在给list包装一下，得到f=decorate(list)，要求f()的结果是1,2,3,4,5....，到末尾给个null，这能实现吗？</p><p>以往的思想，调用一个<b>纯函数</b>，无论多少次、什么情况下，函数的结果是一成不变的。可是现在我却要求它每次调用的结果不一样！那么它就不再是纯函数了，它必定<u>有所依赖</u>。这个依赖我可以显现给出，也可以<u>懒得去做</u>。那么后者就是闭包。</p><h2>再次尝试</h2><p>下面实现的关键：</p><blockquote>xs函数的使命是将作为数组的参数l进行包装，返回一个<b>闭包</b>closure，如果数组l没有访问到结尾，那么调用closure()就会返回一个lambda（调用 lambda()后得到数据），如果访问到结尾，返回null。</blockquote><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">xs</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"p\">[</span><span class=\"s2\">\"数组遍历闭包\"</span><span class=\"p\">]</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_size</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">idx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">f</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">idx</span> <span class=\"o\">==</span> <span class=\"nx\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">g__</span><span class=\"p\">;</span> <span class=\"c1\">// =null }</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">d</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_get</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"p\">,</span> <span class=\"nx\">idx</span><span class=\"p\">);</span>\n        <span class=\"nx\">idx</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"c1\">// 索引自增</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">f2</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">()</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">d</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"nx\">f2</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n    <span class=\"k\">return</span> <span class=\"nx\">f</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>xs这个闭包返回了一个可调用函数f，而f依赖的len和idx处于xs内部，<b>外界不可能访问到</b>，因此是安全的。</p><p>那如何使用这个闭包呢？</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">g_func_1</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span><span class=\"p\">;</span> <span class=\"c1\">// 返回自身</span>\n<span class=\"kd\">var</span> <span class=\"nx\">g_func_apply</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">call</span> <span class=\"nx\">g_func_apply_arg</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_1\"</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_apply\"</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">g_func_apply_arg</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">arg</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 带参数版本</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_size</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">);</span> <span class=\"c1\">// 计算大小</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">len</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">g__</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"c1\">// 返回空</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">len</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_get</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"p\">}</span> <span class=\"c1\">// 返回第一个</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">xs</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">val</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">x</span><span class=\"p\">();</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">val</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">val</span><span class=\"p\">();</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">arg</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">);</span> <span class=\"c1\">// 装饰原有函数，如调换两参数位置啊</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;;)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">v2</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">x</span><span class=\"p\">();</span> <span class=\"c1\">// 取数组下一个数</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">call</span> <span class=\"nx\">g_is_null</span><span class=\"p\">(</span><span class=\"nx\">v2</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"k\">break</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"c1\">// 遇到结尾</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">v2</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">v2</span><span class=\"p\">();</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">val</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">n</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">,</span> <span class=\"nx\">v2</span><span class=\"p\">);</span> <span class=\"c1\">// 累计处理</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_apply_arg\"</span><span class=\"p\">;</span>\n</code></pre></div><p>x就是作为一个闭包，每次调用x()，返回一个lambda，执行后得到值。将值进行累加计算：call n(val, v2)，其中n就是要调用的二元基本函数，在文中前面列举了。不断累计，直到闭包返回一个null，中止循环，返回计算结果。</p><p><b>g_func_apply(name, list)</b>的意义：将list数组进行累计（参照C#中<b>Aggregate</b>函数），用name指代的二元操作作为衔接。</p><p><b>g_func_apply_arg(name, list, arg)</b>的意义：将list数组进行累计（参照C#中Aggregate函数），用name指代的二元操作作为衔接，其中二元操作经arg函数修饰（如arg=swap时且结合不满足交换律时，结果就是反的）。<br></p><p>那么到这里，第一个任务完成了！</p><h2>剩下的任务</h2><p><u><b>字符串翻转</b></u></p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">g_string_reverse</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> \n  <span class=\"nx\">call</span> <span class=\"nx\">g_func_apply_arg</span><span class=\"p\">(</span><span class=\"s2\">\"g_func_add\"</span><span class=\"p\">,</span> <span class=\"nx\">call</span> <span class=\"nx\">g_string_split</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">),</span> <span class=\"s2\">\"g_func_swap\"</span><span class=\"p\">);</span>\n</code></pre></div><p>这里的窍门在于swap函数。</p><p><b><u>Haskell 中的 &amp;lt;*&amp;gt; Applicative</u></b></p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">g_func_applicative</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">,</span> <span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">call</span> <span class=\"nx\">f</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">call</span> <span class=\"nx\">b</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">));</span>\n</code></pre></div><p>实际意义是：applicative(f, a, b) = f(a, b(a))</p><p><b><u>回文数判断</u></b></p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">val</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">g_func_applicative</span><span class=\"p\">(</span><span class=\"s2\">\"g_func_eq\"</span><span class=\"p\">,</span> <span class=\"nx\">str</span><span class=\"p\">,</span> <span class=\"nx\">reverse</span><span class=\"p\">);</span>\n</code></pre></div><ul><li>g_func_eq 等于 ==<br></li><li>str 例如 12321</li><li>reverse 即字符串翻转函数</li></ul><br><p>所以原式即：str == reverse(str)。</p><h2>总结</h2><p>匆匆忙忙只是完成了函数式编程的第一步，后面会慢慢补上几个好玩的特性，如map、fold等。g_func_apply其实等同于Haskell中的foldl。</p>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":26804202,"publishedTime":"2017-05-09T16:46:45+08:00","url":"/p/26804202","title":"【jMiniOS】函数式编程（一）","summary":"有关jMiniLang的说明：<a href=\"https://link.zhihu.com/?target=http%3A//files.cnblogs.com/files/bajdcc/jMiniLang-manual.pdf\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">files.cnblogs.com/files</span><span class=\"invisible\">/bajdcc/jMiniLang-manual.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>================================看了<a href=\"https://www.zhihu.com/question/53094776\" class=\"internal\">Haskell 这段代码该如何理解？</a>今天突发奇想，尝试一把函数式编程的感觉~最近把<a href=\"https://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/jMiniLang<i class=\"icon-external\"></i></a>继续修整了一下，修了点bug，界面开了抗锯齿，顿时美观度大增哈哈。依照<a href=\"https://zhuanlan.zhihu.com/p/25476629\" class=\"internal\">【游…</a>","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0},"next":{"isTitleImageFullScreen":true,"rating":"none","titleImage":"https://pic2.zhimg.com/v2-48ae07a0298a343b5869b6f7083069b5_r.png","links":{"comments":"/api/posts/26912674/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"},{"url":"https://www.zhihu.com/topic/19561132","id":"19561132","name":"Java"},{"url":"https://www.zhihu.com/topic/19585411","id":"19585411","name":"函数式编程"}],"adminClosedComment":false,"href":"/api/posts/26912674","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/jMiniLang\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/jMiniLang<i class=\"icon-external\"></i></a><h2>写在前面</h2><p>接过一番折腾，终于实现了fold,take,map,zip等函数，虽说与haskell比还差得远，我也没做啥优化，就是体会一下函数式的风格。</p><p>简而言之，就是将函数作为参数传来传去，所以除了传值之外，还可以传<u>行为</u>。</p><h2>一切的基础</h2><p>分析了下haskell的主要函数，归纳起来，发现fold函数是非常基础的，它就相当于卷积，将一个表拍成一个元素。</p><p>对于表list，一般有两部分 x:xs，表头和表尾，haskell的实现是将表切开成x:xs，不过有了fold之后，就可以忽略x:xs了。</p><p>我们先设计两个list遍历函数：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">g_func_xsl</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"p\">[</span><span class=\"s2\">\"数组遍历闭包-foldl\"</span><span class=\"p\">]</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_size</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">idx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">_xsl</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">idx</span> <span class=\"o\">==</span> <span class=\"nx\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">g__</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">d</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_get</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"p\">,</span> <span class=\"nx\">idx</span><span class=\"p\">);</span>\n        <span class=\"nx\">idx</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">_xsl_</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">()</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">d</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"nx\">_xsl_</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n    <span class=\"k\">return</span> <span class=\"nx\">_xsl</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_xsl\"</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">g_func_xsr</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"p\">[</span><span class=\"s2\">\"数组遍历闭包-foldr\"</span><span class=\"p\">]</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">idx</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_size</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">_xsr</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">idx</span> <span class=\"o\">&amp;lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">g__</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">d</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_get</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"p\">,</span> <span class=\"nx\">idx</span><span class=\"p\">);</span>\n        <span class=\"nx\">idx</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">_xsr_</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">()</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">d</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"nx\">_xsr_</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n    <span class=\"k\">return</span> <span class=\"nx\">_xsr</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_xsr\"</span><span class=\"p\">;</span>\n</code></pre></div><p>其中，xsl是从左向右遍历，xsr则是反过来。做这个闭包的好处是：不创建新的list。</p><p>再创建几个默认值：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">g_func_1</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">a</span><span class=\"p\">;</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_1\"</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">g_func_always_1</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_always_1\"</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">g_func_always_true</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_always_true\"</span><span class=\"p\">;</span>\n</code></pre></div><p>接下来才是主角——<b>fold函数</b>。<br></p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">g_func_fold</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> \n    <span class=\"p\">[</span>\n        <span class=\"s2\">\"函数名：g_func_fold\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"参数解释：\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"  - name: 套用的折叠函数\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"  - list: 需处理的数组\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"  - init: 初始值(不用则为空)\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"  - xs: 数组遍历方式(xsl=从左到右,xsr=从右到左)\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"  - map: 对遍历的每个元素施加的变换\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"  - arg: 对二元操作进行包装(默认=g_func_1,例=g_func_swap)\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"  - filter: 对map后的元素进行过滤(true则处理)\"</span>\n    <span class=\"p\">]</span>\n    <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">init</span><span class=\"p\">,</span> <span class=\"nx\">xs</span><span class=\"p\">,</span> <span class=\"nx\">map</span><span class=\"p\">,</span> <span class=\"nx\">arg</span><span class=\"p\">,</span> <span class=\"nx\">filter</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_size</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">len</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">g__</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"c1\">// 肯定返回空</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">val</span> <span class=\"o\">=</span> <span class=\"nx\">g__</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"nx\">g__</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">call</span> <span class=\"nx\">g_is_null</span><span class=\"p\">(</span><span class=\"nx\">init</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"c1\">// 没初值的话，取第一个元素为初值</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">len</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">call</span> <span class=\"nx\">g_array_get</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"p\">}</span> <span class=\"c1\">// 只有一个元素</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">xs</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">);</span> <span class=\"c1\">// 创建遍历闭包</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">val</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">x</span><span class=\"p\">();</span> <span class=\"c1\">// 取第一个元素</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">val</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">val</span><span class=\"p\">();</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">val</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">);</span> <span class=\"c1\">// 对元素进行变换</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">xs</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">);</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">val</span> <span class=\"o\">=</span> <span class=\"nx\">init</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">;</span> <span class=\"c1\">// 对数组进行变换</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">arg</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">);</span> <span class=\"c1\">// 对卷积方式进行变换</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;;)</span> <span class=\"p\">{</span> <span class=\"c1\">// 遍历数组</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">v2</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">x</span><span class=\"p\">();</span> <span class=\"c1\">// 取得下一元素</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">call</span> <span class=\"nx\">g_is_null</span><span class=\"p\">(</span><span class=\"nx\">v2</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"k\">break</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"c1\">// 没有下一元素，中止</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">v2</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">v2</span><span class=\"p\">();</span> <span class=\"c1\">// 下一元素</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">v2</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">v2</span><span class=\"p\">);</span> <span class=\"c1\">// 对下一元素进行变换</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">call</span> <span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"nx\">v2</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"c1\">// 过滤控制</span>\n            <span class=\"kd\">let</span> <span class=\"nx\">val</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">n</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">,</span> <span class=\"nx\">v2</span><span class=\"p\">);</span> <span class=\"c1\">// 将两元素进行处理</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_fold\"</span><span class=\"p\">;</span>\n</code></pre></div><p><img src=\"http://pic3.zhimg.com/v2-26a3cba2512c79a012c18cfecb88ea6e_b.png\" data-rawwidth=\"810\" data-rawheight=\"610\" class=\"origin_image zh-lightbox-thumb\" width=\"810\" data-original=\"http://pic3.zhimg.com/v2-26a3cba2512c79a012c18cfecb88ea6e_r.png\">做了一个看doc的功能。我把中文和英文弄成一样大小，方便输出。</p><h2>Fold的应用</h2><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">g_func_apply</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span>\n    <span class=\"nx\">call</span> <span class=\"nx\">g_func_apply_arg</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_1\"</span><span class=\"p\">);</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_apply\"</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">g_func_apply_arg</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">arg</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span>\n    <span class=\"nx\">call</span> <span class=\"nx\">g_func_fold</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">g__</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_xsl\"</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_1\"</span><span class=\"p\">,</span> <span class=\"nx\">arg</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_always_true\"</span><span class=\"p\">);</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_apply_arg\"</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">g_func_applyr</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span>\n    <span class=\"nx\">call</span> <span class=\"nx\">g_func_applyr_arg</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_1\"</span><span class=\"p\">);</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_applyr\"</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">g_func_applyr_arg</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">arg</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span>\n    <span class=\"nx\">call</span> <span class=\"nx\">g_func_fold</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">g__</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_xsr\"</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_1\"</span><span class=\"p\">,</span> <span class=\"nx\">arg</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_always_true\"</span><span class=\"p\">);</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_applyr_arg\"</span><span class=\"p\">;</span>\n<span class=\"c1\">// ----------------------------------------------</span>\n<span class=\"kd\">var</span> <span class=\"nx\">g_func_map</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">arg</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span>\n    <span class=\"nx\">call</span> <span class=\"nx\">g_func_fold</span><span class=\"p\">(</span><span class=\"s2\">\"g_array_add\"</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">g_new_array</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_xsl\"</span><span class=\"p\">,</span> <span class=\"nx\">arg</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_always_true\"</span><span class=\"p\">);</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_map\"</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">g_func_mapr</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">arg</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span>\n    <span class=\"nx\">call</span> <span class=\"nx\">g_func_fold</span><span class=\"p\">(</span><span class=\"s2\">\"g_array_add\"</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">g_new_array</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_xsr\"</span><span class=\"p\">,</span> <span class=\"nx\">arg</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_always_true\"</span><span class=\"p\">);</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_mapr\"</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">g_func_length</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span>\n    <span class=\"nx\">call</span> <span class=\"nx\">g_func_fold</span><span class=\"p\">(</span><span class=\"s2\">\"g_func_add\"</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_xsl\"</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_always_1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_always_true\"</span><span class=\"p\">);</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_length\"</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">g_func_filter</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">filter</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span>\n    <span class=\"nx\">call</span> <span class=\"nx\">g_func_fold</span><span class=\"p\">(</span><span class=\"s2\">\"g_array_add\"</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">g_new_array</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_xsl\"</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_1\"</span><span class=\"p\">,</span> <span class=\"nx\">filter</span><span class=\"p\">);</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_filter\"</span><span class=\"p\">;</span>\n<span class=\"c1\">// ----------------------------------------------</span>\n<span class=\"kd\">var</span> <span class=\"nx\">take_filter</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">idx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">end</span> <span class=\"o\">=</span> <span class=\"nx\">n</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">_take_filter</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">idx</span><span class=\"o\">++</span> <span class=\"o\">&amp;lt;=</span> <span class=\"nx\">end</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nx\">_take_filter</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n<span class=\"kd\">var</span> <span class=\"nx\">drop_filter</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">idx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">end</span> <span class=\"o\">=</span> <span class=\"nx\">n</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">_drop_filter</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span> <span class=\"nx\">idx</span><span class=\"o\">++</span> <span class=\"o\">&amp;gt;</span> <span class=\"nx\">end</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nx\">_drop_filter</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n<span class=\"kd\">var</span> <span class=\"nx\">g_func_take</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">n</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span>\n    <span class=\"nx\">call</span> <span class=\"nx\">g_func_fold</span><span class=\"p\">(</span><span class=\"s2\">\"g_array_add\"</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">g_new_array</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_xsl\"</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_1\"</span><span class=\"p\">,</span> <span class=\"nx\">call</span> <span class=\"nx\">take_filter</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">));</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_take\"</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">g_func_taker</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">n</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span>\n    <span class=\"nx\">call</span> <span class=\"nx\">g_func_fold</span><span class=\"p\">(</span><span class=\"s2\">\"g_array_add\"</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">g_new_array</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_xsr\"</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_1\"</span><span class=\"p\">,</span> <span class=\"nx\">call</span> <span class=\"nx\">take_filter</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">));</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_taker\"</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">g_func_drop</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">n</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span>\n    <span class=\"nx\">call</span> <span class=\"nx\">g_func_fold</span><span class=\"p\">(</span><span class=\"s2\">\"g_array_add\"</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">g_new_array</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_xsl\"</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_1\"</span><span class=\"p\">,</span> <span class=\"nx\">call</span> <span class=\"nx\">drop_filter</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">));</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_drop\"</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">g_func_dropr</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">n</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span>\n    <span class=\"nx\">call</span> <span class=\"nx\">g_func_fold</span><span class=\"p\">(</span><span class=\"s2\">\"g_array_add\"</span><span class=\"p\">,</span> <span class=\"nx\">list</span><span class=\"p\">,</span> <span class=\"nx\">g_new_array</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_xsr\"</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_1\"</span><span class=\"p\">,</span> <span class=\"nx\">call</span> <span class=\"nx\">drop_filter</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">));</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_dropr\"</span><span class=\"p\">;</span>\n</code></pre></div><p>上面的代码实践证明：用fold可以实现map、filter、take、drop等功能。</p><h2>Zip的实现</h2><p>由于fold是对单一数组进行卷积/聚集，而zip的对象是两个数组，所以不兼容，只好另写了。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">var</span> <span class=\"nx\">func_zip</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">xs</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">val</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">xa</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">xs</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">xb</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">xs</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;;)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">_a</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">xa</span><span class=\"p\">();</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">_b</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">xb</span><span class=\"p\">();</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">call</span> <span class=\"nx\">g_is_null</span><span class=\"p\">(</span><span class=\"nx\">_a</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"nx\">call</span> <span class=\"nx\">g_is_null</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"nx\">call</span> <span class=\"nx\">name</span><span class=\"p\">(</span><span class=\"nx\">call</span> <span class=\"nx\">_a</span><span class=\"p\">(),</span> <span class=\"nx\">call</span> <span class=\"nx\">_b</span><span class=\"p\">());</span>\n        <span class=\"nx\">call</span> <span class=\"nx\">g_array_add</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n<span class=\"kd\">var</span> <span class=\"nx\">g_func_zip</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span>\n    <span class=\"nx\">call</span> <span class=\"nx\">func_zip</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_xsl\"</span><span class=\"p\">);</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_zip\"</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">g_func_zipr</span> <span class=\"o\">=</span> <span class=\"nx\">func</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">-&amp;gt;</span>\n    <span class=\"nx\">call</span> <span class=\"nx\">func_zip</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"s2\">\"g_func_xsr\"</span><span class=\"p\">);</span>\n<span class=\"kr\">export</span> <span class=\"s2\">\"g_func_zipr\"</span><span class=\"p\">;</span>\n</code></pre></div><p>总体跟fold差不多。</p><h2>总结</h2><p>jMiniLang我实现了闭包，就可以大搞函数式编程了。其实里面更复杂的是类型判断、代码优化等内容，所以这里也就是尝尝鲜尝了。等到把<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/CParser\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/CParser<i class=\"icon-external\"></i></a>改一下，以c语言去支持lambda就绝了。</p>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":26912674,"publishedTime":"2017-05-15T16:42:21+08:00","url":"/p/26912674","title":"【jMiniOS】函数式编程（二）","summary":"<a href=\"https://github.com/bajdcc/jMiniLang\" data-editable=\"true\" data-title=\"bajdcc/jMiniLang\">bajdcc/jMiniLang</a>写在前面接过一番折腾，终于实现了fold,take,map,zip等函数，虽说与haskell比还差得远，我也没做啥优化，就是体会一下函数式的风格。简而言之，就是将函数作为参数传来传去，所以除了传值之外，还可以传<u>行为</u>。一切的基础分析了下haskell的…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0}},"commentsCount":5,"likesCount":33,"FULLINFO":true}},"User":{"bajdcc":{"isFollowed":false,"name":"陈安","headline":"专业研究野生技术 https://github.com/bajdcc","avatarUrl":"https://pic4.zhimg.com/v2-cd6d61ad9ef94c41b9e77f8e0f727893_s.jpg","isFollowing":false,"type":"people","slug":"bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","profileUrl":"https://www.zhihu.com/people/bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false,"badge":{"identity":null,"bestAnswerer":null}}},"Comment":{},"favlists":{}},"me":{},"global":{},"columns":{"learncpp":{"following":false,"canManage":false,"href":"/api/columns/learncpp","name":"从零开始构建标准库","creator":{"slug":"bajdcc"},"url":"/learncpp","slug":"learncpp","avatar":{"id":"v2-bf63794c542fc73b11e17014b7e0d01d","template":"https://pic2.zhimg.com/{id}_{size}.jpg"}}},"columnPosts":{},"postComments":{},"postReviewComments":{"comments":[],"newComments":[],"hasMore":true},"favlistsByUser":{},"favlistRelations":{},"promotions":{},"env":{"isAppView":false,"appViewConfig":{"content_padding_top":128,"content_padding_bottom":56,"content_padding_left":16,"content_padding_right":16,"title_font_size":22,"body_font_size":16,"is_dark_theme":false,"can_auto_load_image":true,"app_info":"OS=iOS"},"isApp":false},"sys":{}}</textarea>

    <script src="//static.zhihu.com/hemingway/common.c070f7d93ecd9d89ea5e.js"></script>
<script src="//static.zhihu.com/hemingway/app.5353832f5b5cd3213d84.js"></script>
<script src="//static.zhihu.com/hemingway/raven.f556922844d9edc7362e.js" async defer></script>
  </body>
</html>
