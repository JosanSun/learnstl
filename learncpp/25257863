<!doctype html>
<html lang="zh-CN">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>【Primer】前11章小测验 - 知乎专栏</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link rel="shortcut icon" href="https://static.zhihu.com/static/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="//static.zhihu.com/hemingway/app.ad2159a596c8458712d70cf5a5b17235.css" />
    <script>document.documentElement.className += ('ontouchstart' in window) ? ' touch' : ' no-touch'</script>
  </head>
  <body>

    <div id="react-root"></div>
    <textarea id="clientConfig" hidden>{"debug":false,"apiRoot":"","paySDK":"https://pay.zhihu.com/api/js","name":"production","instance":"column","tokens":{"X-XSRF-TOKEN":null,"X-UDID":null,"Authorization":"oauth c3cef7c66a1843f8b3a9e6a1e3160e20"}}</textarea>
    <textarea id="preloadedState" hidden>{"database":{"Post":{"25257863":{"title":"【Primer】前11章小测验","author":"bajdcc","content":"<h1>C++ Primer Test</h1><p>书本是《Primer C++ 中文版（第5版）》，王、杨译。</p><p>题目范围：前11章（含）。</p><p><i>PS：由于内容太多，不可能面面俱到，故就挑一些我认为较重要的地方。星号★表示难度。</i></p><br><p>-----------【1、基本类型】-----------</p><p>概念：</p><ol><li><p>列举常用的基本数据类型</p></li><li><p>每种类型的用处是什么？</p></li><li><p>有符号和无符号混合起来运算，怎么处理？</p></li><li><p>什么时候发生溢出？</p></li><li><p>精度：浮点数运算为什么不满足结合律？</p></li><li><p>★数值运算表达式有哪些优化方法？</p></li></ol><p>编程：</p><ol><li><p>如何将int的小端表示转化为大端表示？</p></li><li><p>★itoa, atoi, itof, ftoi</p></li><li><p>★bitset实现</p></li><li><p>★基本数据类型的序列化</p></li></ol><p>-----------【2、指针与引用】-----------</p><p>概念：</p><ol><li><p>指针表示与引用表示：等价吗？</p></li><li><p>左值引用与右值引用</p></li><li><p>POD</p></li></ol><p>-----------【3、字符串】-----------</p><p>概念：</p><ol><li><p>string的内存管理方式</p></li><li><p>多个string相加会影响效率吗？</p></li></ol><p>编程</p><ol><li><p>实现cctype中的库函数（书P82）</p></li><li><p>★★求两个字符串的相似程度<br></p></li></ol><p>-----------【4、动态数组】-----------</p><p>概念：</p><ol><li><p>vector的内存管理方式</p></li><li><p>遍历方法；遍历时如何删除当前元素？</p></li><li><p>不同vector对象的迭代器能否比较？</p></li><li><p>★什么时候vector才会去申请新的空间？什么时候释放？</p></li><li><p>★★自己实现一个allocator<br></p></li></ol><p>编程：</p><ol><li><p>实现简单的动态数组</p></li></ol><p>-----------【5、优先级】-----------</p><p>概念：</p><ol><li><p>熟记优先级表</p></li><li><p>a(b(),c(),d())，对象的构造顺序？</p></li></ol><p>编程：</p><ol><li><p>★实现四则运算器</p></li></ol><p>-----------【6、函数】-----------</p><p>概念：</p><ol><li><p>函数指针，用typedef或using表示</p></li><li><p>lambda如何使用，能与std::function互相转换吗？</p></li><li><p>函数参数的入栈顺序</p></li><li><p>函数参数传值和传引用的区别</p></li></ol><p>编程：</p><ol><li><p>★实现printf</p></li><li><p>★函数参数转发<br></p></li><li><p>★★实现std::function和std::bind</p></li><li><p>★★实现异步调用模型</p></li></ol><p>-----------【7、类】-----------</p><p><strong>★本章知识非常重要，一个字都不要放过。★</strong></p><p><strong>★本章知识非常重要，一个字都不要放过。</strong>★</p><p><strong>★本章知识非常重要，一个字都不要放过。★</strong></p><p>-----------【8、输入输出】-----------</p><p>概念：</p><ol><li><p>关于IO，常见的头文件有？</p></li><li><p>cin的使用、标志位；cin出错如何处理？</p></li><li><p>格式化；标志位设完后需要清除吗？</p></li><li><p>getline按回车就返回，能否屏蔽掉回车，即以#为终止符接受多行输入？</p></li></ol><p>编程：</p><ol><li><p>统计文本文件中的单词数</p></li><li><p>★★流的设计理念</p></li></ol><p>-----------【9、顺序容器】-----------</p><p>概念：</p><ol><li><p>常见的顺序容器有哪些？</p></li><li><p>每种容器适用于什么场合？</p></li><li><p>遍历与访问方法</p></li><li><p>assign和resize</p></li></ol><p>-----------【10、泛型】-----------</p><p><strong>泛型常用方法：</strong><a href=\"https://link.zhihu.com/?target=https%3A//github.com/githubwoniu/learnprogram/wiki/STL%25E6%25A0%2587%25E5%2587%2586%25E5%25BA%2593%25E4%25B8%25AD%25E7%259A%2584%25E7%25AE%2597%25E6%25B3%2595%25E5%2587%25BD%25E6%2595%25B0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STL标准库中的算法函数<i class=\"icon-external\"></i></a></p><p>概念：</p><ol><li><p>什么是泛型？</p></li><li><p>协变与逆变</p></li></ol><p>编程：</p><ol><li><p>★实现泛型数组</p></li><li><p>★★使用模版，实现编译期判断素数isPrime&amp;lt;n&amp;gt;</p></li></ol><p>-----------【11、关联容器】-----------</p><p>概念：</p><ol><li><p>关联容器的使用方法</p></li><li><p>★map和set的内部数据结构是怎样的？它们的运行效率？</p></li></ol>","updated":"2017-02-15T14:05:48.000Z","canComment":false,"commentPermission":"anyone","commentCount":2,"collapsedCount":0,"likeCount":2,"state":"published","isLiked":false,"slug":"25257863","isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic1.zhimg.com/v2-a93a0da852afded30ed09806f80321fc_r.jpg","links":{"comments":"/api/posts/25257863/comments"},"reviewers":[],"topics":[{"url":"https://www.zhihu.com/topic/19646156","id":"19646156","name":"C++ Primer"},{"url":"https://www.zhihu.com/topic/19584970","id":"19584970","name":"C++"},{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"}],"titleImageSize":{"width":0,"height":0},"href":"/api/posts/25257863","excerptTitle":"","column":{"slug":"learncpp","name":"从零开始构建标准库"},"tipjarState":"inactivated","sourceUrl":"","pageCommentsCount":2,"snapshotUrl":"","publishedTime":"2017-02-15T22:05:48+08:00","url":"/p/25257863","lastestLikers":[{"profileUrl":"https://www.zhihu.com/people/ge-chong-91","bio":"大一","hash":"f387a1202f7f964cdda3f182c2c98a67","uid":724669402905083900,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"ge-chong-91","avatar":{"id":"2867426087330a1bb3482871d47b6e45","template":"https://pic2.zhimg.com/{id}_{size}.jpg"},"name":"爱因斯坦葛"},{"profileUrl":"https://www.zhihu.com/people/li-zi-70-32-22","bio":"编程员","hash":"21fcf3e021fc099fb7e5b864f8dddba0","uid":623438149871865900,"isOrg":false,"description":"The Beginning C","isOrgWhiteList":false,"slug":"li-zi-70-32-22","avatar":{"id":"v2-57fa8393f6c9375d9842d71731a2baba","template":"https://pic3.zhimg.com/{id}_{size}.jpg"},"name":"李子7"}],"summary":"C++ Primer Test书本是《Primer C++ 中文版（第5版）》，王、杨译。题目范围：前11章（含）。<i>PS：由于内容太多，不可能面面俱到，故就挑一些我认为较重要的地方。星号★表示难度。</i> -----------【1、基本类型】-----------概念：列举常用的基本数据类型每种…","reviewingCommentsCount":0,"meta":{"previous":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic3.zhimg.com/v2-d43c180aa29bba2b04653eb011af7dba_r.png","links":{"comments":"/api/posts/25189183/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19602492","id":"19602492","name":"JSON"},{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"},{"url":"https://www.zhihu.com/topic/19593616","id":"19593616","name":"编程学习"}],"href":"/api/posts/25189183","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<p>通过阅读高质量的代码，提升自己的编程水平，找到编程的感觉。<br></p><p><u>带着问题去阅读，在阅读中思考为什么这样设计。</u></p>源码地址在：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/githubwoniu/json11\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">githubwoniu/json11<i class=\"icon-external\"></i></a>，可以fork之。<ul><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/githubwoniu/json11/blob/master/json11.cpp\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/githubwoniu/</span><span class=\"invisible\">json11/blob/master/json11.cpp</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br></li><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/githubwoniu/json11/blob/master/json11.hpp\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/githubwoniu/</span><span class=\"invisible\">json11/blob/master/json11.hpp</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br></li></ul><h2>阅读目的</h2><p>【思考题】</p><p>json层面：</p><ol><li>什么是序列化，你接触过的序列化有哪些？</li><li>json是什么，它的组成，为什么要用它？</li><li>如何用json表示对象？</li><li><b>说说json中用到的递归理念，它和我们所学的二叉树或其他的数据结构有哪些异同？</b></li><li>json能否表示一张图片？</li></ol><p>语言特性层面：</p><ol><li>代码的美观程度，代码风格</li><li>这个特性你认识吗，不认识请翻书</li><li>为什么要用到这个特性，有其他方法替代吗？</li><li>什么时候该用这个特性，为什么其他方法不行？</li><li><b>给代码添加注释，说明为什么这样写</b></li></ol><p>设计层面：</p><ol><li>用到了哪些类，每个类的任务是什么，为什么设计这些类？</li><li>代码中用到了枚举enum，用处是什么？<br></li><li>你来设计的话，会设计哪些类？</li><li>【进阶】体会模版类的设计方法</li></ol><p>语法分析层面：</p><ol><li><b>熟悉json的语法</b></li><li>【进阶】学习LL1分析的方法（参考相关书籍）</li><li>读懂BNF，写出状态图</li></ol><p>概念层面：</p><ol><li><b>不同的机器间通讯为什么要采用相同的协议？</b></li><li>哪些语言中涉及json？</li><li>常见的序列化工具有哪些？</li></ol><p>其他层面：</p><ol><li>C++11的初始化列表构造方式能重载吗？</li><li>你能自己设计一个智能指针出来吗？</li><li>如何实现itoa，snprintf？</li><li>utf8是什么？如何与ascii转换？</li></ol><br><br><br><h2>简要介绍</h2><p>通过阅读json11的代码，能够达到怎样的目标呢？那么为了解答这个问题，需要对json11有个初步的了解。</p><p>json11，它包含了json和C++11相关的内容，所以我们首先需要知晓json和C++11。</p><p>=========关于json=========<br></p><p>json其实就是一个<b>字符串</b>，但这个字符串是可以描述某个对象的，这是不是很似曾相识？接触过MFC的知道CArchive类吧，它就是完成对象序列化（持久化）的功能。在java中，一个类想要序列化就必须实现Serializable接口。</p><blockquote>假设两台电脑间要传递信息（文字、图片、视频），最终信息通过网线传输，大家知道网线传输电信号，实际上就是0和1。这样，我们需要先把你QQ上发的图片，带上你的QQ号，以及你的网络地址等一系列信息，将它们转换成0和1组成的二进制串，然后再发送出去。简而言之，<u>需要将一个对象转换成二进制串，这个过程就是序列化</u>。</blockquote><p>序列化能够解决什么问题呢？——<b>以字符串或二进制串为媒介，将对象进行传输</b>。想象一下：打游戏获得装备，需要向服务器汇报；上网浏览网页、看视频等。这些都是将对象借助网络传输。</p><p>也就是说，没有了网络，就不会有json（就一台孤零零的电脑瞎搞什么序列化）。但有了网络，就一定会有json吗？确定不是ason、bson？类似地，为什么要搞USB接口？用苹果那套不行吗？为什么要搞HTTP，不搞其他的？</p><p>上面的矛盾直接就导致了我们<b>需要一套统一的标准/协议</b>。网线有标准、USB有标准、WIFI有标准、视频有标准、图片有标准……联想一下秦始皇统一后干的事情：统一文字、货币、度量衡，再想象一下中国人和美国人交流距离和温度的单位，就知道为什么要<b>统一标准</b>。</p><p>http+需要传输对象+统一标准，那么json就来了。</p><p>知道了json是必然出现的，但它究竟是什么呢？它能表示一个对象，那对象又是什么？</p><p>典型的问题：对象object是什么？那么结合C++，知道它有数据和方法，而这里要传输的主要是数据（怎么传输方法先忽略），数据包含什么？</p><p>数据有什么？问的是数据有哪些类型，有int、double、字符串等等，但它们并不能表示所有的object。</p><p>思考：如何表示一个家庭（三口之家）？是不是想起了什么，[Me, father, mother]，这就是数组。</p><p>有些思路了，object是：<b>有基本数据类型，有数组，数组里面还能放object</b>。</p><p>有人会说，用字符串表示更费空间啊，为什么不用二进制表示呢？这里说明下：json是<b>方便给人看的</b>（因为人要修改它啊），跟xml一样，人是看不懂二进制的。</p><div class=\"highlight\"><pre><code class=\"language-json\"><span></span><span class=\"p\">{</span>\n    <span class=\"nt\">\"home\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"father\"</span> <span class=\"p\">,</span> <span class=\"nt\">\"age\"</span><span class=\"p\">:</span><span class=\"s2\">\"保密\"</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"mother\"</span> <span class=\"p\">,</span> <span class=\"nt\">\"age\"</span><span class=\"p\">:</span><span class=\"s2\">\"保密\"</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"me\"</span> <span class=\"p\">,</span> <span class=\"nt\">\"age\"</span><span class=\"p\">:</span><span class=\"mi\">18</span> <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>是不是可以读懂上面的json？</p><p>=========关于C++11=========<br></p><p>项目中用了很多C++的特性。</p><ul><li>命名空间</li><li>using</li><li><b>运算符重载</b></li><li><b>左值引用和右值引用，常引用</b></li><li><b>snprintf</b></li><li>模版</li><li>explicit</li><li>智能指针</li><li><b>vector, string, map</b></li><li><b>foreach</b></li><li>decltype</li><li>final</li><li><b>auto</b></li></ul><p>加粗的部分是比较常见的，需要重点掌握。以上知识需要参阅C++相关书籍，这一部分没有捷径，靠自己理解，先自己动手解决问题，不做伸手党。</p>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":25189183,"publishedTime":"2017-02-11T15:40:24+08:00","url":"/p/25189183","title":"【源码众读】json11学习计划","summary":"通过阅读高质量的代码，提升自己的编程水平，找到编程的感觉。 <u>带着问题去阅读，在阅读中思考为什么这样设计。</u>源码地址在：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/githubwoniu/json11\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">githubwoniu/json11<i class=\"icon-external\"></i></a>，可以fork之。<a href=\"https://link.zhihu.com/?target=https%3A//github.com/githubwoniu/json11/blob/master/json11.cpp\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/githubwoniu/</span><span class=\"invisible\">json11/blob/master/json11.cpp</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> <a href=\"https://link.zhihu.com/?target=https%3A//github.com/githubwoniu/json11/blob/master/json11.hpp\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/githubwoniu/</span><span class=\"invisible\">json11/blob/master/json11.hpp</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> 阅读目的【思考题】json层面：什么是序列化，你接触…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0},"next":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic4.zhimg.com/v2-11e6cbeb153a8c2f7801d08fb096844b_r.png","links":{"comments":"/api/posts/25284597/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19616605","id":"19616605","name":"DirectX"},{"url":"https://www.zhihu.com/topic/19612186","id":"19612186","name":"Lua"},{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"}],"href":"/api/posts/25284597","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"经过又一番折腾之后，一个像样的界面就做出来了。<p>期间遇到一些坑爹的问题。比如lua实现继承的时候出现的问题，假如B继承自A，A有数组children，那B的children也是继承自A的，问题在于：新建A，使得A.children=2，那么再新建个B，B.children竟然也是2，但是只要在B的构造函数当中将children重置即可，然而我最终并非查清是哪里出错了。lua实现oop问题重重，好在已经解决了。</p><h2>浅说布局</h2><p>到现在为止，实现的布局不多，只有两种：</p><ol><li>绝对布局</li><li>线性布局</li></ol><p>绝对布局不用说。线性布局的话，它会按垂直或水平方向平均分布各成员，比如按钮组就需要用到它。</p><p>当然，还有一些其他的布局，如Grid布局、相对布局、表格布局等，但是实现难度较高，且都是适用于静态元素的。假如要设计针对2D的游戏框架，那么以贪吃蛇为例，它的身体是不断运动的，即元素的位置不停发生变化，因此只能使用绝对布局。</p><p>一些界面，比如登录框、用户信息等适用于静态布局，元素少些还好说，像是大容量的表格布局，就比较麻烦了。一般来说，表格的信息不会全部显示，那么可以把暂时在屏幕之外的那些元素给回收掉，到用的时候再创建；第二种思路，不回收，将屏幕外的元素保存，只将内容改动即可。</p><p>HTML上的布局可多了，因此它的渲染引擎更复杂，我们只能实现简单的、够用的布局就足够了。</p><p>布局无非就是收到<b>大小改变</b>消息后，需要对它的成员重新计算大小。计算大小的方法其实大同小异，没什么特殊的，难就难在要考虑的东西多。</p><p>有了布局后，再谈谈布局里面的控件</p><h2>浅说控件</h2>常见的控件多了去了，有按钮、文本框、滚动条、图片、单选多选框等。要实现每一种，需要考虑到：<ol><li>与操作系统的交互。文本框：如何收到用户输入？滚动条：如何知晓鼠标滚动？按钮：如何感觉到鼠标被单击？</li><li>状态的改变。文本框：当前的输入内容？按钮：是否处于按下状态？</li><li>发生重绘。根据上一状态和操作系统反馈来的消息，确定当前状态，并重绘整个控件。</li></ol><p>因此，难点有很多：控件与底层的交互、控件状态的设计、控件的绘制逻辑。绘制是最难的，win7的progressbar动画就可以难倒很多人了。</p><p>不过，从简单做起，我们实现了最简单、最经典的控件——按钮。</p><p>不要小看按钮，它涉及的地方很多：接收用户输入消息、响应用户输入、显示当前状态。</p><p>当鼠标点击按钮的时候，按钮会有一个响应，那就是“被按下”，同时，它会发出一个消息“按钮被按下”。按钮的绘制也很经典：一个纯色块背景，一个文字前景。纯色块就是绘矩形，另一个是绘文字。想一想，只要完成这两种，俄罗斯方块就可以做出来了。</p><p>绘矩形相关的有：需要一个笔刷，有的需要线刷（GDI）。画矩形要考虑：线条粗细、矩形大小、线条和填充颜色。</p><p>绘文字比较麻烦一点：GDI的话要创建字体、线刷；D2D要创建文字布局（居中还是靠边）、设置格式（文字大小、字体、粗细、对齐）等。文字最讲究一个格式，像绘制富文本就更加困难了。</p><p>两样都完成后，就可以绘制按钮了。按钮包含两样：背景色和文字。因此按钮就是一个布局，对背景色和文字的包装。</p><p>看一段lua代码：</p><div class=\"highlight\"><pre><code class=\"language-lua\"><span></span><span class=\"k\">function</span> <span class=\"nf\">M</span><span class=\"p\">:</span><span class=\"n\">init_menu</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">)</span>\n\t<span class=\"c1\">-- MENU CONTAINER LAYOUT</span>\n\t<span class=\"kd\">local</span> <span class=\"n\">menu</span> <span class=\"o\">=</span> <span class=\"n\">LinearLayout</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">({</span>\n\t\t<span class=\"n\">align</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n\t\t<span class=\"n\">pre_resize</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">top</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"n\">bottom</span><span class=\"p\">)</span>\n\t\t\t<span class=\"kd\">local</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">right</span> <span class=\"o\">-</span> <span class=\"n\">left</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n\t\t\t<span class=\"kd\">local</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">top</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">bottom</span> <span class=\"o\">-</span> <span class=\"n\">top</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"n\">w</span> <span class=\"o\">-</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"o\">+</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">h</span> <span class=\"o\">+</span> <span class=\"mi\">250</span>\n\t\t<span class=\"k\">end</span>\n\t<span class=\"p\">})</span>\n\t<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"n\">menu</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">:</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">menu</span><span class=\"p\">)</span>\n\t\n\t<span class=\"c1\">-- MENU BUTTON</span>\n\t<span class=\"n\">Button</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">({</span>\n\t\t<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"s\">控件'</span><span class=\"p\">,</span>\n\t\t<span class=\"n\">click</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">()</span>\n\t\t<span class=\"k\">end</span>\n\t<span class=\"p\">}):</span><span class=\"n\">attach</span><span class=\"p\">(</span><span class=\"n\">menu</span><span class=\"p\">)</span>\n\n\t<span class=\"n\">Button</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">({</span>\n\t\t<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"s\">动画'</span><span class=\"p\">,</span>\n\t\t<span class=\"n\">click</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">()</span>\n\t\t\t<span class=\"n\">FlipScene</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"s\">Time'</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">end</span>\n\t<span class=\"p\">}):</span><span class=\"n\">attach</span><span class=\"p\">(</span><span class=\"n\">menu</span><span class=\"p\">)</span>\n\n\t<span class=\"n\">Button</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">({</span>\n\t\t<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"s\">退出'</span><span class=\"p\">,</span>\n\t\t<span class=\"n\">click</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">()</span>\n\t\t\t<span class=\"n\">UIExt</span><span class=\"p\">.</span><span class=\"n\">quit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">end</span>\n\t<span class=\"p\">}):</span><span class=\"n\">attach</span><span class=\"p\">(</span><span class=\"n\">menu</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div><p>这是绘制封面上三个按钮的，外加一个线性布局，用于均排三个按钮。即用脚本再构建界面，可以看出，该方法还是挺优美的。</p><h2>阶段性回顾</h2><p>从一开始计划这个项目以来，已经过去差不多一个月，一开始精简原始项目的代码实在是地狱级难度，但是到现在用lua写UI简直是行云流水，一个字爽！</p><p>写这个UI，并不是一两天的事，先前有实现好几个UI的基础（C++，C#），因此对整体的设计也熟练许多。这次使用lua是一次新的尝试，事实证明lua还是非常优秀的。</p><p>接下来完善了必要的控件后就可以用脚本写第一个游戏了，想想还是有点小激动呢~ :)</p>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":25284597,"publishedTime":"2017-02-17T12:39:37+08:00","url":"/p/25284597","title":"【游戏框架系列】有模有样","summary":"经过又一番折腾之后，一个像样的界面就做出来了。期间遇到一些坑爹的问题。比如lua实现继承的时候出现的问题，假如B继承自A，A有数组children，那B的children也是继承自A的，问题在于：新建A，使得A.children=2，那么再新建个B，B.children竟然也是2，但是…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0}},"commentsCount":2,"likesCount":2,"FULLINFO":true}},"User":{"bajdcc":{"isFollowed":false,"name":"陈安","headline":"专业研究野生技术 https://github.com/bajdcc","avatarUrl":"https://pic4.zhimg.com/v2-cd6d61ad9ef94c41b9e77f8e0f727893_s.jpg","isFollowing":false,"type":"people","slug":"bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","profileUrl":"https://www.zhihu.com/people/bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false,"badge":{"identity":null,"bestAnswerer":null}}},"Comment":{}},"me":{},"global":{},"columns":{"learncpp":{"following":false,"canManage":false,"href":"/api/columns/learncpp","name":"从零开始构建标准库","creator":{"slug":"bajdcc"},"url":"/learncpp","slug":"learncpp","avatar":{"id":"v2-bf63794c542fc73b11e17014b7e0d01d","template":"https://pic2.zhimg.com/{id}_{size}.jpg"},"FULLINFO":false}},"columnPosts":{},"postComments":{},"postReviewComments":{"comments":[],"newComments":[],"hasMore":true}}</textarea>

    <script src="//static.zhihu.com/hemingway/common.ac46319b23e12700340a.js"></script>
<script src="//static.zhihu.com/hemingway/app.47dccfede9fcf0800757.js"></script>
<script src="//static.zhihu.com/hemingway/raven.ccdadd4407812d1aac2f.js" async defer></script>
  </body>
</html>
