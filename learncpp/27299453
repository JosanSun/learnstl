<!doctype html>
<html lang="zh-CN" class="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>【CodeCombat】网站搭建 - 知乎专栏</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link rel="shortcut icon" href="https://static.zhihu.com/static/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="//static.zhihu.com/hemingway/app.697838bb2e80a05fbcead68b45e858df.css" />
    <style></style>
    <script>document.documentElement.className += ('ontouchstart' in window) ? ' touch' : ' no-touch'</script>
  </head>
  <body>

    <div id="react-root"></div>
    <textarea id="clientConfig" hidden>{"debug":false,"apiRoot":"","paySDK":"https://pay.zhihu.com/api/js","wechatConfigAPI":"/api/wechat/jssdkconfig","name":"production","instance":"column","tokens":{"X-XSRF-TOKEN":null,"X-UDID":null,"Authorization":"oauth c3cef7c66a1843f8b3a9e6a1e3160e20"}}</textarea>
    <textarea id="preloadedState" hidden>{"database":{"Post":{"27299453":{"title":"【CodeCombat】网站搭建","author":"bajdcc","content":"<h2>前言</h2><p>之前听说了CodeCombat，很不错，适合Python入门。在官网上玩了几十关，发现它开放源码，经过一番折腾，终于搭建成功。</p><p>官网教程：<a href=\"http://link.zhihu.com/?target=https%3A//github.com/codecombat/codecombat/wiki/Dev-Setup%3A-Windows\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">codecombat/codecombat<i class=\"icon-external\"></i></a></p><h2>工具</h2><p><b><u>安装下面指定的版本，就不会出问题，运行不了就是版本问题！！！</u></b></p><ul><li>安装Visual Studio 2015(其他版本我没试)，编译用</li><li><b>Nodejs 4.8.3</b>，如果用5、6、7版本通通出问题，问题出在编译sass-brunch上，安装npm以及bower、nodemon</li><li>Git，版本随意</li><li>Python 2.7</li><li><b>Mongodb 2.6.4</b>，用版本3以上会出问题，在restore时出现index错误</li></ul><br><h2>搭建过程</h2><ol><li>git clone <a href=\"http://link.zhihu.com/?target=https%3A//github.com/%2524GITHUB_USERNAME/codecombat.git\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">https://github.com/<i class=\"icon-external\"></i></a><a href=\"http://link.zhihu.com/?target=https%3A//github.com/%2524GITHUB_USERNAME/codecombat.git\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">codecombat<i class=\"icon-external\"></i></a>/codecombat.git，最好切换到production分支<br></li><li>npm install，这一步会报错，win平台上webworker出错，不过webworker是optional的，出错无所谓，通常情况下npm install不会有问题</li><li>下载Mongodb数据库<a href=\"http://link.zhihu.com/?target=http%3A//analytics.codecombat.com%3A8080/dump.tar.gz\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">analytics.codecombat.com:8080</span><span class=\"invisible\">/dump.tar.gz</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>，这个数据库经常更新，包括官网所有关卡数据，嘿嘿<br></li><li>编译优化，npm run postinstall，通常是自动的</li><li>运行，npm run dev或npm start，网站在127.0.0.1:3000</li></ol><h2>数据库</h2><p>数据库查看软件用robomongo，先熟悉下。</p><ol><li>注册独立用户，将其设为管理员：在coco数据库下User表中添加permissions:[\"godmode\",\"admin\"]</li><li>关卡加载失败：这是因为levels表中关卡缺失，可以将url切换到官网进行下载，将下载后的json导入到levels中，当前我写了个脚本自动下载</li></ol><h2>运行截图</h2><noscript><img src=\"https://pic3.zhimg.com/v2-1e5d3a4c3b219c06ece25395cc3afc96_b.png\" data-rawwidth=\"1366\" data-rawheight=\"768\" class=\"origin_image zh-lightbox-thumb\" width=\"1366\" data-original=\"https://pic3.zhimg.com/v2-1e5d3a4c3b219c06ece25395cc3afc96_r.png\"></noscript><img src=\"//zhstatic.zhihu.com/assets/zhihu/ztext/whitedot.jpg\" data-rawwidth=\"1366\" data-rawheight=\"768\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1366\" data-original=\"https://pic3.zhimg.com/v2-1e5d3a4c3b219c06ece25395cc3afc96_r.png\" data-actualsrc=\"https://pic3.zhimg.com/v2-1e5d3a4c3b219c06ece25395cc3afc96_b.png\"><noscript><img src=\"https://pic3.zhimg.com/v2-fb78199f4bee35f73a26cc4fab4d46fa_b.png\" data-rawwidth=\"1366\" data-rawheight=\"767\" class=\"origin_image zh-lightbox-thumb\" width=\"1366\" data-original=\"https://pic3.zhimg.com/v2-fb78199f4bee35f73a26cc4fab4d46fa_r.png\"></noscript><img src=\"//zhstatic.zhihu.com/assets/zhihu/ztext/whitedot.jpg\" data-rawwidth=\"1366\" data-rawheight=\"767\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1366\" data-original=\"https://pic3.zhimg.com/v2-fb78199f4bee35f73a26cc4fab4d46fa_r.png\" data-actualsrc=\"https://pic3.zhimg.com/v2-fb78199f4bee35f73a26cc4fab4d46fa_b.png\"><p>==============================</p><p>server代码自动下载脚本。链接：<a href=\"http://link.zhihu.com/?target=http%3A//pan.baidu.com/s/1slK1LM1\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">pan.baidu.com/s/1slK1LM</span><span class=\"invisible\">1</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> 密码：私信</p><p>已经下载完成的官方关卡数据（已下好<a href=\"http://link.zhihu.com/?target=http%3A//analytics.codecombat.com%3A8080/dump.tar.gz\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">analytics.codecombat.com:8080</span><span class=\"invisible\">/dump.tar.gz</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>）：链接：<a href=\"http://link.zhihu.com/?target=http%3A//pan.baidu.com/s/1i4PlDxN\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">pan.baidu.com/s/1i4PlDx</span><span class=\"invisible\">N</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> 密码：私信</p><blockquote><b>PS：官方关卡数据就是用自动下载脚本去下载的，若是只要体验下关卡那就只要下载关卡数据就可以了。自动下载的机制是查询数据库知不存在时将官方数据下载至本地数据库， 是按需下载，但是因为开源代码的地图和官方网站上的地图有一些不一致，所以某些关卡会下载失败。<br>折腾这个源代码很费力气，由于网上也没有多少教程，所以写了这个教程分享给大家，当然最要感谢的还是做codecombat这个项目的人，太牛了。</b></blockquote>","updated":"2017-06-08T02:06:03.000Z","canComment":false,"commentPermission":"anyone","commentCount":1,"collapsedCount":0,"likeCount":12,"state":"published","isLiked":false,"slug":"27299453","isTitleImageFullScreen":true,"rating":"none","titleImage":"https://pic3.zhimg.com/v2-a773020ee533be5e9ca70ce6ac4eaa1a_r.png","links":{"comments":"/api/posts/27299453/comments"},"reviewers":[],"topics":[{"url":"https://www.zhihu.com/topic/20076640","id":"20076640","name":"codecombat"},{"url":"https://www.zhihu.com/topic/19595725","id":"19595725","name":"网站搭建"},{"url":"https://www.zhihu.com/topic/19593616","id":"19593616","name":"编程学习"}],"adminClosedComment":false,"titleImageSize":{"width":1366,"height":767},"href":"/api/posts/27299453","excerptTitle":"","column":{"slug":"learncpp","name":"学习C++"},"tipjarState":"inactivated","annotationAction":[],"sourceUrl":"","pageCommentsCount":1,"hasPublishingDraft":false,"snapshotUrl":"","publishedTime":"2017-06-08T10:06:03+08:00","url":"/p/27299453","lastestLikers":[{"bio":null,"isFollowing":false,"hash":"88c2b7116ae4865483c8d58dbe94007e","uid":41141609168896,"isOrg":false,"slug":"acail-acail","isFollowed":false,"description":"","name":"acail acail","profileUrl":"https://www.zhihu.com/people/acail-acail","avatar":{"id":"e3e7af1c1","template":"https://pic2.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false},{"bio":"RTS骨灰玩家/中医粉/突发性耳聋","isFollowing":false,"hash":"aeca0435bce67288d1899e61f040be90","uid":728922605817446400,"isOrg":false,"slug":"yu-yang-36-43","isFollowed":false,"description":"此生希望为国捐躯，马革裹尸","name":"余洋","profileUrl":"https://www.zhihu.com/people/yu-yang-36-43","avatar":{"id":"00dc9d0ef81c47a93836b8f67d566be3","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false},{"bio":"月寒日暖，来煎人寿。","isFollowing":false,"hash":"8baa54b469b65527df831472089275da","uid":54564636065792,"isOrg":false,"slug":"li-yong-jing-60","isFollowed":false,"description":"","name":"月饮星河","profileUrl":"https://www.zhihu.com/people/li-yong-jing-60","avatar":{"id":"v2-4f2d6facaf6e1a82edd7dd7d1f545183","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false},{"bio":"可能是学生，可能是信息竞赛，可能是化学竞赛","isFollowing":false,"hash":"d019c14dd20ad8e447e52a9713a8c6ac","uid":864512170321383400,"isOrg":false,"slug":"dorence","isFollowed":false,"description":"","name":"dorence","profileUrl":"https://www.zhihu.com/people/dorence","avatar":{"id":"da8e974dc","template":"https://pic1.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false},{"bio":null,"isFollowing":false,"hash":"87f11640d0291cd71c2119c4b1fc7d87","uid":821117410542231600,"isOrg":false,"slug":"www-33-10-35-52","isFollowed":false,"description":"","name":"www","profileUrl":"https://www.zhihu.com/people/www-33-10-35-52","avatar":{"id":"296d2ec303fd7fa2a3be45526829788d","template":"https://pic2.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false}],"summary":"<img src=\"http://pic3.zhimg.com/v2-1e5d3a4c3b219c06ece25395cc3afc96_200x112.png\" data-rawwidth=\"1366\" data-rawheight=\"768\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"http://pic3.zhimg.com/v2-1e5d3a4c3b219c06ece25395cc3afc96_r.png\">前言之前听说了CodeCombat，很不错，适合Python入门。在官网上玩了几十关，发现它开放源码，经过一番折腾，终于搭建成功。官网教程：<a href=\"https://github.com/codecombat/codecombat/wiki/Dev-Setup:-Windows\" data-editable=\"true\" data-title=\"codecombat/codecombat\">codecombat/codecombat</a>工具<b><u>安装下面指定的版本，就不会出问题，运行不了就是版本问题！！！</u></b>安装Visual Studio 2015(其他版…","reviewingCommentsCount":0,"meta":{"previous":{"isTitleImageFullScreen":true,"rating":"none","titleImage":"https://pic1.zhimg.com/v2-1487f3ae06f150a78ea5e7e08e48f004_r.png","links":{"comments":"/api/posts/27108016/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"},{"url":"https://www.zhihu.com/topic/19583423","id":"19583423","name":"STL"},{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"}],"adminClosedComment":false,"href":"/api/posts/27108016","excerptTitle":"","author":{"bio":"专业研究野生技术","isFollowing":false,"hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"slug":"bajdcc","isFollowed":false,"description":"专业研究野生技术 https://github.com/bajdcc","name":"陈安","profileUrl":"https://www.zhihu.com/people/bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false},"column":{"slug":"learncpp","name":"学习C++"},"content":"<h1>第二章：字符串（一）</h1><h2>前言</h2><p>字符串存放的就是字符数组，简而言之，就是Vector&amp;lt;char&amp;gt;这样的类型。对数组的管理统统交给Vector类去实现。</p><p>本系列实验，编译器用GCC，IDE用Clion。</p><h2>代码</h2><p><b>由于知乎系统中的405错误，所以看代码请移步Github上的<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/learnstl/blob/master/code/02b/string.h\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">string.h<i class=\"icon-external\"></i></a>和<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/learnstl/blob/master/code/02b/vector.h\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">vector.h<i class=\"icon-external\"></i></a></b>。这个坑爹的bug<a href=\"https://www.zhihu.com/question/60126538\" class=\"internal\">知乎专栏的文章发表出现405错误是什么原因？ - 知乎</a>我已经提问过了，木有处理。</p><br><h2>介绍</h2><p><u>私有数据</u></p><ul><li><p>字符数组：Vector&amp;lt;T&amp;gt;</p></li></ul><p><u>公有方法</u></p><ul><li><p>构造函数</p><ul><li><p>无参</p></li><li><p>带裸指针，以\\0结尾</p></li><li><p>带填充字符及长度</p></li><li><p>拷贝构造</p></li></ul></li><li><p>Get方法</p><ul><li><p>字符串长度</p></li><li><p>裸指针</p></li><li><p>字符寻址</p></li></ul></li><li><p>Set方法</p><ul><li><p>用下标形式修改，如str[0] = 1</p></li></ul></li><li><p>常用方法</p><ul><li><p>运算符重载，参考标准库</p></li><li><p>compare比较函数</p></li><li><p>substr取子串，引申的left、mid、right方法</p></li><li><p>add添加字符</p></li><li><p>insert插入字符</p></li><li><p>remove删除指定位置的字符</p></li><li><p>erase清除指定字符</p></li><li><p>clear清空</p></li><li><p>reserve预留缓冲区空间</p></li><li><p>reverse翻转</p></li><li><p>split分割</p></li><li><p>find系列函数，此处略</p></li></ul></li></ul><br><h2>编写中出现的问题</h2><p><u><b>打印出多余字符</b></u></p><p>这是不论新手老手都会忽略的问题，当我们处理出内存的申请与释放后，字符串的修改可以有条不紊进行。然而，当我们要对字符串进行打印输出时，就忽略了字符串的终止符。所以恍然大悟：我并没有去考虑<b>终止符</b>！</p><p>这个问题比较难找，因为当输出一堆无关字符后，我会下意识认为内存管理出错了，然而并没有找到一丝问题。后面才想到终止符的问题。</p><p>那么我的设计是：当你每次修改完字符串后，就立马设置终止符\\0。操作包括：增加和删除。而字符串拷贝不必做，因为Vector初始化时当将所有内容置0。</p><p><u><b>常函数的问题</b></u></p><p>这个问题由上面的问题引申而来，当我们要设置\\0时，需要注意，\\0并不在字符串的有效范围中。由abc字符串，现在length是3，并不会包括终止符，因此只能采用开挂的方式解决。</p><p>按正常处理，当对Vector寻址时，它会做<b>越界检查</b>，因此这方法没用。如果只能用Vector的get_data取得裸指针，将其const属性去除掉，再进行修改。虽然说违反了一些规定，但实现没有办法。一者，我不希望弄个友元类；二者，如果不借助Vector去管内存，而是String类自己管，又会有一些代码重复的事出现。不过一般情况下不会有人用const_cast，就算人家想用，你怎么限制都是木有用的。假如我直接修改内存好了，那些private、const方法没有丝毫限制作用。</p><p><u><b>API设计的问题</b></u></p><p>关于String类的接口设计，代码中已经说明了，我搞一堆find系列函数就数起来有16个Orz，说不准加起来一堆有128个。。恨不等用宏去搞，然而宏又不便于调试。。</p><p>所以还是将replace和search独立开来，用专门的正则表达式类去实现。</p><h2>源码</h2><br><h2>代码中涉及的知识</h2><p>掌握等级：</p><ol><li><p>基础</p></li><li><p>进阶</p></li><li><p>高阶</p></li></ol><p>列表：</p><ul><li><p>C</p><ol><li><p>(Lv.1)ifndef宏</p></li><li><p>(Lv.1)include</p></li><li><p>(Lv.1)指针</p></li><li><p>(Lv.1)static</p></li><li><p>(Lv.1)sizeof</p></li><li><p>(Lv.1)移位 &amp;lt;&amp;lt;=</p></li><li><p>(Lv.2)calloc, free, realloc</p></li><li><p>(Lv.2)memcpy, memmove</p></li><li><p>(Lv.2)assert断言</p></li></ol></li><li><p>C++</p><ol><li><p>(Lv.1)数据与方法</p></li><li><p>(Lv.1)访问范围 public private</p></li><li><p>(Lv.1)const修饰</p></li><li><p>(Lv.1)auto</p></li><li><p>(Lv.2)引用</p></li><li><p>(Lv.2)运算符重载，包括下标、比较、四则、赋值、类型转换等，以及友元重载</p></li><li><p>(Lv.2)[C++11]委托构造函数</p></li><li><p>(Lv.2)[C++11]using别名</p></li><li><p>(Lv.3)类模版</p></li></ol></li></ul><h2>后续目标</h2><ol><li><p>用string来实现stream</p></li><li><p>实现正则表达式，这个有点难</p></li></ol>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":27108016,"publishedTime":"2017-05-25T16:48:57+08:00","url":"/p/27108016","title":"【STL】第二章：字符串（一）","summary":"第二章：字符串（一）前言字符串存放的就是字符数组，简而言之，就是Vector&amp;lt;char&amp;gt;这样的类型。对数组的管理统统交给Vector类去实现。本系列实验，编译器用GCC，IDE用Clion。代码<b>由于知乎系统中的405错误，所以看代码请移步Github上的<a href=\"https://github.com/bajdcc/learnstl/blob/master/code/02b/string.h\" data-editable=\"true\" data-title=\"string.h\" class=\"\">string.h</a>和<a href=\"https://github.com/bajdcc/learnstl/blob/master/code/02b/vector.h\" data-editable=\"true\" data-title=\"vector.h\" class=\"\">vector.h</a></b>。这…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":7,"likesCount":7},"next":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic2.zhimg.com/v2-65d6c08963ef17fcf6c2c4f38cefa2a9_r.png","links":{"comments":"/api/posts/27307738/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19593602","id":"19593602","name":"源码阅读"},{"url":"https://www.zhihu.com/topic/20007986","id":"20007986","name":"GacLib"},{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"}],"adminClosedComment":false,"href":"/api/posts/27307738","excerptTitle":"","author":{"bio":"专业研究野生技术","isFollowing":false,"hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"slug":"bajdcc","isFollowed":false,"description":"专业研究野生技术 https://github.com/bajdcc","name":"陈安","profileUrl":"https://www.zhihu.com/people/bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false},"column":{"slug":"learncpp","name":"学习C++"},"content":"<h2>前言</h2><p>重新拜读轮大写的C++库，提升自身水平，如有错误请提出。另：代码在<a href=\"http://link.zhihu.com/?target=https%3A//github.com/vczh-libraries/Vlpp\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">vczh-libraries/Vlpp<i class=\"icon-external\"></i></a>。</p><p>自己写的库毕竟疏漏很多，在前面的文章中，除开第一次提交，就目前为止我起码发现了5个错误，所以跟理想还是差得远。想实现perfect的库就必须再花很多时间，对代码不断打磨，但是做到能用就不错了，达到perfect是异想天开。因此，暂时开启源码阅读系列，没错，本专栏第一篇的标准库目录我是参照了Gaclib的(有野心没能力哈哈)，现在想想<b><u>还是要读大佬的代码</u></b>！</p><h2>简要介绍Vlpp</h2><p>打开<a href=\"http://link.zhihu.com/?target=https%3A//github.com/vczh-libraries/Vlpp/tree/master/Source\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">vczh-libraries/Vlpp<i class=\"icon-external\"></i></a>，分析目录列表，我们发现了几个模块：</p><ul><li>Collections，泛型集合及枚举器</li><li>Parsing，LR文法分析</li><li>Reflection，反射</li><li>Regex，正则表达式</li><li>Stream，流</li></ul><p>那后面的文章大致就从上面这几部分来介绍。介绍完后，再接着阅读<a href=\"http://link.zhihu.com/?target=https%3A//github.com/vczh-libraries/GacUI\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">vczh-libraries/GacUI<i class=\"icon-external\"></i></a>的源码。</p><h2>集合的实现</h2><p>我自己写的vector库只是一个简单的内存管理类而已，太精简，木有其他功能，所以为了节省时间，就以Vlpp这个库为例，大家要用就用大佬写的代码。</p><p>先查看<a href=\"http://link.zhihu.com/?target=https%3A//github.com/vczh-libraries/Vlpp/blob/master/Source/Collections/List.h\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/vczh-librari</span><span class=\"invisible\">es/Vlpp/blob/master/Source/Collections/List.h</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>：</p><ul><li>ListStore&amp;lt;T,PODType&amp;gt;\t\t\t\t：列表存储复制算法，PODType这个参数是亮点<br></li><li>\tListBase&amp;lt;T,K&amp;gt;\t\t\t\t\t\t：列表基类</li><li>\tArray&amp;lt;T,K&amp;gt;\t\t\t\t\t\t\t：数组</li><li>\tList&amp;lt;T,K&amp;gt;\t\t\t\t\t\t\t：列表</li><li>\tSortedList&amp;lt;T,K&amp;gt;\t\t\t\t\t\t：有序列表</li></ul><p>平常写的list或是vector，都只有一个模版参数，可是这里有两个，这是为什么？</p><p>K究竟是何方神圣？</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>template&amp;lt;typename T, bool PODType&amp;gt;\nclass ListStore abstract : public Object\n{\n};\n</code></pre></div><p>问题接踵而至：PODType是什么？</p><p>我们进去<a href=\"http://link.zhihu.com/?target=https%3A//github.com/vczh-libraries/Vlpp/blob/master/Source/Basic.h\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/vczh-librari</span><span class=\"invisible\">es/Vlpp/blob/master/Source/Basic.h</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>看：</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>/// &amp;lt;summary&amp;gt;Test is a type a Plain-Old-Data type for containers.&amp;lt;/summary&amp;gt;\n/// &amp;lt;typeparam name=\"T\"&amp;gt;The type to test.&amp;lt;/typeparam&amp;gt;\ntemplate&amp;lt;typename T&amp;gt;\nstruct POD\n{\n\t/// &amp;lt;summary&amp;gt;Returns true if the type is a Plain-Old-Data type.&amp;lt;/summary&amp;gt;\n\tstatic const bool Result=false;\n};\n\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;bool&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;vint8_t&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;vuint8_t&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;vint16_t&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;vuint16_t&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;vint32_t&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;vuint32_t&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;vint64_t&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;vuint64_t&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;char&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;&amp;gt;struct POD&amp;lt;wchar_t&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;typename T&amp;gt;struct POD&amp;lt;T*&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;typename T&amp;gt;struct POD&amp;lt;T&amp;amp;&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;typename T, typename C&amp;gt;struct POD&amp;lt;T C::*&amp;gt;{static const bool Result=true;};\ntemplate&amp;lt;typename T, vint _Size&amp;gt;struct POD&amp;lt;T[_Size]&amp;gt;{static const bool Result=POD&amp;lt;T&amp;gt;::Result;};\ntemplate&amp;lt;typename T&amp;gt;struct POD&amp;lt;const T&amp;gt;{static const bool Result=POD&amp;lt;T&amp;gt;::Result;};\ntemplate&amp;lt;typename T&amp;gt;struct POD&amp;lt;volatile T&amp;gt;{static const bool Result=POD&amp;lt;T&amp;gt;::Result;};\ntemplate&amp;lt;typename T&amp;gt;struct POD&amp;lt;const volatile T&amp;gt;{static const bool Result=POD&amp;lt;T&amp;gt;::Result;};\n</code></pre></div><p>一脸蒙，POD里面有个Result，然而POD有许多特化，上面这些全是true，我的理解是对于像基本类型这样的POD，POD中的Result为true，其他为false。</p><p>这里明白了，ListStore多了个模版参数是为了鉴别POD的。</p><h2>列表存储复制算法（区分POD）</h2><p><i><u>06/09更新</u></i></p><p>ListStore将<u>分别管理</u>struct(POD)和class(非POD，有this指针)。<br></p><p>也就是ListStore&amp;lt;T,<b>false</b>&amp;gt;，ListStore第二个参数K<b>特化</b>，<u>为了专门管理对象而非结构体</u>，这个方法很好：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">template</span><span class=\"o\">&amp;lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&amp;gt;</span>\n<span class=\"k\">class</span> <span class=\"nc\">ListStore</span><span class=\"o\">&amp;lt;</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"nb\">false</span><span class=\"o\">&amp;gt;</span> <span class=\"nl\">abstract</span> <span class=\"p\">:</span> <span class=\"k\">public</span> <span class=\"n\">Object</span>\n<span class=\"p\">{</span>\n<span class=\"k\">protected</span><span class=\"o\">:</span>\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">InitializeItemsByDefault</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">vint</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">dst</span><span class=\"p\">;</span>\n\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">vint</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">count</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"k\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;amp;</span><span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span><span class=\"n\">T</span><span class=\"p\">();</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">InitializeItemsByMove</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">vint</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">dst</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">ss</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">src</span><span class=\"p\">;</span>\n\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">vint</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">count</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"k\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;amp;</span><span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span><span class=\"n\">T</span><span class=\"p\">(</span><span class=\"n\">MoveValue</span><span class=\"p\">(</span><span class=\"n\">ss</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]));</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">InitializeItemsByCopy</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">vint</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">dst</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">ss</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">src</span><span class=\"p\">;</span>\n\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">vint</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">count</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"k\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;amp;</span><span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span><span class=\"n\">T</span><span class=\"p\">(</span><span class=\"n\">ss</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">MoveItemsInTheSameBuffer</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">vint</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">dst</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">ss</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">src</span><span class=\"p\">;</span>\n\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ds</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">ss</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">vint</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">count</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t\t<span class=\"p\">{</span>\n\t\t\t\t<span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">MoveValue</span><span class=\"p\">(</span><span class=\"n\">ss</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ds</span> <span class=\"o\">&amp;gt;</span> <span class=\"n\">ss</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">vint</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">)</span>\n\t\t\t<span class=\"p\">{</span>\n\t\t\t\t<span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">MoveValue</span><span class=\"p\">(</span><span class=\"n\">ss</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">ReleaseItems</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">vint</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">dst</span><span class=\"p\">;</span>\n\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">vint</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;lt;</span> <span class=\"n\">count</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">();</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">AllocateBuffer</span><span class=\"p\">(</span><span class=\"n\">vint</span> <span class=\"n\">size</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">size</span> <span class=\"o\">&amp;lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">size</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">DeallocateBuffer</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">buffer</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">buffer</span> <span class=\"o\">==</span> <span class=\"k\">nullptr</span><span class=\"p\">)</span><span class=\"k\">return</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>上面的代码涉及了一些内容：new(&amp;amp;ds[i])T(ss[i])、MoveValue(ss[i])、ds[i].~T()这些都好陌生啊！</p><p>一个个来，第一个，placement new，涉及<a href=\"http://link.zhihu.com/?target=http%3A//blog.csdn.net/zhangxinrun/article/details/5940019\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">C++中placement new操作符（经典）<i class=\"icon-external\"></i></a>，我先前的vector是只管内存的，不管对象的析构，那么现在对象的创建我已经完成了，这是内存地址ptr，我要在ptr上创建对象，而不是重新new块内存，那就可以用这个特性，new(ptr) T。</p><p>第二个，涉及右值引用，老实说这里我也很晕，还有引用折叠等概念，反正好处是不用一次次拷贝同一个的对象了。</p><p>第三个，就是主动调用析构。</p><p>================================</p><p>管理POD，即简单的内存管理：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">template</span><span class=\"o\">&amp;lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&amp;gt;</span>\n<span class=\"k\">class</span> <span class=\"nc\">ListStore</span><span class=\"o\">&amp;lt;</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"o\">&amp;gt;</span> <span class=\"nl\">abstract</span> <span class=\"p\">:</span> <span class=\"k\">public</span> <span class=\"n\">Object</span>\n<span class=\"p\">{</span>\n<span class=\"k\">protected</span><span class=\"o\">:</span>\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">InitializeItemsByDefault</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">vint</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">InitializeItemsByMove</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">vint</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">&amp;gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">count</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">InitializeItemsByCopy</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">vint</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">&amp;gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">count</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">MoveItemsInTheSameBuffer</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">vint</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">&amp;gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"n\">memmove</span><span class=\"p\">(</span><span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">count</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">ReleaseItems</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">vint</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">AllocateBuffer</span><span class=\"p\">(</span><span class=\"n\">vint</span> <span class=\"n\">size</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">size</span> <span class=\"o\">&amp;lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">size</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">DeallocateBuffer</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">buffer</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">buffer</span> <span class=\"o\">==</span> <span class=\"k\">nullptr</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n<span class=\"p\">};</span>\n</code></pre></div><br><h2>其他几个类</h2><p>ArrayBase比较常规，对于越界错误直接报错，不过里面多了个枚举器Enumerator 。</p><p>Array：继承了最上面的内存管理类。</p><p>ListBase：这里面主要是动态扩容，即内存不够了要增加空间，这里的算法是result = result * 5 / 4 + 1。还设置了lessMemoryMode模式，启用时当list的size减少，会自动释放先前申请的多余空间。</p><p>List：最终的list，实现CURD。<br></p><p>SortedList：与list不同，用于二分查找，插入时会保证数组有序。<br></p><p>我的vector实现差不多是按照上面做的，最多是内存扩容方法不一样，然而还是有人不看代码就说效率低、说实现渣，我也不想辩解。</p>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":27307738,"publishedTime":"2017-06-08T16:42:29+08:00","url":"/p/27307738","title":"【Vlpp源码阅读】集合篇（一）","summary":"前言重新拜读轮大写的C++库，提升自身水平，如有错误请提出。另：代码在<a href=\"https://github.com/vczh-libraries/Vlpp\" data-editable=\"true\" data-title=\"vczh-libraries/Vlpp\">vczh-libraries/Vlpp</a>。自己写的库毕竟疏漏很多，在前面的文章中，除开第一次提交，就目前为止我起码发现了5个错误，所以跟理想还是差得远。想实现perfect的库就必须再花很多时间，对代…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":22}},"annotationDetail":null,"commentsCount":1,"likesCount":12,"FULLINFO":true}},"User":{"bajdcc":{"isFollowed":false,"name":"陈安","headline":"专业研究野生技术 https://github.com/bajdcc","avatarUrl":"https://pic4.zhimg.com/v2-cd6d61ad9ef94c41b9e77f8e0f727893_s.jpg","isFollowing":false,"type":"people","slug":"bajdcc","bio":"专业研究野生技术","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","profileUrl":"https://www.zhihu.com/people/bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false,"badge":{"identity":null,"bestAnswerer":null}}},"Comment":{},"favlists":{}},"me":{},"global":{},"columns":{"next":{},"learncpp":{"following":false,"canManage":false,"href":"/api/columns/learncpp","name":"学习C++","creator":{"slug":"bajdcc"},"url":"/learncpp","slug":"learncpp","avatar":{"id":"v2-bf63794c542fc73b11e17014b7e0d01d","template":"https://pic2.zhimg.com/{id}_{size}.jpg"}}},"columnPosts":{},"columnSettings":{"colomnAuthor":[],"uploadAvatarDetails":"","contributeRequests":[],"contributeRequestsTotalCount":0,"inviteAuthor":""},"postComments":{},"postReviewComments":{"comments":[],"newComments":[],"hasMore":true},"favlistsByUser":{},"favlistRelations":{},"promotions":{},"switches":{"couldAddVideo":false},"draft":{"titleImage":"","titleImageSize":{},"isTitleImageFullScreen":false,"canTitleImageFullScreen":false,"title":"","titleImageUploading":false,"error":"","content":"","draftLoading":false,"globalLoading":false,"pendingVideo":{"resource":null,"error":null}},"drafts":{"draftsList":[],"next":{}},"config":{"userNotBindPhoneTipString":{}},"recommendPosts":{"articleRecommendations":[],"columnRecommendations":[]},"env":{"isAppView":false,"appViewConfig":{"content_padding_top":128,"content_padding_bottom":56,"content_padding_left":16,"content_padding_right":16,"title_font_size":22,"body_font_size":16,"is_dark_theme":false,"can_auto_load_image":true,"app_info":"OS=iOS"},"isApp":false},"sys":{}}</textarea>

    
    <script src="//static.zhihu.com/hemingway/common.91b038e1bfdd343c17b1.js"></script>
<script src="//static.zhihu.com/hemingway/app.c97bc6d7df9ba310a52c.js"></script>
<script src="//static.zhihu.com/hemingway/raven.58b55ef131892b91fa07.js" async defer></script>
  </body>
</html>
