<!doctype html>
<html lang="zh-CN" class="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>【NOI】9272 偶数个三 - 知乎专栏</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link rel="shortcut icon" href="https://static.zhihu.com/static/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="//static.zhihu.com/hemingway/app.697838bb2e80a05fbcead68b45e858df.css" />
    <style></style>
    <script>document.documentElement.className += ('ontouchstart' in window) ? ' touch' : ' no-touch'</script>
  </head>
  <body>

    <div id="react-root"></div>
    <textarea id="clientConfig" hidden>{"debug":false,"apiRoot":"","paySDK":"https://pay.zhihu.com/api/js","wechatConfigAPI":"/api/wechat/jssdkconfig","name":"production","instance":"column","tokens":{"X-XSRF-TOKEN":"2|ea5faefc|d47f320d6157ef90cad32e77e53cc6a7|1502542350","X-UDID":null,"Authorization":"oauth c3cef7c66a1843f8b3a9e6a1e3160e20"}}</textarea>
    <textarea id="preloadedState" hidden>{"database":{"Post":{"27915133":{"title":"【NOI】9272 偶数个三","author":"bajdcc","content":"<h2>题目</h2><p>链接：<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/ACM/blob/master/noi/9272/%25E5%2581%25B6%25E6%2595%25B0%25E4%25B8%25AA%25E4%25B8%2589.md\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/ACM<i class=\"icon-external\"></i></a></p><h2>描述</h2><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>在所有的N位数中，有多少个数中有偶数个数字3？结果模12345。(1&amp;lt;=N&amp;lt;=10000)\n</code></pre></div><h2>样例输入</h2><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>2\n</code></pre></div><h2>样例输出</h2><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>73\n</code></pre></div><h2>方法一：穷举</h2><p>评价：<b>最简单又是效率最低的方法。</b></p><p>缺陷：N很大时，用来遍历的i用long long就放不下了，gg。但是首先，你要耐心等到long long溢出。耗时就不算了，太慢。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&amp;lt;iostream&amp;gt;</span><span class=\"cp\"></span>\n\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#define LL long long</span>\n<span class=\"cp\">#define NUM 3</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"n\">LL</span> <span class=\"n\">m</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">count</span><span class=\"p\">;</span>\n\t<span class=\"n\">cin</span><span class=\"o\">&amp;gt;&amp;gt;</span><span class=\"n\">n</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">m</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&amp;lt;</span><span class=\"n\">n</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">m</span><span class=\"o\">*=</span><span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"c1\">// 求N位数上界 </span>\n\t<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">m</span><span class=\"o\">/</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&amp;lt;</span><span class=\"n\">m</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 从10..000 ~ 99..999</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">;</span><span class=\"n\">t</span><span class=\"p\">;</span><span class=\"n\">t</span><span class=\"o\">/=</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"c1\">// 取每一位 </span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">%</span><span class=\"mi\">10</span><span class=\"o\">==</span><span class=\"n\">NUM</span><span class=\"p\">)</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"c1\">// 如果是NUM计数j加一 </span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">%</span><span class=\"mi\">2</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t    <span class=\"n\">count</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"c1\">// 偶数个NUM计数count加一</span>\n\t\t    <span class=\"n\">count</span><span class=\"o\">%=</span><span class=\"mi\">12345</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">cout</span><span class=\"o\">&amp;lt;&amp;lt;</span><span class=\"n\">count</span><span class=\"p\">;</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>方法二：递推</h2><p>穷举法有着天生的缺陷：遍历的i范围有限，除非用高精度才能避免。</p><p>进一步思考，将题目改为“有多少个数中有偶数个4”，结果记为N4。那么我想N4应该跟N3是一样的，对称性嘛。证明：对应每个数中有偶数个3的数，我都可以找到相应的数，只要将原数中的3跟4对调下即可，比如133242，调下变144232，欧了。当然了，想到这个结论然并卵，我们目前只证得N1~N9是相等的，理所应当，假如知道了N1~N9的和，那只要平均下就能得出结果。然而还是手足无措，那就用递推来想想。</p><p>假如目前有数6XXXXX，以6开头的符合条件的数有多少呢？好吧，无视6，得出f(6XXXXX)=f(XXXXX)，因为6根本没必要算进去嘛，欧了！我们发现一个重要结论：有些子问题是重复的！所以无脑穷举法太慢的原因就是计算了重复的子问题。好吧，现在来找找哪些是重复的子问题。</p><p>设下函数f(n)和g(n)，n是位数，f表示有偶数个3的总数，g表示有奇数个3的总数。从一位数开始，0不算，f(1)=8,g(1)=1，只要看有没有3就行了。</p><p>现在是N位数XY，想一想，如果Y有奇数个3同时X有奇数个3，那么f函数欧了；如果Y有偶数个3同时X有偶数个3，那么f函数欧了。如果Y有奇数个3同时X有偶数个3，那么g函数欧了；如果Y有偶数个3同时X有奇数个3，那么g函数欧了。最后，我们将X定为最高一位，Y定为后N-1位，用来递推，这样的话X就不能是0，这就决定了f(1)=8而不是9，说到底，0还是要考虑到，不过是作为后n-1位了，体现在下面推导式右边的乘数9上。</p><p>有点思路了，现在把f和g的推导式写出来。边界：f(1)=8,g(1)=1。如果第n位是3，那么加上g(n-1)；如果第n位不是3，那么加上9*f(n-1)，因为不是3的话有9种可能，乘法原理。</p><p>整理下：</p><ul><li><b>f(1)=8,g(1)=1</b></li><li><b>f(n)=g(n-1)+9*f(n-1)</b></li><li><b>g(n)=f(n-1)+9*g(n-1)</b></li></ul><p>书写代码：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&amp;lt;iostream&amp;gt;</span><span class=\"cp\"></span>\n\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">g</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">);</span>\n<span class=\"kt\">int</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"n\">n</span><span class=\"o\">==</span><span class=\"mi\">1</span><span class=\"o\">?</span><span class=\"mi\">8</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">9</span><span class=\"o\">*</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">%</span><span class=\"mi\">12345</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">g</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"n\">n</span><span class=\"o\">==</span><span class=\"mi\">1</span><span class=\"o\">?</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">9</span><span class=\"o\">*</span><span class=\"n\">g</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">%</span><span class=\"mi\">12345</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n\t<span class=\"n\">cin</span><span class=\"o\">&amp;gt;&amp;gt;</span><span class=\"n\">n</span><span class=\"p\">;</span>\n\t<span class=\"n\">cout</span><span class=\"o\">&amp;lt;&amp;lt;</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>运行速度明显快多了。</p><h2>方法三：动态规划</h2><p>方法二还是需要改进，f和g函数有重复的递归调用，当然可以用<b>记忆化</b>去搞定。这里既然有了递推式，<b>状态转移方程</b>就呼之欲出了，方法二中已写出。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&amp;lt;iostream&amp;gt;</span><span class=\"cp\"></span>\n\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"mi\">10002</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span><span class=\"c1\">//f[][0]=偶数个3，f[][1]=奇数个3 </span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n\t<span class=\"n\">cin</span><span class=\"o\">&amp;gt;&amp;gt;</span><span class=\"n\">n</span><span class=\"p\">;</span>\n\t<span class=\"n\">f</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&amp;lt;=</span><span class=\"n\">n</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"o\">*</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">%</span><span class=\"mi\">12345</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mi\">9</span><span class=\"o\">*</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">%</span><span class=\"mi\">12345</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">cout</span><span class=\"o\">&amp;lt;&amp;lt;</span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>方法四：打表法</h2><p>略。</p><h2>方法五：公式法</h2><p>没想到吧，这也能用公式做！Fibonacci数列也是有通项公式的，但是要怎么求呢？（当然参照书上的）</p><p><br></p><noscript><img src=\"https://pic3.zhimg.com/v2-f95a8addc9a192fb3a613e7daa03d402_b.png\" data-rawwidth=\"1654\" data-rawheight=\"2598\" class=\"origin_image zh-lightbox-thumb\" width=\"1654\" data-original=\"https://pic3.zhimg.com/v2-f95a8addc9a192fb3a613e7daa03d402_r.png\"></noscript><img src=\"//zhstatic.zhihu.com/assets/zhihu/ztext/whitedot.jpg\" data-rawwidth=\"1654\" data-rawheight=\"2598\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1654\" data-original=\"https://pic3.zhimg.com/v2-f95a8addc9a192fb3a613e7daa03d402_r.png\" data-actualsrc=\"https://pic3.zhimg.com/v2-f95a8addc9a192fb3a613e7daa03d402_b.png\"><p>书写代码：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&amp;lt;iostream&amp;gt;</span><span class=\"cp\"></span>\n\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#define MOD 12345</span>\n\n<span class=\"c1\">// 快速幂取模 </span>\n<span class=\"kt\">int</span> <span class=\"nf\">fast</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">mod</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">aa</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    \t<span class=\"c1\">//取N的二进制位，是一则乘上相应幂并求余 </span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">N</span> <span class=\"o\">&amp;amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">*</span> <span class=\"n\">aa</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">mod</span><span class=\"p\">;</span>\n        <span class=\"n\">N</span> <span class=\"o\">&amp;gt;&amp;gt;=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">aa</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">aa</span> <span class=\"o\">*</span> <span class=\"n\">aa</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">mod</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">r</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 快速幂取模（2为底） </span>\n<span class=\"kt\">int</span> <span class=\"nf\">fast2</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">mod</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">static</span> <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1LL</span><span class=\"o\">&amp;lt;&amp;lt;</span><span class=\"mi\">62</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">mod</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"n\">N</span><span class=\"o\">%</span><span class=\"mi\">62</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"n\">N</span><span class=\"o\">/</span><span class=\"mi\">62</span><span class=\"p\">;</span><span class=\"c1\">// 2^N=2^s*a^t</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1LL</span><span class=\"o\">&amp;lt;&amp;lt;</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">mod</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">&amp;gt;</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">r</span> <span class=\"o\">*=</span> <span class=\"n\">fast</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">mod</span><span class=\"p\">);</span><span class=\"c1\">// 2^s*a^t % mod</span>\n\t\t<span class=\"n\">r</span> <span class=\"o\">%=</span> <span class=\"n\">mod</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">r</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n\t<span class=\"n\">cin</span><span class=\"o\">&amp;gt;&amp;gt;</span><span class=\"n\">n</span><span class=\"p\">;</span>\n\t<span class=\"c1\">//化简：</span>\n\t<span class=\"c1\">// an=1/2*{7*2^(3n-3)+9*2^(n-1)*5^(n-1)}</span>\n\t<span class=\"c1\">// an=2^(n-2)*{9*5^(n-1)+7*2^(2n-2)} </span>\n\t<span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">fast2</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">MOD</span><span class=\"p\">);</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">&amp;lt;&amp;lt;</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">ans</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"o\">*</span><span class=\"n\">fast</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">MOD</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">7</span><span class=\"o\">*</span><span class=\"p\">((</span><span class=\"n\">b</span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">MOD</span><span class=\"p\">));</span>\n\t<span class=\"n\">ans</span><span class=\"o\">%=</span><span class=\"n\">MOD</span><span class=\"p\">;</span>\n\t<span class=\"n\">cout</span><span class=\"o\">&amp;lt;&amp;lt;</span><span class=\"n\">ans</span><span class=\"o\">&amp;lt;&amp;lt;</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>可以看出，为了优化，代码显得不怎么美观，如果题目不要求精确值的话，那么用浮点数以及pow我想应该可以让速度再快一点。</p><p>比较而言，其实<b>动态规划法是最简洁且高效的</b>。</p><h2>总结</h2><p>一个题目，多种方法，其实从本质而言，以计算机的思维做，自然是DP，以数学家的思维做，就是推导通项公式。然而，通项公式中有幂，让计算机做本质上也不高效。</p><p>从多线程优化的角度来看，DP法的本质是一层层递推的计算，后者依赖前者，计算并不独立，不能分解成小任务，最快就是O(n)。而公式法本质就是求幂，而求幂也存在依赖关系，且子问题都相同，没必要分割。穷举法倒可以保证子任务的独立性，不过计算量还是很大，当且仅当没有其他好方法的时候用。</p><p>公式法推导很复杂，耗时间，因此，用动态规划法是绝佳的。</p>","updated":"2017-07-16T08:08:28.000Z","canComment":false,"commentPermission":"anyone","commentCount":7,"collapsedCount":0,"likeCount":31,"state":"published","isLiked":false,"slug":"27915133","isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic1.zhimg.com/v2-b60dd44ba1e2c80515dc9bb0110fd894_r.png","links":{"comments":"/api/posts/27915133/comments"},"reviewers":[],"topics":[{"url":"https://www.zhihu.com/topic/19584970","id":"19584970","name":"C++"},{"url":"https://www.zhihu.com/topic/19636864","id":"19636864","name":"NOI"},{"url":"https://www.zhihu.com/topic/19625716","id":"19625716","name":"算法与数据结构"}],"adminClosedComment":false,"titleImageSize":{"width":1280,"height":720},"href":"/api/posts/27915133","excerptTitle":"","tipjarState":"inactivated","annotationAction":[],"sourceUrl":"","pageCommentsCount":7,"hasPublishingDraft":false,"snapshotUrl":"","publishedTime":"2017-07-16T16:08:28+08:00","url":"/p/27915133","lastestLikers":[{"bio":"信息管理","isFollowing":false,"hash":"0e157392c9819ec21b57103a47a0a48c","uid":768479975958417400,"isOrg":false,"slug":"ma-cheng-cheng-58","isFollowed":false,"description":"renascence","name":"我心永恒","profileUrl":"https://www.zhihu.com/people/ma-cheng-cheng-58","avatar":{"id":"f9f032ac6c44da2d2cd990d0af974c2b","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false},{"bio":"小白程序员","isFollowing":false,"hash":"1e59d51aca246ea3882ac8c3953be34b","uid":754702249229291500,"isOrg":false,"slug":"mymyt1998","isFollowed":false,"description":"","name":"闲弦","profileUrl":"https://www.zhihu.com/people/mymyt1998","avatar":{"id":"v2-8d5f24365f650bec5da52efe1552acb6","template":"https://pic3.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false},{"bio":"学生，计算机科学与技术","isFollowing":false,"hash":"36a61798ac5eacb9555f81fa5313b129","uid":28485191991296,"isOrg":false,"slug":"i_unlimited","isFollowed":false,"description":"无干货/昧着良心说真话/最厉害的武器是习惯","name":"unlimited","profileUrl":"https://www.zhihu.com/people/i_unlimited","avatar":{"id":"9668f3211","template":"https://pic2.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false},{"bio":"码农&amp;gt;日常潜水","isFollowing":false,"hash":"b1deaf0c5e207ed7f08d8be33b9d244a","uid":77710512619520,"isOrg":false,"slug":"yao-tian-jia","isFollowed":false,"description":"","name":"佳族CIC","profileUrl":"https://www.zhihu.com/people/yao-tian-jia","avatar":{"id":"v2-5fe6f05e524a95e05b56f9d374f45fee","template":"https://pic3.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false},{"bio":"喜欢有趣的人;","isFollowing":false,"hash":"34e5299cfc35a242beb23f33ab791790","uid":856566879085535200,"isOrg":false,"slug":"shi-liu-ye-91-36","isFollowed":false,"description":"不会正常沟通的一律拉黑","name":"十六夜","profileUrl":"https://www.zhihu.com/people/shi-liu-ye-91-36","avatar":{"id":"v2-806c337ce6ecd6faf4454a60f83ef561","template":"https://pic2.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false}],"summary":"<img src=\"http://pic3.zhimg.com/v2-f95a8addc9a192fb3a613e7daa03d402_200x112.png\" data-rawwidth=\"1654\" data-rawheight=\"2598\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"http://pic3.zhimg.com/v2-f95a8addc9a192fb3a613e7daa03d402_r.png\">题目链接：<a href=\"https://github.com/bajdcc/ACM/blob/master/noi/9272/%E5%81%B6%E6%95%B0%E4%B8%AA%E4%B8%89.md\">bajdcc/ACM</a>描述在所有的N位数中，有多少个数中有偶数个数字3？结果模12345。(1&amp;lt;=N&amp;lt;=10000)\n样例输入2\n样例输出73\n方法一：穷举评价：<b>最简单又是效率最低的方法。</b>缺陷：N很大时，用来遍历的i用long long就放不下了，gg。但是首先，你要耐心等到lon…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"annotationDetail":null,"commentsCount":7,"likesCount":31,"FULLINFO":true}},"User":{"bajdcc":{"isFollowed":false,"name":"陈安","headline":"专业研究野生技术 https://github.com/bajdcc","avatarUrl":"https://pic4.zhimg.com/v2-cd6d61ad9ef94c41b9e77f8e0f727893_s.jpg","isFollowing":false,"type":"people","slug":"bajdcc","bio":"专业研究野生技术","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","profileUrl":"https://www.zhihu.com/people/bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false,"badge":{"identity":null,"bestAnswerer":null}}},"Comment":{},"favlists":{}},"me":{},"global":{},"columns":{"next":{}},"columnPosts":{},"columnSettings":{"colomnAuthor":[],"uploadAvatarDetails":"","contributeRequests":[],"contributeRequestsTotalCount":0,"inviteAuthor":""},"postComments":{},"postReviewComments":{"comments":[],"newComments":[],"hasMore":true},"favlistsByUser":{},"favlistRelations":{},"promotions":{},"switches":{"couldAddVideo":false},"draft":{"titleImage":"","titleImageSize":{},"isTitleImageFullScreen":false,"canTitleImageFullScreen":false,"title":"","titleImageUploading":false,"error":"","content":"","draftLoading":false,"globalLoading":false,"pendingVideo":{"resource":null,"error":null}},"drafts":{"draftsList":[],"next":{}},"config":{"userNotBindPhoneTipString":{}},"recommendPosts":{"articleRecommendations":[],"columnRecommendations":[]},"env":{"isAppView":false,"appViewConfig":{"content_padding_top":128,"content_padding_bottom":56,"content_padding_left":16,"content_padding_right":16,"title_font_size":22,"body_font_size":16,"is_dark_theme":false,"can_auto_load_image":true,"app_info":"OS=iOS"},"isApp":false},"sys":{}}</textarea>

    
    <script src="//static.zhihu.com/hemingway/common.91b038e1bfdd343c17b1.js"></script>
<script src="//static.zhihu.com/hemingway/app.c97bc6d7df9ba310a52c.js"></script>
<script src="//static.zhihu.com/hemingway/raven.58b55ef131892b91fa07.js" async defer></script>
  </body>
</html>
