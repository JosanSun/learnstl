<!doctype html>
<html lang="zh-CN">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>【游戏框架系列】有模有样 - 知乎专栏</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link rel="shortcut icon" href="https://static.zhihu.com/static/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="//static.zhihu.com/hemingway/app.ad2159a596c8458712d70cf5a5b17235.css" />
    <script>document.documentElement.className += ('ontouchstart' in window) ? ' touch' : ' no-touch'</script>
  </head>
  <body>

    <div id="react-root"></div>
    <textarea id="clientConfig" hidden>{"debug":false,"apiRoot":"","paySDK":"https://pay.zhihu.com/api/js","name":"production","instance":"column","tokens":{"X-XSRF-TOKEN":null,"X-UDID":null,"Authorization":"oauth c3cef7c66a1843f8b3a9e6a1e3160e20"}}</textarea>
    <textarea id="preloadedState" hidden>{"database":{"Post":{"25284597":{"title":"【游戏框架系列】有模有样","author":"bajdcc","content":"经过又一番折腾之后，一个像样的界面就做出来了。<p>期间遇到一些坑爹的问题。比如lua实现继承的时候出现的问题，假如B继承自A，A有数组children，那B的children也是继承自A的，问题在于：新建A，使得A.children=2，那么再新建个B，B.children竟然也是2，但是只要在B的构造函数当中将children重置即可，然而我最终并非查清是哪里出错了。lua实现oop问题重重，好在已经解决了。</p><h2>浅说布局</h2><p>到现在为止，实现的布局不多，只有两种：</p><ol><li>绝对布局</li><li>线性布局</li></ol><p>绝对布局不用说。线性布局的话，它会按垂直或水平方向平均分布各成员，比如按钮组就需要用到它。</p><p>当然，还有一些其他的布局，如Grid布局、相对布局、表格布局等，但是实现难度较高，且都是适用于静态元素的。假如要设计针对2D的游戏框架，那么以贪吃蛇为例，它的身体是不断运动的，即元素的位置不停发生变化，因此只能使用绝对布局。</p><p>一些界面，比如登录框、用户信息等适用于静态布局，元素少些还好说，像是大容量的表格布局，就比较麻烦了。一般来说，表格的信息不会全部显示，那么可以把暂时在屏幕之外的那些元素给回收掉，到用的时候再创建；第二种思路，不回收，将屏幕外的元素保存，只将内容改动即可。</p><p>HTML上的布局可多了，因此它的渲染引擎更复杂，我们只能实现简单的、够用的布局就足够了。</p><p>布局无非就是收到<b>大小改变</b>消息后，需要对它的成员重新计算大小。计算大小的方法其实大同小异，没什么特殊的，难就难在要考虑的东西多。</p><p>有了布局后，再谈谈布局里面的控件</p><h2>浅说控件</h2>常见的控件多了去了，有按钮、文本框、滚动条、图片、单选多选框等。要实现每一种，需要考虑到：<ol><li>与操作系统的交互。文本框：如何收到用户输入？滚动条：如何知晓鼠标滚动？按钮：如何感觉到鼠标被单击？</li><li>状态的改变。文本框：当前的输入内容？按钮：是否处于按下状态？</li><li>发生重绘。根据上一状态和操作系统反馈来的消息，确定当前状态，并重绘整个控件。</li></ol><p>因此，难点有很多：控件与底层的交互、控件状态的设计、控件的绘制逻辑。绘制是最难的，win7的progressbar动画就可以难倒很多人了。</p><p>不过，从简单做起，我们实现了最简单、最经典的控件——按钮。</p><p>不要小看按钮，它涉及的地方很多：接收用户输入消息、响应用户输入、显示当前状态。</p><p>当鼠标点击按钮的时候，按钮会有一个响应，那就是“被按下”，同时，它会发出一个消息“按钮被按下”。按钮的绘制也很经典：一个纯色块背景，一个文字前景。纯色块就是绘矩形，另一个是绘文字。想一想，只要完成这两种，俄罗斯方块就可以做出来了。</p><p>绘矩形相关的有：需要一个笔刷，有的需要线刷（GDI）。画矩形要考虑：线条粗细、矩形大小、线条和填充颜色。</p><p>绘文字比较麻烦一点：GDI的话要创建字体、线刷；D2D要创建文字布局（居中还是靠边）、设置格式（文字大小、字体、粗细、对齐）等。文字最讲究一个格式，像绘制富文本就更加困难了。</p><p>两样都完成后，就可以绘制按钮了。按钮包含两样：背景色和文字。因此按钮就是一个布局，对背景色和文字的包装。</p><p>看一段lua代码：</p><div class=\"highlight\"><pre><code class=\"language-lua\"><span></span><span class=\"k\">function</span> <span class=\"nf\">M</span><span class=\"p\">:</span><span class=\"n\">init_menu</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">)</span>\n\t<span class=\"c1\">-- MENU CONTAINER LAYOUT</span>\n\t<span class=\"kd\">local</span> <span class=\"n\">menu</span> <span class=\"o\">=</span> <span class=\"n\">LinearLayout</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">({</span>\n\t\t<span class=\"n\">align</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n\t\t<span class=\"n\">pre_resize</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">top</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"n\">bottom</span><span class=\"p\">)</span>\n\t\t\t<span class=\"kd\">local</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">right</span> <span class=\"o\">-</span> <span class=\"n\">left</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n\t\t\t<span class=\"kd\">local</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">top</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">bottom</span> <span class=\"o\">-</span> <span class=\"n\">top</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"n\">w</span> <span class=\"o\">-</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"o\">+</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">h</span> <span class=\"o\">+</span> <span class=\"mi\">250</span>\n\t\t<span class=\"k\">end</span>\n\t<span class=\"p\">})</span>\n\t<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">layers</span><span class=\"p\">.</span><span class=\"n\">menu</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">:</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">menu</span><span class=\"p\">)</span>\n\t\n\t<span class=\"c1\">-- MENU BUTTON</span>\n\t<span class=\"n\">Button</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">({</span>\n\t\t<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"s\">控件'</span><span class=\"p\">,</span>\n\t\t<span class=\"n\">click</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">()</span>\n\t\t<span class=\"k\">end</span>\n\t<span class=\"p\">}):</span><span class=\"n\">attach</span><span class=\"p\">(</span><span class=\"n\">menu</span><span class=\"p\">)</span>\n\n\t<span class=\"n\">Button</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">({</span>\n\t\t<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"s\">动画'</span><span class=\"p\">,</span>\n\t\t<span class=\"n\">click</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">()</span>\n\t\t\t<span class=\"n\">FlipScene</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"s\">Time'</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">end</span>\n\t<span class=\"p\">}):</span><span class=\"n\">attach</span><span class=\"p\">(</span><span class=\"n\">menu</span><span class=\"p\">)</span>\n\n\t<span class=\"n\">Button</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">({</span>\n\t\t<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"s\">退出'</span><span class=\"p\">,</span>\n\t\t<span class=\"n\">click</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">()</span>\n\t\t\t<span class=\"n\">UIExt</span><span class=\"p\">.</span><span class=\"n\">quit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">end</span>\n\t<span class=\"p\">}):</span><span class=\"n\">attach</span><span class=\"p\">(</span><span class=\"n\">menu</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div><p>这是绘制封面上三个按钮的，外加一个线性布局，用于均排三个按钮。即用脚本再构建界面，可以看出，该方法还是挺优美的。</p><h2>阶段性回顾</h2><p>从一开始计划这个项目以来，已经过去差不多一个月，一开始精简原始项目的代码实在是地狱级难度，但是到现在用lua写UI简直是行云流水，一个字爽！</p><p>写这个UI，并不是一两天的事，先前有实现好几个UI的基础（C++，C#），因此对整体的设计也熟练许多。这次使用lua是一次新的尝试，事实证明lua还是非常优秀的。</p><p>接下来完善了必要的控件后就可以用脚本写第一个游戏了，想想还是有点小激动呢~ :)</p>","updated":"2017-02-17T04:39:37.000Z","canComment":false,"commentPermission":"anyone","commentCount":0,"collapsedCount":0,"likeCount":1,"state":"published","isLiked":false,"slug":"25284597","isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic4.zhimg.com/v2-11e6cbeb153a8c2f7801d08fb096844b_r.png","links":{"comments":"/api/posts/25284597/comments"},"reviewers":[],"topics":[{"url":"https://www.zhihu.com/topic/19616605","id":"19616605","name":"DirectX"},{"url":"https://www.zhihu.com/topic/19612186","id":"19612186","name":"Lua"},{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"}],"titleImageSize":{"width":0,"height":0},"href":"/api/posts/25284597","excerptTitle":"","column":{"slug":"learncpp","name":"从零开始构建标准库"},"tipjarState":"inactivated","sourceUrl":"","pageCommentsCount":0,"snapshotUrl":"","publishedTime":"2017-02-17T12:39:37+08:00","url":"/p/25284597","lastestLikers":[{"profileUrl":"https://www.zhihu.com/people/cormen-gao","bio":"码农一枚","hash":"f249b30d26a695eaeebd27678b9379e6","uid":35865904545792,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"cormen-gao","avatar":{"id":"ea09368b63a9e39b187450053c36778e","template":"https://pic3.zhimg.com/{id}_{size}.jpg"},"name":"Cormen Gao"}],"summary":"经过又一番折腾之后，一个像样的界面就做出来了。期间遇到一些坑爹的问题。比如lua实现继承的时候出现的问题，假如B继承自A，A有数组children，那B的children也是继承自A的，问题在于：新建A，使得A.children=2，那么再新建个B，B.children竟然也是2，但是…","reviewingCommentsCount":0,"meta":{"previous":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic1.zhimg.com/v2-a93a0da852afded30ed09806f80321fc_r.jpg","links":{"comments":"/api/posts/25257863/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19646156","id":"19646156","name":"C++ Primer"},{"url":"https://www.zhihu.com/topic/19584970","id":"19584970","name":"C++"},{"url":"https://www.zhihu.com/topic/19554298","id":"19554298","name":"编程"}],"href":"/api/posts/25257863","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<h1>C++ Primer Test</h1><p>书本是《Primer C++ 中文版（第5版）》，王、杨译。</p><p>题目范围：前11章（含）。</p><p><i>PS：由于内容太多，不可能面面俱到，故就挑一些我认为较重要的地方。星号★表示难度。</i></p><br><p>-----------【1、基本类型】-----------</p><p>概念：</p><ol><li><p>列举常用的基本数据类型</p></li><li><p>每种类型的用处是什么？</p></li><li><p>有符号和无符号混合起来运算，怎么处理？</p></li><li><p>什么时候发生溢出？</p></li><li><p>精度：浮点数运算为什么不满足结合律？</p></li><li><p>★数值运算表达式有哪些优化方法？</p></li></ol><p>编程：</p><ol><li><p>如何将int的小端表示转化为大端表示？</p></li><li><p>★itoa, atoi, itof, ftoi</p></li><li><p>★bitset实现</p></li><li><p>★基本数据类型的序列化</p></li></ol><p>-----------【2、指针与引用】-----------</p><p>概念：</p><ol><li><p>指针表示与引用表示：等价吗？</p></li><li><p>左值引用与右值引用</p></li><li><p>POD</p></li></ol><p>-----------【3、字符串】-----------</p><p>概念：</p><ol><li><p>string的内存管理方式</p></li><li><p>多个string相加会影响效率吗？</p></li></ol><p>编程</p><ol><li><p>实现cctype中的库函数（书P82）</p></li><li><p>★★求两个字符串的相似程度<br></p></li></ol><p>-----------【4、动态数组】-----------</p><p>概念：</p><ol><li><p>vector的内存管理方式</p></li><li><p>遍历方法；遍历时如何删除当前元素？</p></li><li><p>不同vector对象的迭代器能否比较？</p></li><li><p>★什么时候vector才会去申请新的空间？什么时候释放？</p></li><li><p>★★自己实现一个allocator<br></p></li></ol><p>编程：</p><ol><li><p>实现简单的动态数组</p></li></ol><p>-----------【5、优先级】-----------</p><p>概念：</p><ol><li><p>熟记优先级表</p></li><li><p>a(b(),c(),d())，对象的构造顺序？</p></li></ol><p>编程：</p><ol><li><p>★实现四则运算器</p></li></ol><p>-----------【6、函数】-----------</p><p>概念：</p><ol><li><p>函数指针，用typedef或using表示</p></li><li><p>lambda如何使用，能与std::function互相转换吗？</p></li><li><p>函数参数的入栈顺序</p></li><li><p>函数参数传值和传引用的区别</p></li></ol><p>编程：</p><ol><li><p>★实现printf</p></li><li><p>★函数参数转发<br></p></li><li><p>★★实现std::function和std::bind</p></li><li><p>★★实现异步调用模型</p></li></ol><p>-----------【7、类】-----------</p><p><strong>★本章知识非常重要，一个字都不要放过。★</strong></p><p><strong>★本章知识非常重要，一个字都不要放过。</strong>★</p><p><strong>★本章知识非常重要，一个字都不要放过。★</strong></p><p>-----------【8、输入输出】-----------</p><p>概念：</p><ol><li><p>关于IO，常见的头文件有？</p></li><li><p>cin的使用、标志位；cin出错如何处理？</p></li><li><p>格式化；标志位设完后需要清除吗？</p></li><li><p>getline按回车就返回，能否屏蔽掉回车，即以#为终止符接受多行输入？</p></li></ol><p>编程：</p><ol><li><p>统计文本文件中的单词数</p></li><li><p>★★流的设计理念</p></li></ol><p>-----------【9、顺序容器】-----------</p><p>概念：</p><ol><li><p>常见的顺序容器有哪些？</p></li><li><p>每种容器适用于什么场合？</p></li><li><p>遍历与访问方法</p></li><li><p>assign和resize</p></li></ol><p>-----------【10、泛型】-----------</p><p><strong>泛型常用方法：</strong><a href=\"https://link.zhihu.com/?target=https%3A//github.com/githubwoniu/learnprogram/wiki/STL%25E6%25A0%2587%25E5%2587%2586%25E5%25BA%2593%25E4%25B8%25AD%25E7%259A%2584%25E7%25AE%2597%25E6%25B3%2595%25E5%2587%25BD%25E6%2595%25B0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STL标准库中的算法函数<i class=\"icon-external\"></i></a></p><p>概念：</p><ol><li><p>什么是泛型？</p></li><li><p>协变与逆变</p></li></ol><p>编程：</p><ol><li><p>★实现泛型数组</p></li><li><p>★★使用模版，实现编译期判断素数isPrime&amp;lt;n&amp;gt;</p></li></ol><p>-----------【11、关联容器】-----------</p><p>概念：</p><ol><li><p>关联容器的使用方法</p></li><li><p>★map和set的内部数据结构是怎样的？它们的运行效率？</p></li></ol>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":25257863,"publishedTime":"2017-02-15T22:05:48+08:00","url":"/p/25257863","title":"【Primer】前11章小测验","summary":"C++ Primer Test书本是《Primer C++ 中文版（第5版）》，王、杨译。题目范围：前11章（含）。<i>PS：由于内容太多，不可能面面俱到，故就挑一些我认为较重要的地方。星号★表示难度。</i> -----------【1、基本类型】-----------概念：列举常用的基本数据类型每种…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0},"next":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic2.zhimg.com/v2-d7f852b432d4cf508c4cfc264db850c5_r.png","links":{"comments":"/api/posts/25401920/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19966666","id":"19966666","name":"2048（小游戏）"},{"url":"https://www.zhihu.com/topic/19612186","id":"19612186","name":"Lua"},{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"}],"href":"/api/posts/25401920","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<h2>02/24更新</h2><p>下载 :: <a href=\"https://link.zhihu.com/?target=https%3A//github.com/bajdcc/GameFramework/releases/tag/0.1.5.2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Game 2048 with Animation<i class=\"icon-external\"></i></a><br></p><p>今天的任务是给2048加上动画。别看用js的transition就搞定的事情，用GDI来实现是有难度的。</p><h2><b>2048的游戏实现机制</b></h2><p>虽然代码抄自<a href=\"https://link.zhihu.com/?target=https%3A//github.com/gabrielecirulli/2048\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">gabrielecirulli/2048: A small clone of 1024 (https://play.google.com/store/apps/details?id=com.veewo.a1024)<i class=\"icon-external\"></i></a> ，但是将js代码用lua去实现还是多费了点工夫。当然两者都是动态语言，坑比较少。</p><p><u>现在来讲下2048是怎样实现的。</u></p><p>首先，我们看界面，它就是个4x4的方块，显而易见，用4x4数组或1x16数组就能搞定。那么数组里面存什么呢？我们分析2048中的数值：空方格、2的幂次数值方块，就两种。解决方案是只要存int——空方格对应0；2的幂就对应它的幂。所以：空=0，2=1，以此类推，2048=11。因此数据结构非常简单，随便用伪代码表示：[2048-Table] = array&amp;lt;int&amp;gt;(4x4)。</p><p>知道了数据结构，那么接下来就是算法，这是难的部分。</p><p>算法需要解决一些问题：</p><ul><li>处理每次的上下左右动作。这个是核心功能，有几个方面。<b>一、判断是否要合并；二、不合并的话就将方块向前推到边上，直到推不动为止；三、随机位置增加新方块</b>。</li><li>确定当前是否为死局。这个简单，只要遍历4x4数组，看<b>是否存在相邻的连续数值的方块</b>。</li></ul><p>下面解决主要问题。</p><p><b>一、判断是否要合并</b></p><p>假如当前按下Left键，方块向左移动，假如某行是“2-2-4-4”，那么结果是“4-8-0-0”，因为只需要合并相邻的方块；若是“2-2-2-2”，结果是“4-4-0-0”，不会是“8-0-0-0”，这是由算法决定的。</p><p>那么问题变简单了，正如memcpy所做的，如果memcpy(src,dst)，其中src和dst有交界部分。若src在dst前面，那么应该从后向前复制，反之是从前向后。</p><p>同理，方向为Left时，对于“2-2-4-4”，是从左向右遍历，先确定“2-2”，将其换为4，变成“4-0-4-4”，然后处理右边两个4。此时，左起第一个4其实已经<b>合并</b>过了，将其排除，所以当前只要处理“0-4-4”，那么再将当中的4移至最左，成为“4-0-4”，再处理第二个4，由于第一个4尚未合并过，因此两个4再进行合并，成为8。最后结果“4-8-0-0”。</p><p>整理一个过程：Left，2-2-4-4，加[]表示已合并过，无需再次合并。2-2-4-4 =&amp;gt; [4]-0-4-4 =&amp;gt; [4]-4-0-4 =&amp;gt; [4]-[8]-0-0。</p><p><b>二、对不能合并的方块进行移动</b></p><p>如“2-4-6-0”，方向Right，从右向左遍历。过程为：2-4-6-0 =&amp;gt; 2-4-0-6 =&amp;gt; 2-0-4-6 =&amp;gt; 0-2-4-6。解释略。</p><p><b>三、随机增加新方块</b></p><p>增加新方块，添加2和4的概率比为9比1，用随机数实现。</p><p>然后需要寻找空位添加，这简单，遍历4x4数组，找到数值为0的将其位置记录，接着随机抽位子。</p><p>---------------------------------------</p><h2><b>2048的动画实现机制</b></h2><p>花了一天实现了方块的移动，也有难度。</p><p>项目相关：布局只支持新增GUI对象，不支持删除，因此需要一开始就创建好。</p><p><u>思路：原4x4中每个方块对应一个GUI对象（记作origin），另外再新建4x4的GUI对象（记作anime），用于实现动画。</u></p><p>例：当前2-2-4-4，方向Right，结果为0-0-4-8。设计动画，假设[n]代表从左起第n个位置。</p><p>方块移动：[1,2,3,4] =&amp;gt; [3,3,4,4]。那么当第一个2（位置为[1]）进行移动时，这时应该将origin方块隐藏，将替身anime方块代替origin位置并显现，随后播放动画，将anime的位置从[1]逐渐移动到[3]，移动完毕后，主角origin上场，替身anime下场。</p><p>总结一下：<b>当origin需要移动时，召唤替身anime到指定位置，替身移动，最后替身消失，origin在替身消失的地方出现。</b>替身移动其实就是<u>插值思想</u>。</p><p>另外，为防止动画没有播放完程序仍接受游戏指令导致逻辑乱套，因此在动画播放期间用户输入无效，不然动画就会出问题。</p><br><p>======我是分割线======</p><h2>02/23更新</h2><h2>写在前面</h2><p>经过坚持不懈的努力，第一个游戏已经制作完成。</p><p>游戏逻辑全部用Lua实现，发挥Lua的特长。</p><p>前期的辛苦，到第一个游戏完成时，已经烟消云散了，想必制作游戏的人们都是这个心情吧。</p><h2>游戏简介</h2><p>2048这个游戏很经典，当前它的游戏算法我是抄的:)，因为没足够时间去思考，但是它的算法难度不算太高，我觉得没有<a href=\"https://link.zhihu.com/?target=https%3A//github.com/bajdcc/Popstar\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Popstar implementation(MFC)<i class=\"icon-external\"></i></a>难写（当然Popstar我也写过才敢这么说）。</p><p>不过，由于游戏框架功能有限，2048中的动态滑动效果尚未实现，降低了美观度。</p><p>那么搭建这个游戏的框架所具备的最小功能有哪些呢？</p><ol><li>交互层(Win32)：拦截Win32消息，处理好程序与系统的交互。</li><li>逻辑层(Lua)：根据交互层传来的消息，实现界面或游戏逻辑，保证程序正常运行。</li><li>渲染层(Direct2D)：听从逻辑层命令，进行窗口的渲染。</li></ol><p>从上面可以看出：Lua将交互层与渲染层相解耦，是十分重要的胶水语言。</p><p>这样做的好处有哪些？</p><ol><li>脚本语言的优势，如lambda函数、动态类型、yield等</li><li>只需修改脚本，无需再次编译程序</li><li>有出错提示，便于debug</li><li>垃圾回收</li><li>模块化</li></ol><p>初次使用Lua就体会到它强大之处，在意料之中。</p><h2>实现思路</h2><p>总结一下编写简单的游戏框架并用其实现2048整个过程中的问题。</p><ul><li>Lua的坑。由于对它不熟悉，走了些弯路。Lua中统一用double保存整型与浮点，所以输出整数就要进行转换。再者就是类的问题，目前的问题是切换场景后，文本框的内容没有重置。<br></li><li>D2D的坑。D2D的文档比较少，学着费劲。要注意RenderTarget无效问题，无效后必须马上重新创建，连带之前的画刷、图片、文字等对象要全部重建。</li><li>Win32的坑。这已经见怪不怪了，一个字，略。</li></ul><p>那么整体的思路是：</p><ol><li>交互层，将Win32消息进行封装，对每个消息调用Lua进行处理。这里比较重要的是窗口改变大小问题，将大小改变时，UI也要跟着改变、跟着放缩，不过UI的问题我全部用Lua脚本去做，省去不少麻烦。</li><li>逻辑层，主要是Lua脚本的模块化构建。我的思路：根为场景（Scene），场景下有GDI对象（GdiObject），每个GDI对象可以包含其他GDI对象，组成树结构。场景切换时，GDI树销毁并创建新的。还有一个就是布局（Layout），这里的思路比较经典，掌握基本的递归方法就可以写成。布局里有绝对布局、线性布局、表格布局，都比较简单，这些布局会自动调整成员的大小。</li><li>渲染层，不多说，能用现成的就用。像画纯色矩形算简单，涉及富文本就复杂了，因此我暂时不考虑富文本情况，画画基本的几何图形就足够。这方面不算重要的内容。</li></ol><h2>阶段性目标</h2>做点简单的游戏，如Popstar、贪吃蛇、俄罗斯方块，以及计算器等小玩意，纯属自娱自乐 :)","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":25401920,"publishedTime":"2017-02-23T22:48:15+08:00","url":"/p/25401920","title":"【游戏框架系列】2048","summary":"02/24更新下载 :: <a href=\"https://link.zhihu.com/?target=https%3A//github.com/bajdcc/GameFramework/releases/tag/0.1.5.2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Game 2048 with Animation<i class=\"icon-external\"></i></a> 今天的任务是给2048加上动画。别看用js的transition就搞定的事情，用GDI来实现是有难度的。<b>2048的游戏实现机制</b>虽然代码抄自<a href=\"https://link.zhihu.com/?target=https%3A//github.com/gabrielecirulli/2048\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">gabrielecirulli/2048: A small clone of 1024 (https://play.google.com/store/apps/d…<i class=\"icon-external\"></i></a>","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0}},"commentsCount":0,"likesCount":1,"FULLINFO":true}},"User":{"bajdcc":{"isFollowed":false,"name":"陈安","headline":"专业研究野生技术 https://github.com/bajdcc","avatarUrl":"https://pic4.zhimg.com/v2-cd6d61ad9ef94c41b9e77f8e0f727893_s.jpg","isFollowing":false,"type":"people","slug":"bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","profileUrl":"https://www.zhihu.com/people/bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false,"badge":{"identity":null,"bestAnswerer":null}}},"Comment":{}},"me":{},"global":{},"columns":{"learncpp":{"following":false,"canManage":false,"href":"/api/columns/learncpp","name":"从零开始构建标准库","creator":{"slug":"bajdcc"},"url":"/learncpp","slug":"learncpp","avatar":{"id":"v2-bf63794c542fc73b11e17014b7e0d01d","template":"https://pic2.zhimg.com/{id}_{size}.jpg"},"FULLINFO":false}},"columnPosts":{},"postComments":{},"postReviewComments":{"comments":[],"newComments":[],"hasMore":true}}</textarea>

    <script src="//static.zhihu.com/hemingway/common.ac46319b23e12700340a.js"></script>
<script src="//static.zhihu.com/hemingway/app.47dccfede9fcf0800757.js"></script>
<script src="//static.zhihu.com/hemingway/raven.ccdadd4407812d1aac2f.js" async defer></script>
  </body>
</html>
