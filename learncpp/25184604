<!doctype html>
<html lang="zh-CN">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>【游戏框架系列】初见成效 - 知乎专栏</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link rel="shortcut icon" href="https://static.zhihu.com/static/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="//static.zhihu.com/hemingway/app.ad2159a596c8458712d70cf5a5b17235.css" />
    <script>document.documentElement.className += ('ontouchstart' in window) ? ' touch' : ' no-touch'</script>
  </head>
  <body>

    <div id="react-root"></div>
    <textarea id="clientConfig" hidden>{"debug":false,"apiRoot":"","paySDK":"https://pay.zhihu.com/api/js","name":"production","instance":"column","tokens":{"X-XSRF-TOKEN":null,"X-UDID":null,"Authorization":"oauth c3cef7c66a1843f8b3a9e6a1e3160e20"}}</textarea>
    <textarea id="preloadedState" hidden>{"database":{"Post":{"25184604":{"title":"【游戏框架系列】初见成效","author":"bajdcc","content":"经过一番研究，程序终于从黑框框中解放出来。<p><b>背景有颜色了！背景颜色会渐变！再送一个二维马！场景可以定时切换！</b></p><p>离我们的目标越来越近了 :)</p><p>直接下载运行：<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/GameFramework/releases/tag/0.1.3\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/GameFramework<i class=\"icon-external\"></i></a>，See Downloads</p><p>=======我是分隔线=======</p><p>然而，一个令人喜闻乐见的项目并不是那么简单，把来龙去脉说清楚也是不怎么现实的。TVT</p><p>那么，简而言之，经过一番折腾，收获些许经验，也验证了一些正确可行的思路。</p><h2>整体框架</h2>整体框架仍是喜闻乐见的Win32项目模式。即注册窗口类、写好窗口消息处理函数，创建一个窗口，然后监听并派送消息。那么关于窗口消息的处理我是用switch搞定的。这里我都偷懒了，用了MFC的代码。<p>那么怎样把一个经典Win32项目搞得出彩并赏心悦目呢？那么这就是一个UI的活了，然而我们是写代码的！搞什么UI？那就大错特错了——写代码时的繁琐与疲劳，当你看到自己做成了优美的UI时，那些不愉快顿时就烟消云散了！</p><p>该怎样设计这个UI呢？</p><p>假设现在我们掌握了Win32消息处理的基本知识，那么剩下的活就是画画了！</p><p>那么一定有一个函数是将所有的内容<b>重新绘制</b>一遍的，它就是Render。</p><p>比如你单击下鼠标，或者按下某个键，再或者定时的时间到了，这个时候<b>要做一些事情</b>，比如算个数学题、制作下二维码、挪一下角色等。</p><p>那么结合上面两种情况，我们有：</p><ol><li>所有事情都在消息处理函数中进行，也就是单线程操作</li><li>如果遇到需要重新绘制的情况，就调用Render，这个情况可以是手动的，可以是自动的（如窗口移动、改变大小，内容需要拉伸等）</li><li>遇到鼠标事件、键盘事件，就进行处理</li><li>在收到窗口创建消息和窗口销毁消息后进行相应操作</li></ol><h2>绘制</h2><p>想象下HTML代码中的一层层DOM树，那么类似地，窗口中的那些对象也是呈<b>树状关系</b>。因此，窗口需要抓住一个根对象Root，只要有了它，那么利用递归操作就能控制整个树。</p><p>这样，每个对象可以有它的子结点。这里的问题在于如何绘制对象，以及对象的大小怎样自动调整。</p><p>解决自动调整大小的问题，只要递归调用Resize函数即可。</p><p>绘制对象，这里采用的是Direct2D接口，这个接口的文档很少，我都是借鉴自其他代码（如Gaclib）。关于Direct2D的初始化、绘制等内容都省略了。不过要清楚的是，Direct2D的笔刷需要不停去创建，那么每个笔刷是有颜色的，同样颜色的笔刷只要一个就可以了，结论都是写一个缓存类。</p><p>每个UI对象（如色块、文字等），都有相应的D2D渲染接口，而且这个接口需要不断更新。那么这些接口就属于每个相应的对象。当对象接收到某个消息时，就创建新接口、销毁旧接口，这里用SetRenderTarget。</p><p>实际运行时，UI对象需要不断去创建，那么可以利用工厂模式将UI封装一下（保存新建函数地址为值，UI名为键），要用的话，如XXXElement::Create，这样比较方便。</p><p>借鉴游戏中的场景（Scene）思路，这里也将UI对象放入某一场景中，场景切换时，调用相应代码，将原来的内容删除，并创建新的内容，然后显示出来。</p><p>总而言之，用脚本语言去实现逻辑，感觉是相当棒的。</p><h2>逻辑</h2><p>逻辑主要是基于窗口接收到消息时要做的部分，这些内容交给lua。</p><p>lua非常精简，涉及它的所有使用方法只要抛一个lua_State* L参数即可，其实它就是一个状态机。这里只要做好C++和lua的交互。</p><p>哪些任务要交给lua去做呢？</p><ul><li>事件处理（键盘和鼠标）<br></li><li>UI对象的操作</li><li>定时器</li><li>场景切换</li></ul><p>想一想：一个游戏，有这些逻辑也足够了（我说的是贪吃蛇）。</p><br>更详细的内容，需要参考lua的文档。<h2>其他</h2><p>这里用了几个有趣的玩意：颜色渐变、二维码。当然这都是现成的代码。</p><p>颜色渐变：只要设个定时器，然后不断更新颜色，重绘即可。<br></p><p>二维码：调用现成的libqrencode库，它会返回二维码的大小和它的内容，根据这些，可以创建一张空白的图，然后将黑白两色填上去。</p>","updated":"2017-02-10T15:09:19.000Z","canComment":false,"commentPermission":"anyone","commentCount":0,"collapsedCount":0,"likeCount":1,"state":"published","isLiked":false,"slug":"25184604","isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic3.zhimg.com/v2-b4d00c7b0dfb12a3c7363ef92a00a7ba_r.png","links":{"comments":"/api/posts/25184604/comments"},"reviewers":[],"topics":[{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"},{"url":"https://www.zhihu.com/topic/19612186","id":"19612186","name":"Lua"},{"url":"https://www.zhihu.com/topic/19616605","id":"19616605","name":"DirectX"}],"titleImageSize":{"width":0,"height":0},"href":"/api/posts/25184604","excerptTitle":"","column":{"slug":"learncpp","name":"从零开始构建标准库"},"tipjarState":"inactivated","sourceUrl":"","pageCommentsCount":0,"snapshotUrl":"","publishedTime":"2017-02-10T23:09:19+08:00","url":"/p/25184604","lastestLikers":[{"profileUrl":"https://www.zhihu.com/people/wang-ji-wei-74","bio":"沉舟侧畔千帆过，病树前头万木春","hash":"97cd80f5af6970c3ed8236d8d09582c2","uid":580716088120053800,"isOrg":false,"description":"","isOrgWhiteList":false,"slug":"wang-ji-wei-74","avatar":{"id":"ad300f243b3769fb925681bf81ea6cfd","template":"https://pic2.zhimg.com/{id}_{size}.jpg"},"name":"立夏"}],"summary":"经过一番研究，程序终于从黑框框中解放出来。<b>背景有颜色了！背景颜色会渐变！再送一个二维马！场景可以定时切换！</b>离我们的目标越来越近了 :)直接下载运行：<a href=\"https://github.com/bajdcc/GameFramework/releases/tag/0.1.3\" data-editable=\"true\" data-title=\"bajdcc/GameFramework\" class=\"\">bajdcc/GameFramework</a>，See Downloads=======我是分隔线=======然而，一个令人喜闻乐见的项目并不是…","reviewingCommentsCount":0,"meta":{"previous":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic4.zhimg.com/v2-b71e68befd80ac92674b599f1791849f_r.png","links":{"comments":"/api/posts/25027543/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"},{"url":"https://www.zhihu.com/topic/19848273","id":"19848273","name":"DirectUI"},{"url":"https://www.zhihu.com/topic/19616605","id":"19616605","name":"DirectX"}],"href":"/api/posts/25027543","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<p>新建了个项目：<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/GameFramework\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/GameFramework<i class=\"icon-external\"></i></a><br></p><p>--------------------------------------------------------</p>继续开坑~偶然想起一个遥远的轮子——<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/CCGuiFoundation\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bajdcc/CCGuiFoundation<i class=\"icon-external\"></i></a> ，这是借鉴轮子哥的。<p>这个轮子的架构是C/C++，渲染用DirectX，库用STL/ATL（删掉了wtf库）。不过整个项目很庞大，超过了一万行代码，所以将它化简，先抽出核心部分来做。</p><p>鉴于渲染用的DirectX，因此也不引用其他渲染库了，怪麻烦的。游戏的逻辑交互大多用Lua，因此趁机好好研究下Lua。</p><p>大致的内容有：</p><ol><li>Window类的设计，对Win32 API的封装，消息、事件</li><li>DirectUI的设计，显示层对象间的关系（相对位置计算）</li><li>DirectX的初始化及使用，渲染图元</li><li>Lua的交互</li><li>经典窗体控件的实现</li></ol><p>不过第一步应该是实现一个最小化框架，能够在黑屏幕上打出Hello world！（借助Lua和DX）</p>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":25027543,"publishedTime":"2017-01-26T16:19:21+08:00","url":"/p/25027543","title":"【游戏框架系列】开篇","summary":"新建了个项目：<a href=\"https://github.com/bajdcc/GameFramework\" data-editable=\"true\" data-title=\"bajdcc/GameFramework\">bajdcc/GameFramework</a> --------------------------------------------------------继续开坑~偶然想起一个遥远的轮子——<a href=\"https://github.com/bajdcc/CCGuiFoundation\" data-editable=\"true\" data-title=\"bajdcc/CCGuiFoundation\" class=\"\">bajdcc/CCGuiFoundation</a> ，这是借鉴轮子哥的。这个轮子的架构是C/C++，渲染用DirectX，库用STL/ATL（删掉了wtf库）。不…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0},"next":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic3.zhimg.com/v2-d43c180aa29bba2b04653eb011af7dba_r.png","links":{"comments":"/api/posts/25189183/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19602492","id":"19602492","name":"JSON"},{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"},{"url":"https://www.zhihu.com/topic/19593616","id":"19593616","name":"编程学习"}],"href":"/api/posts/25189183","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<p>通过阅读高质量的代码，提升自己的编程水平，找到编程的感觉。<br></p><p><u>带着问题去阅读，在阅读中思考为什么这样设计。</u></p>源码地址在：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/githubwoniu/json11\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">githubwoniu/json11<i class=\"icon-external\"></i></a>，可以fork之。<ul><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/githubwoniu/json11/blob/master/json11.cpp\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/githubwoniu/</span><span class=\"invisible\">json11/blob/master/json11.cpp</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br></li><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/githubwoniu/json11/blob/master/json11.hpp\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/githubwoniu/</span><span class=\"invisible\">json11/blob/master/json11.hpp</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br></li></ul><h2>阅读目的</h2><p>【思考题】</p><p>json层面：</p><ol><li>什么是序列化，你接触过的序列化有哪些？</li><li>json是什么，它的组成，为什么要用它？</li><li>如何用json表示对象？</li><li><b>说说json中用到的递归理念，它和我们所学的二叉树或其他的数据结构有哪些异同？</b></li><li>json能否表示一张图片？</li></ol><p>语言特性层面：</p><ol><li>代码的美观程度，代码风格</li><li>这个特性你认识吗，不认识请翻书</li><li>为什么要用到这个特性，有其他方法替代吗？</li><li>什么时候该用这个特性，为什么其他方法不行？</li><li><b>给代码添加注释，说明为什么这样写</b></li></ol><p>设计层面：</p><ol><li>用到了哪些类，每个类的任务是什么，为什么设计这些类？</li><li>代码中用到了枚举enum，用处是什么？<br></li><li>你来设计的话，会设计哪些类？</li><li>【进阶】体会模版类的设计方法</li></ol><p>语法分析层面：</p><ol><li><b>熟悉json的语法</b></li><li>【进阶】学习LL1分析的方法（参考相关书籍）</li><li>读懂BNF，写出状态图</li></ol><p>概念层面：</p><ol><li><b>不同的机器间通讯为什么要采用相同的协议？</b></li><li>哪些语言中涉及json？</li><li>常见的序列化工具有哪些？</li></ol><p>其他层面：</p><ol><li>C++11的初始化列表构造方式能重载吗？</li><li>你能自己设计一个智能指针出来吗？</li><li>如何实现itoa，snprintf？</li><li>utf8是什么？如何与ascii转换？</li></ol><br><br><br><h2>简要介绍</h2><p>通过阅读json11的代码，能够达到怎样的目标呢？那么为了解答这个问题，需要对json11有个初步的了解。</p><p>json11，它包含了json和C++11相关的内容，所以我们首先需要知晓json和C++11。</p><p>=========关于json=========<br></p><p>json其实就是一个<b>字符串</b>，但这个字符串是可以描述某个对象的，这是不是很似曾相识？接触过MFC的知道CArchive类吧，它就是完成对象序列化（持久化）的功能。在java中，一个类想要序列化就必须实现Serializable接口。</p><blockquote>假设两台电脑间要传递信息（文字、图片、视频），最终信息通过网线传输，大家知道网线传输电信号，实际上就是0和1。这样，我们需要先把你QQ上发的图片，带上你的QQ号，以及你的网络地址等一系列信息，将它们转换成0和1组成的二进制串，然后再发送出去。简而言之，<u>需要将一个对象转换成二进制串，这个过程就是序列化</u>。</blockquote><p>序列化能够解决什么问题呢？——<b>以字符串或二进制串为媒介，将对象进行传输</b>。想象一下：打游戏获得装备，需要向服务器汇报；上网浏览网页、看视频等。这些都是将对象借助网络传输。</p><p>也就是说，没有了网络，就不会有json（就一台孤零零的电脑瞎搞什么序列化）。但有了网络，就一定会有json吗？确定不是ason、bson？类似地，为什么要搞USB接口？用苹果那套不行吗？为什么要搞HTTP，不搞其他的？</p><p>上面的矛盾直接就导致了我们<b>需要一套统一的标准/协议</b>。网线有标准、USB有标准、WIFI有标准、视频有标准、图片有标准……联想一下秦始皇统一后干的事情：统一文字、货币、度量衡，再想象一下中国人和美国人交流距离和温度的单位，就知道为什么要<b>统一标准</b>。</p><p>http+需要传输对象+统一标准，那么json就来了。</p><p>知道了json是必然出现的，但它究竟是什么呢？它能表示一个对象，那对象又是什么？</p><p>典型的问题：对象object是什么？那么结合C++，知道它有数据和方法，而这里要传输的主要是数据（怎么传输方法先忽略），数据包含什么？</p><p>数据有什么？问的是数据有哪些类型，有int、double、字符串等等，但它们并不能表示所有的object。</p><p>思考：如何表示一个家庭（三口之家）？是不是想起了什么，[Me, father, mother]，这就是数组。</p><p>有些思路了，object是：<b>有基本数据类型，有数组，数组里面还能放object</b>。</p><p>有人会说，用字符串表示更费空间啊，为什么不用二进制表示呢？这里说明下：json是<b>方便给人看的</b>（因为人要修改它啊），跟xml一样，人是看不懂二进制的。</p><div class=\"highlight\"><pre><code class=\"language-json\"><span></span><span class=\"p\">{</span>\n    <span class=\"nt\">\"home\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"father\"</span> <span class=\"p\">,</span> <span class=\"nt\">\"age\"</span><span class=\"p\">:</span><span class=\"s2\">\"保密\"</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"mother\"</span> <span class=\"p\">,</span> <span class=\"nt\">\"age\"</span><span class=\"p\">:</span><span class=\"s2\">\"保密\"</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"me\"</span> <span class=\"p\">,</span> <span class=\"nt\">\"age\"</span><span class=\"p\">:</span><span class=\"mi\">18</span> <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>是不是可以读懂上面的json？</p><p>=========关于C++11=========<br></p><p>项目中用了很多C++的特性。</p><ul><li>命名空间</li><li>using</li><li><b>运算符重载</b></li><li><b>左值引用和右值引用，常引用</b></li><li><b>snprintf</b></li><li>模版</li><li>explicit</li><li>智能指针</li><li><b>vector, string, map</b></li><li><b>foreach</b></li><li>decltype</li><li>final</li><li><b>auto</b></li></ul><p>加粗的部分是比较常见的，需要重点掌握。以上知识需要参阅C++相关书籍，这一部分没有捷径，靠自己理解，先自己动手解决问题，不做伸手党。</p>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":25189183,"publishedTime":"2017-02-11T15:40:24+08:00","url":"/p/25189183","title":"【源码众读】json11学习计划","summary":"通过阅读高质量的代码，提升自己的编程水平，找到编程的感觉。 <u>带着问题去阅读，在阅读中思考为什么这样设计。</u>源码地址在：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/githubwoniu/json11\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">githubwoniu/json11<i class=\"icon-external\"></i></a>，可以fork之。<a href=\"https://link.zhihu.com/?target=https%3A//github.com/githubwoniu/json11/blob/master/json11.cpp\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/githubwoniu/</span><span class=\"invisible\">json11/blob/master/json11.cpp</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> <a href=\"https://link.zhihu.com/?target=https%3A//github.com/githubwoniu/json11/blob/master/json11.hpp\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/githubwoniu/</span><span class=\"invisible\">json11/blob/master/json11.hpp</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> 阅读目的【思考题】json层面：什么是序列化，你接触…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0}},"commentsCount":0,"likesCount":1,"FULLINFO":true}},"User":{"bajdcc":{"isFollowed":false,"name":"陈安","headline":"专业研究野生技术 https://github.com/bajdcc","avatarUrl":"https://pic4.zhimg.com/v2-cd6d61ad9ef94c41b9e77f8e0f727893_s.jpg","isFollowing":false,"type":"people","slug":"bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","profileUrl":"https://www.zhihu.com/people/bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false,"badge":{"identity":null,"bestAnswerer":null}}},"Comment":{}},"me":{},"global":{},"columns":{"learncpp":{"following":false,"canManage":false,"href":"/api/columns/learncpp","name":"从零开始构建标准库","creator":{"slug":"bajdcc"},"url":"/learncpp","slug":"learncpp","avatar":{"id":"v2-bf63794c542fc73b11e17014b7e0d01d","template":"https://pic2.zhimg.com/{id}_{size}.jpg"},"FULLINFO":false}},"columnPosts":{},"postComments":{},"postReviewComments":{"comments":[],"newComments":[],"hasMore":true}}</textarea>

    <script src="//static.zhihu.com/hemingway/common.ac46319b23e12700340a.js"></script>
<script src="//static.zhihu.com/hemingway/app.47dccfede9fcf0800757.js"></script>
<script src="//static.zhihu.com/hemingway/raven.ccdadd4407812d1aac2f.js" async defer></script>
  </body>
</html>
