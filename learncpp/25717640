<!doctype html>
<html lang="zh-CN">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>【游戏框架系列】余音袅袅 - 知乎专栏</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link rel="shortcut icon" href="https://static.zhihu.com/static/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="//static.zhihu.com/hemingway/app.ad2159a596c8458712d70cf5a5b17235.css" />
    <script>document.documentElement.className += ('ontouchstart' in window) ? ' touch' : ' no-touch'</script>
  </head>
  <body>

    <div id="react-root"></div>
    <textarea id="clientConfig" hidden>{"debug":false,"apiRoot":"","paySDK":"https://pay.zhihu.com/api/js","name":"production","instance":"column","tokens":{"X-XSRF-TOKEN":null,"X-UDID":null,"Authorization":"oauth c3cef7c66a1843f8b3a9e6a1e3160e20"}}</textarea>
    <textarea id="preloadedState" hidden>{"database":{"Post":{"25717640":{"title":"【游戏框架系列】余音袅袅","author":"bajdcc","content":"下载地址：<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bajdcc/GameFramework/releases/tag/0.1.8\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Netease Music Player<i class=\"icon-external\"></i></a><h2>写在前面</h2><p>由于先前实现过千千静听API在线听歌网站（<a href=\"http://link.zhihu.com/?target=http%3A//www.cnblogs.com/bajdcc/p/4771889.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">基于天天动听API开发在线音乐查询网站 - bajdcc - 博客园<i class=\"icon-external\"></i></a>），不过好多歌曲链接已失效了。。后面又山寨了<a href=\"http://link.zhihu.com/?target=https%3A//github.com/TivonJJ/html5-music-player\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TivonJJ/html5-music-player<i class=\"icon-external\"></i></a>并添加了云音乐API，可以听云音乐的歌了。随后又添加了手机远程控制及歌词广播功能。这里，拿它来练手再好不过了！</p><h2>界面介绍</h2><p>界面做的很粗糙，没有动画，这是因为我们的框架非常简单（其实是懒……）。</p><p>来谈谈这个界面！</p><p>界面主要分为：歌曲信息、播放进度、播放控制、歌词、歌曲封面、音量、歌曲查询文本框、歌曲待选按钮x4。</p><p>关于歌曲查询，云音乐提供查询API <a href=\"http://link.zhihu.com/?target=http%3A//moonlib.com/606.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">网易云音乐常用API浅析 - Moonlib<i class=\"icon-external\"></i></a>。第一种：根据关键词查找，可查询歌曲、歌手、专辑、歌单、用户等信息。第二种：根据ID查找歌曲信息，有歌曲码率、封面、MP3地址等。第三种：根据ID查找歌词。<u>由于版权原因，有些歌是找不到的。</u></p><h2>音乐播放：libzplay</h2><p>虽然用mciSendString可以播放歌曲，但不灵活，所以我搜了一些库，发现了<a href=\"http://link.zhihu.com/?target=http%3A//libzplay.sourceforge.net/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">libZPlay multimedia library (Win32)<i class=\"icon-external\"></i></a>。使用后感觉它还是不错的。</p><br><p>我用到的libzplay一些功能：从内存中读取音乐并播放、音乐播放控制、音量控制，这些是基本功能。</p><p>由于编译libzplay静态库时遇到问题，所以只能使用动态库libzplay.dll。</p><h2>设计思路</h2><p>做一个带基本功能的在线音乐播放器还是挺有难度的，好在我们框架提供了一些功能：异步下载数据、异步渲染图片、异步加载歌词，<b>核心是异步</b>。因为如果所有事情都在一个线程中，那程序就乱套了，比如放歌的时候界面卡死、下载的时候程序没响应等。</p><p>因此，实现的思路如下：</p><ol><li>获取关键词输入（每输入一个词就查找一次）</li><li>获得关键词，异步查询云音乐API，获得4个待选歌曲名，刷新歌曲列表</li><li>用户点击歌曲列表后，异步查询云音乐API，获得歌曲信息（歌曲名、ID、封面地址、MP3地址），接着获得歌词信息</li><li>更新界面（歌曲信息、封面），初始化歌词，准备播放歌曲</li><li>歌曲播放中，设置定时器，定时更新歌词、歌曲播放进度</li></ol><h2>关注细节</h2>虽然思路很清晰，但是实现起来还是会遇到一些问题。<p><b><u>一、异步加载</u></b></p><p>在前几篇文章中（一言那篇），实现了异步更新图片和异步下载JSON的功能，这功能非常核心、非常重要。</p><p><b>关于下载</b>：思路是建新的下载线程，下载完毕后，用libevent发通知，随后主循环收到通知并运行lua代码，向scene发消息，scene中的处理函数收到消息，处理下载的数据。</p><p><b>关于图片</b>：scene中的处理函数收到消息，其中一个参数是base64编码后的[vector&amp;lt;byte&amp;gt;*]地址，将它传给Base64Image对象，那么底层的Base64ImageRender渲染器将其解码，得到图片的二进制数据，最后用byte[]中创建WICImage，再用它来创建ID2D1Bitmap，每次界面刷新时，将ID2D1Bitmap呈现给Direct2DRenderTarget。</p><p><b><u>二、歌词更新</u></b></p><p>歌词文件解析我是参考了<a href=\"http://link.zhihu.com/?target=https%3A//github.com/TivonJJ/html5-music-player\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TivonJJ/html5-music-player<i class=\"icon-external\"></i></a>。它的思路很简单：用正则表达式解析歌词，将其转换成map&amp;lt;int N,string s&amp;gt;，即在第N秒时刻将歌词更新为s。</p><p>解析歌词的C++代码如下：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"kt\">int</span> <span class=\"nf\">ui_parse_lyric</span><span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\">*</span><span class=\"n\">L</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"n\">luaL_checkstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span> <span class=\"n\">e</span><span class=\"p\">(</span><span class=\"s\">R\"(\\[\\d*:\\d*[.:]\\d*\\].*)\"</span><span class=\"p\">);</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span> <span class=\"n\">rep</span><span class=\"p\">(</span><span class=\"s\">R\"(\\[\\d*:\\d*[.:]\\d*\\](.*))\"</span><span class=\"p\">);</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span> <span class=\"n\">t</span><span class=\"p\">(</span><span class=\"s\">R\"(\\[(\\d*):(\\d*)([.:])(\\d*)\\].*)\"</span><span class=\"p\">);</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">map</span><span class=\"o\">&amp;lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&amp;gt;</span> <span class=\"n\">ly</span><span class=\"p\">;</span>\n    <span class=\"k\">auto</span> <span class=\"n\">lyrics</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"nl\">lyr</span> <span class=\"p\">:</span> <span class=\"n\">lyrics</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">smatch</span> <span class=\"n\">sm</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex_match</span><span class=\"p\">(</span><span class=\"n\">lyr</span><span class=\"p\">,</span> <span class=\"n\">sm</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">))</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"n\">lycn</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex_replace</span><span class=\"p\">(</span><span class=\"n\">lyr</span><span class=\"p\">,</span> <span class=\"n\">rep</span><span class=\"p\">,</span> <span class=\"s\">\"$1\"</span><span class=\"p\">);</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"nl\">m</span> <span class=\"p\">:</span> <span class=\"n\">sm</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">smatch</span> <span class=\"n\">tm</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex_match</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">tm</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">))</span>\n                <span class=\"p\">{</span>\n                    <span class=\"k\">auto</span> <span class=\"n\">hour</span> <span class=\"o\">=</span> <span class=\"n\">atoi</span><span class=\"p\">(</span><span class=\"n\">tm</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">().</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n                    <span class=\"k\">auto</span> <span class=\"n\">minute</span> <span class=\"o\">=</span> <span class=\"n\">atoi</span><span class=\"p\">(</span><span class=\"n\">tm</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">().</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n                    <span class=\"k\">auto</span> <span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"n\">atoi</span><span class=\"p\">(</span><span class=\"n\">tm</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">().</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n                    <span class=\"k\">auto</span> <span class=\"n\">delim</span> <span class=\"o\">=</span> <span class=\"n\">tm</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">();</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">delim</span> <span class=\"o\">==</span> <span class=\"s\">\".\"</span><span class=\"p\">)</span>\n                        <span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"n\">minute</span> <span class=\"o\">+</span> <span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"n\">hour</span><span class=\"p\">;</span>\n                    <span class=\"k\">else</span>\n                        <span class=\"n\">second</span> <span class=\"o\">+=</span> <span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"n\">minute</span> <span class=\"o\">+</span> <span class=\"mi\">3600</span> <span class=\"o\">*</span> <span class=\"n\">hour</span><span class=\"p\">;</span>\n                    <span class=\"n\">ly</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">pair</span><span class=\"o\">&amp;lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&amp;gt;</span><span class=\"p\">(</span><span class=\"n\">second</span><span class=\"p\">,</span> <span class=\"n\">lycn</span><span class=\"p\">));</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">lua_newtable</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span><span class=\"o\">&amp;amp;</span> <span class=\"nl\">y</span> <span class=\"p\">:</span> <span class=\"n\">ly</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">lua_pushinteger</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">);</span>\n        <span class=\"n\">lua_pushstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n        <span class=\"n\">lua_settable</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><br><h2>阶段性总结</h2><p>做完音乐播放器后，心情还是很愉快的~ 毕竟是一个像模像样的正经的程序了！</p><p>实话说，假如不借助自己搭的框架，用win32或MFC白手起家，也要花一番工夫，因为核心还是异步模型（libevent）啊。</p><p>最近终于解决了场景切换后Edit文本输入框内容不变的问题，原因是lua会将require的代码进行缓存，所以每次require前必须运行 package.loaded[sence_name]  = nil 将其重置！</p><p>这样，我用html5和c++都实现过了一个音乐播放器，感触还是C++写着比较爽，因为用js写还是会遇到坑爹的跨域问题。</p>","updated":"2017-03-12T11:15:51.000Z","canComment":false,"commentPermission":"anyone","commentCount":0,"collapsedCount":0,"likeCount":0,"state":"published","isLiked":false,"slug":"25717640","isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic1.zhimg.com/v2-d848c8e0c717169038a6e8cbedf64544_r.png","links":{"comments":"/api/posts/25717640/comments"},"reviewers":[],"topics":[{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"},{"url":"https://www.zhihu.com/topic/19807545","id":"19807545","name":"网易云音乐"},{"url":"https://www.zhihu.com/topic/19593616","id":"19593616","name":"编程学习"}],"titleImageSize":{"width":1015,"height":618},"href":"/api/posts/25717640","excerptTitle":"","column":{"slug":"learncpp","name":"从零开始构建标准库"},"tipjarState":"inactivated","sourceUrl":"","pageCommentsCount":0,"snapshotUrl":"","publishedTime":"2017-03-12T19:15:51+08:00","url":"/p/25717640","lastestLikers":[],"summary":"下载地址：<a href=\"https://github.com/bajdcc/GameFramework/releases/tag/0.1.8\" data-editable=\"true\" data-title=\"bajdcc/GameFramework\" class=\"\">Netease Music Player</a>写在前面由于先前实现过千千静听API在线听歌网站（<a href=\"http://www.cnblogs.com/bajdcc/p/4771889.html\" data-editable=\"true\" data-title=\"基于天天动听API开发在线音乐查询网站 - bajdcc - 博客园\" class=\"\">基于天天动听API开发在线音乐查询网站 - bajdcc - 博客园</a>），不过好多歌曲链接已失效了。。后面又山寨了<a href=\"https://github.com/TivonJJ/html5-music-player\" data-editable=\"true\" data-title=\"TivonJJ/html5-music-player\" class=\"\">TivonJJ/html5-music-player</a>并添加了云音乐API，可以听云音乐的歌了…","reviewingCommentsCount":0,"meta":{"previous":{"isTitleImageFullScreen":false,"rating":"none","titleImage":"https://pic2.zhimg.com/v2-8c93a396956492760f4541a49b5c42d5_r.png","links":{"comments":"/api/posts/25593938/comments"},"topics":[{"url":"https://www.zhihu.com/topic/19610596","id":"19610596","name":"元胞自动机理论"},{"url":"https://www.zhihu.com/topic/19601705","id":"19601705","name":"C / C++"},{"url":"https://www.zhihu.com/topic/19593616","id":"19593616","name":"编程学习"}],"href":"/api/posts/25593938","excerptTitle":"","author":{"profileUrl":"https://www.zhihu.com/people/bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","isOrgWhiteList":false,"slug":"bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"name":"陈安"},"column":{"slug":"learncpp","name":"从零开始构建标准库"},"content":"<i>【多图预警】本文含有大量图片</i><h2>写在前面</h2><p>这次实现的是Wireworld元胞自动机，相关资料如下：</p><ul><li>维基：<a href=\"http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Wireworld\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Wireworld - Wikipedia<i class=\"icon-external\"></i></a><br></li><li>介绍：<a href=\"http://link.zhihu.com/?target=http%3A//karlscherer.com/Wireworld.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Wireworld<i class=\"icon-external\"></i></a></li><li>Flash模拟：<a href=\"http://link.zhihu.com/?target=http%3A//www.rezmason.net/wireworld/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Wireworld Player (Flash)<i class=\"icon-external\"></i></a><br></li><li>如何实现简单的计算机：<a href=\"http://link.zhihu.com/?target=https%3A//www.quinapalus.com/wi-index.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">The Wireworld computer<i class=\"icon-external\"></i></a><br></li><li>Clojure实现：<a href=\"http://link.zhihu.com/?target=https%3A//danprince.github.io/wireworld/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Wireworld Simulator<i class=\"icon-external\"></i></a><br></li><li>C++跨平台模拟器：<a href=\"http://link.zhihu.com/?target=https%3A//sourceforge.net/projects/golly/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Golly<i class=\"icon-external\"></i></a><br></li></ul><h2>规则</h2><p>组成：</p><ol><li>空</li><li>导体</li><li>电子头</li><li>电子尾<br></li></ol><p>每代变化：</p><br><ol><li>空→空</li><li>电子头→电子尾</li><li>电子尾→导体</li><li>当仅有一个或仅有两个电子头的邻居是导体时，导体→电子头</li></ol><p>第一次见到用Wireworld实现计算机的时候，我是崩溃的，竟然能够设计这么简单的自动机去实现计算机，这里一共只有三种状态（空不算），而真实世界只有两种状态，更为简单。遗憾的是，这个模拟的计算机需要几万代才能使七段LED上的数字产生变化，真实情况（CPU频率是几GHz）比这快多了。</p><h2>简单介绍</h2><p><b>一、时钟信号发生器</b></p><br><img src=\"http://pic2.zhimg.com/v2-940b168ed11c0734c872b5552aca7cbd_b.jpg\" data-rawwidth=\"398\" data-rawheight=\"398\" class=\"content_image\" width=\"398\"><p>上图是3周期、4周期时钟。</p><p><b>二、二极管</b></p><img src=\"http://pic2.zhimg.com/v2-ce7cfe981c7b6ecb3862b958914320ed_b.jpg\" data-rawwidth=\"398\" data-rawheight=\"398\" class=\"content_image\" width=\"398\"><p>上两个是二极管，下两个是与非门和与门。</p><p><b>三、逻辑门</b></p><img src=\"http://pic4.zhimg.com/v2-16a0d83606ff7e7211f200dd9915e3c3_b.jpg\" data-rawwidth=\"400\" data-rawheight=\"400\" class=\"content_image\" width=\"400\"><p>上图是非门，周期为3、4、5、6。</p><p><img src=\"http://pic1.zhimg.com/v2-5d030cb7dc50408a4896be86fd5c2ac0_b.jpg\" data-rawwidth=\"398\" data-rawheight=\"398\" class=\"content_image\" width=\"398\">上图为或门。</p><p><img src=\"http://pic2.zhimg.com/v2-94d9444eab2ba3d85ca73afa84803c11_b.jpg\" data-rawwidth=\"400\" data-rawheight=\"400\" class=\"content_image\" width=\"400\">上图为3周期异或门。</p><p><img src=\"http://pic1.zhimg.com/v2-bfa11ecd82d1f4537acf26ddc412bbec_b.jpg\" data-rawwidth=\"400\" data-rawheight=\"400\" class=\"content_image\" width=\"400\">上图为与门。</p><p><img src=\"http://pic4.zhimg.com/v2-c21281004316608b1a32f5de20b7cdf7_b.jpg\" data-rawwidth=\"400\" data-rawheight=\"400\" class=\"content_image\" width=\"400\">上图为与非门。</p><p><b>四、分频器</b></p><p><img src=\"http://pic4.zhimg.com/v2-73613797bc12a15896da474c5c53278b_b.jpg\" data-rawwidth=\"398\" data-rawheight=\"398\" class=\"content_image\" width=\"398\">上图为增频器。</p><p><img src=\"http://pic2.zhimg.com/v2-036719cb3891986b0cdb0a7acad8a35d_b.jpg\" data-rawwidth=\"398\" data-rawheight=\"398\" class=\"content_image\" width=\"398\">上图为降频器。</p><p><b>五、熔断器</b></p><p><img src=\"http://pic2.zhimg.com/v2-3f1f4b78127cf42c712e02a7a1bb7b1d_b.jpg\" data-rawwidth=\"398\" data-rawheight=\"398\" class=\"content_image\" width=\"398\"><img src=\"http://pic3.zhimg.com/v2-bdfe49e525782bd52d11ab83d7cf241a_b.jpg\" data-rawwidth=\"398\" data-rawheight=\"398\" class=\"content_image\" width=\"398\"><img src=\"http://pic2.zhimg.com/v2-e3b90cc0fc39d854208727e08213a959_b.jpg\" data-rawwidth=\"398\" data-rawheight=\"398\" class=\"content_image\" width=\"398\">上三图为4、5、6周期熔断器。当熔断器接收到信号后，它将阻断后续的一切信号。</p><p><b>六、ROM</b></p><p><img src=\"http://pic1.zhimg.com/v2-e5c04857093bd2856b5d1a0cece37194_b.jpg\" data-rawwidth=\"400\" data-rawheight=\"400\" class=\"content_image\" width=\"400\">ROM比较有趣，实现很简洁，左三线为寻址线，右三线为输出数据线。</p><p><b>七、触发器</b></p><p><img src=\"http://pic2.zhimg.com/v2-7ec35900b336547fb6bcbfc8904f6f99_b.jpg\" data-rawwidth=\"400\" data-rawheight=\"400\" class=\"content_image\" width=\"400\">上图是RS锁存器（双输入翻转器）。</p><p><b>八、边沿检测</b></p><p><img src=\"http://pic2.zhimg.com/v2-e729540af8af759823b5ec15dbb14b09_b.jpg\" data-rawwidth=\"400\" data-rawheight=\"400\" class=\"content_image\" width=\"400\">上图为上升沿检测。</p><p><img src=\"http://pic3.zhimg.com/v2-dafa49b0be65b2bb21eba2e45009dbb6_b.jpg\" data-rawwidth=\"398\" data-rawheight=\"398\" class=\"content_image\" width=\"398\">上图为下降沿检测。</p><p><b>九、信号分离器</b></p><p><img src=\"http://pic3.zhimg.com/v2-cad10d5dea718ec19515250fe4bed0e6_b.jpg\" data-rawwidth=\"398\" data-rawheight=\"398\" class=\"content_image\" width=\"398\"><img src=\"http://pic4.zhimg.com/v2-baa1a8a2becc63f761cf52e73990e427_b.jpg\" data-rawwidth=\"400\" data-rawheight=\"400\" class=\"content_image\" width=\"400\">它将信号按周期进行分离。</p><p><b>十、信号延长与缩短</b></p><p><img src=\"http://pic4.zhimg.com/v2-9471703506ad0cfaf755dd5f1c3b8fcb_b.jpg\" data-rawwidth=\"398\" data-rawheight=\"398\" class=\"content_image\" width=\"398\">上图将一系列连续信号的尾部延长/缩短一周期。</p><p><img src=\"http://pic3.zhimg.com/v2-e1b041cb2c42118b42bc11c4081255ea_b.jpg\" data-rawwidth=\"398\" data-rawheight=\"398\" class=\"content_image\" width=\"398\">上图将一系列连续信号的头部延长/缩短一周期。<br></p><p><b>十一、移位暂存器</b></p><p><img src=\"http://pic3.zhimg.com/v2-f4aed2e73b5d1b212c62451513a15ca6_b.jpg\" data-rawwidth=\"398\" data-rawheight=\"398\" class=\"content_image\" width=\"398\">完成串行到并行的转换。左边输入端的信号经过处理，输出至右边的相应地址线。左边源源不断产生信号，右边的1、2、3、4、5端相继输出，每次只有一条输出端有效。</p><p><b>十二、计数器</b></p><img src=\"http://pic1.zhimg.com/v2-271aa3a7b02d4da9404a0b4fa69ae2b8_b.jpg\" data-rawwidth=\"398\" data-rawheight=\"398\" class=\"content_image\" width=\"398\"><p><b>十三、ALU</b></p><p><img src=\"http://pic4.zhimg.com/v2-40c1dc3635b6ed2de891ca3d2357d1af_b.jpg\" data-rawwidth=\"398\" data-rawheight=\"398\" class=\"content_image\" width=\"398\">上图为乘法器。</p><p><img src=\"http://pic2.zhimg.com/v2-783c111cac1feac4abdcb60c3f7b0de1_b.jpg\" data-rawwidth=\"398\" data-rawheight=\"398\" class=\"content_image\" width=\"398\">上图为加法器。</p>","state":"published","sourceUrl":"","pageCommentsCount":0,"canComment":false,"snapshotUrl":"","slug":25593938,"publishedTime":"2017-03-06T16:44:24+08:00","url":"/p/25593938","title":"【游戏框架系列】Wireworld元胞自动机","summary":"<i>【多图预警】本文含有大量图片</i>写在前面这次实现的是Wireworld元胞自动机，相关资料如下：维基：<a href=\"https://en.wikipedia.org/wiki/Wireworld\" data-editable=\"true\" data-title=\"Wireworld - Wikipedia\" class=\"\">Wireworld - Wikipedia</a> 介绍：<a href=\"http://karlscherer.com/Wireworld.html\" data-editable=\"true\" data-title=\"Wireworld\" class=\"\">Wireworld</a>Flash模拟：<a href=\"http://www.rezmason.net/wireworld/\" class=\"\" data-editable=\"true\" data-title=\"Wireworld Player (Flash)\">Wireworld Player (Flash)</a> 如何实现简单的计算机：<a href=\"https://www.quinapalus.com/wi-index.html\" class=\"\" data-editable=\"true\" data-title=\"The Wireworld computer\">The Wireworld computer</a> Clojure实现：<a href=\"https://danprince.github.io/wireworld/\" data-editable=\"true\" data-title=\"Wireworld Simulator\" class=\"\">Wireworld Simulator</a>…","reviewingCommentsCount":0,"meta":{"previous":null,"next":null},"commentPermission":"anyone","commentsCount":0,"likesCount":0},"next":null},"commentsCount":0,"likesCount":0,"FULLINFO":true}},"User":{"bajdcc":{"isFollowed":false,"name":"陈安","headline":"专业研究野生技术 https://github.com/bajdcc","avatarUrl":"https://pic4.zhimg.com/v2-cd6d61ad9ef94c41b9e77f8e0f727893_s.jpg","isFollowing":false,"type":"people","slug":"bajdcc","bio":"野生技术菌","hash":"7a228f3d98a5d011f952110c10dc4976","uid":71809588264960,"isOrg":false,"description":"专业研究野生技术 https://github.com/bajdcc","profileUrl":"https://www.zhihu.com/people/bajdcc","avatar":{"id":"v2-cd6d61ad9ef94c41b9e77f8e0f727893","template":"https://pic4.zhimg.com/{id}_{size}.jpg"},"isOrgWhiteList":false,"badge":{"identity":null,"bestAnswerer":null}}},"Comment":{}},"me":{},"global":{},"columns":{"learncpp":{"following":false,"canManage":false,"href":"/api/columns/learncpp","name":"从零开始构建标准库","creator":{"slug":"bajdcc"},"url":"/learncpp","slug":"learncpp","avatar":{"id":"v2-bf63794c542fc73b11e17014b7e0d01d","template":"https://pic2.zhimg.com/{id}_{size}.jpg"},"FULLINFO":false}},"columnPosts":{},"postComments":{},"postReviewComments":{"comments":[],"newComments":[],"hasMore":true}}</textarea>

    <script src="//static.zhihu.com/hemingway/common.ac46319b23e12700340a.js"></script>
<script src="//static.zhihu.com/hemingway/app.47dccfede9fcf0800757.js"></script>
<script src="//static.zhihu.com/hemingway/raven.ccdadd4407812d1aac2f.js" async defer></script>
  </body>
</html>
